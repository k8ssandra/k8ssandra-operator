package cassandra

import (
	"github.com/Masterminds/semver/v3"
	"k8s.io/apimachinery/pkg/api/resource"
	"testing"

	"k8s.io/utils/pointer"

	"github.com/Jeffail/gabs"
	api "github.com/k8ssandra/k8ssandra-operator/apis/k8ssandra/v1alpha1"
	"github.com/k8ssandra/k8ssandra-operator/pkg/encryption"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestApplySystemReplication(t *testing.T) {
	type test struct {
		name        string
		dcConfig    *DatacenterConfig
		replication SystemReplication
		want        *DatacenterConfig
	}

	tests := []test{
		{
			name:        "single-dc with no jvm options",
			dcConfig:    &DatacenterConfig{},
			replication: SystemReplication{"dc1": 3},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						AdditionalOptions: []string{
							SystemReplicationFactorStrategy + "=dc1:3",
						},
					},
				},
			},
		},
		{
			name: "sing-dc with jvm options",
			dcConfig: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						MaxHeapSize: parseQuantity("1024Mi"),
					},
				},
			},
			replication: SystemReplication{"dc1": 3},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						MaxHeapSize: parseQuantity("1024Mi"),
						AdditionalOptions: []string{
							SystemReplicationFactorStrategy + "=dc1:3",
						},
					},
				},
			},
		},
		{
			name:     "multi-dc with no jvm options",
			dcConfig: &DatacenterConfig{},
			replication: SystemReplication{
				"dc1": 3,
				"dc2": 3,
				"dc3": 1,
			},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						AdditionalOptions: []string{
							SystemReplicationFactorStrategy + "=dc1:3,dc2:3,dc3:1",
						},
					},
				},
			},
		},
		{
			name: "multi-dc with jvm options",
			dcConfig: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						MaxHeapSize: parseQuantity("1024Mi"),
					},
				},
			},
			replication: SystemReplication{
				"dc1": 3,
				"dc2": 2,
				"dc3": 1,
			},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						MaxHeapSize: parseQuantity("1024Mi"),
						AdditionalOptions: []string{
							SystemReplicationFactorStrategy + "=dc1:3,dc2:2,dc3:1",
						},
					},
				},
			},
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			ApplySystemReplication(tc.dcConfig, tc.replication)
			require.Equal(t, tc.want, tc.dcConfig)
		})
	}
}

func TestCreateJsonConfig(t *testing.T) {
	type test struct {
		name   string
		config DatacenterConfig
		got    []byte
		want   string
	}

	//goland:noinspection GoDeprecation
	deprecatedOpts := api.JvmOptions{
		HeapSize:       parseQuantity("1024Mi"),
		HeapNewGenSize: parseQuantity("128Mi"),
	}

	tests := []test{
		{
			name: "[4.0.0] concurrent_reads, concurrent_writes, concurrent_counter_writes",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						ConcurrentReads:         pointer.Int(8),
						ConcurrentWrites:        pointer.Int(16),
						ConcurrentCounterWrites: pointer.Int(4),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16,
                "concurrent_reads": 8,
                "concurrent_writes": 16,
                "concurrent_counter_writes": 4
              }
            }`,
		},
		{
			name: "[3.11.11] deprecated heap size",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("3.11.11"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					JvmOptions: deprecatedOpts,
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 256,
				"start_rpc": false
              },
              "jvm-options": {
                "initial_heap_size": 1073741824,
                "max_heap_size": 1073741824,
                "heap_size_young_generation": 134217728
              }
            }`,
		},
		{
			name: "[4.0.0] deprecated heap size",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					JvmOptions: deprecatedOpts,
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16
              },
              "jvm-server-options": {
                "initial_heap_size": 1073741824,
                "max_heap_size": 1073741824
              }
            }`,
		},
		{
			name: "[4.0.0] concurrent_reads and concurrent_writes with system replication",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						ConcurrentReads:  pointer.Int(8),
						ConcurrentWrites: pointer.Int(16),
					},
					JvmOptions: api.JvmOptions{
						AdditionalOptions: []string{
							SystemReplicationFactorStrategy + "=dc1:3,dc2:3,dc3:3",
						},
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16,
                "concurrent_reads": 8,
                "concurrent_writes": 16
              },
              "cassandra-env-sh": {
                "additional-jvm-opts": [
                  "-Dcassandra.system_distributed_replication=dc1:3,dc2:3,dc3:3"
                ]
              }
            }`,
		},
		{
			name: "[4.0.0] auto_snapshot, memtable_flush_writers, commitlog_segment_size_in_mb",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						AutoSnapshot:             pointer.Bool(true),
						MemtableFlushWriters:     pointer.Int(10),
						CommitlogSegmentSizeInMb: pointer.Int(8192),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16,
                "auto_snapshot": true,
                "memtable_flush_writers": 10,
                "commitlog_segment_size_in_mb": 8192
              }
            }`,
		},
		{
			name: "[4.0.0] concurrent_compactors, compaction_throughput_mb_per_sec, sstable_preemptive_open_interval_in_mb",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						ConcurrentCompactors:              pointer.Int(4),
						CompactionThroughputMbPerSec:      pointer.Int(64),
						SstablePreemptiveOpenIntervalInMb: pointer.Int(0),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16,
                "concurrent_compactors": 4,
                "compaction_throughput_mb_per_sec": 64,
                "sstable_preemptive_open_interval_in_mb": 0
              }
            }`,
		},
		{
			name: "[4.0.0] key_cache_size_in_mb, counter_cache_size_in_mb, prepared_statements_cache_size_mb, slow_query_log_timeout_in_ms",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						KeyCacheSizeInMb:              pointer.Int(100),
						CounterCacheSizeInMb:          pointer.Int(50),
						PreparedStatementsCacheSizeMb: pointer.Int(180),
						SlowQueryLogTimeoutInMs:       pointer.Int(500),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16,
                "key_cache_size_in_mb": 100,
                "counter_cache_size_in_mb": 50,
                "prepared_statements_cache_size_mb": 180,
                "slow_query_log_timeout_in_ms": 500
              }
            }`,
		},
		{
			name: "[4.0.0] file_cache_size_in_mb, row_cache_size_in_mb",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						FileCacheSizeInMb: pointer.Int(500),
						RowCacheSizeInMb:  pointer.Int(100),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16,
                "file_cache_size_in_mb": 500,
                "row_cache_size_in_mb": 100
              }
            }`,
		},
		{
			name: "[3.11.10] thrift_prepared_statements_cache_size_mb",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("3.11.10"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						ThriftPreparedStatementsCacheSizeMb: pointer.Int(1),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 256,
                "thrift_prepared_statements_cache_size_mb": 1,
				"start_rpc": false
              }
            }`,
		},
		{
			name: "[4.0.0] thrift_prepared_statements_cache_size_mb",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						ThriftPreparedStatementsCacheSizeMb: pointer.Int(1),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16
              }
            }`,
		},
		{
			name: "[3.11.11] num_tokens",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("3.11.11"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						NumTokens: pointer.Int(32),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 32,
				"start_rpc": false
              }
            }`,
		},
		{
			name: "[4.0.0] num_tokens",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						NumTokens: pointer.Int(32),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 32
              }
            }`,
		},
		{
			name: "[4.0.0] allocate_tokens_for_local_replication_factor",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						AllocateTokensForLocalReplicationFactor: pointer.Int(5),
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "allocate_tokens_for_local_replication_factor": 5,
				"num_tokens": 16
              }
            }`,
		},
		{
			name: "[3.11.11] auth",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("3.11.11"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						Authenticator:                 pointer.String("FakeAuthenticator"),
						Authorizer:                    pointer.String("FakeAuthorizer"),
						RoleManager:                   pointer.String("FakeRoleManager"),
						RolesValidityInMs:             pointer.Int(123),
						RolesUpdateIntervalInMs:       pointer.Int(123),
						PermissionsValidityInMs:       pointer.Int(456),
						PermissionsUpdateIntervalInMs: pointer.Int(456),
						CredentialsValidityInMs:       pointer.Int(789),
						CredentialsUpdateIntervalInMs: pointer.Int(789),
					},
				},
			},
			want: `{
				"cassandra-yaml": {
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"role_manager": "FakeRoleManager",
					"roles_validity_in_ms": 123,
					"roles_update_interval_in_ms": 123,
					"permissions_validity_in_ms": 456,
					"permissions_update_interval_in_ms": 456,
					"credentials_validity_in_ms": 789,
					"credentials_update_interval_in_ms": 789,
					"num_tokens": 256,
					"start_rpc":false
				}
		   }`,
		},
		{
			name: "[4.0.0] auth",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						Authenticator:                 pointer.String("FakeAuthenticator"),
						Authorizer:                    pointer.String("FakeAuthorizer"),
						RoleManager:                   pointer.String("FakeRoleManager"),
						RolesValidityInMs:             pointer.Int(123),
						RolesUpdateIntervalInMs:       pointer.Int(123),
						PermissionsValidityInMs:       pointer.Int(456),
						PermissionsUpdateIntervalInMs: pointer.Int(456),
						CredentialsValidityInMs:       pointer.Int(789),
						CredentialsUpdateIntervalInMs: pointer.Int(789),
					},
				},
			},
			want: `{
				"cassandra-yaml": {
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"role_manager": "FakeRoleManager",
					"roles_validity_in_ms": 123,
					"roles_update_interval_in_ms": 123,
					"permissions_validity_in_ms": 456,
					"permissions_update_interval_in_ms": 456,
					"credentials_validity_in_ms": 789,
					"credentials_update_interval_in_ms": 789,
					"num_tokens": 16
				}
		   }`,
		},
		{
			name: "[3.11.11] all options",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("3.11.11"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						AllocateTokensForKeyspace:               pointer.String("system_auth"),
						AllocateTokensForLocalReplicationFactor: pointer.Int(3),
						AuditLoggingOptions: &api.AuditLogOptions{
							Enabled: false,
						},
						AuthReadConsistencyLevel:         pointer.String("ONE"),
						AuthWriteConsistencyLevel:        pointer.String("ONE"),
						Authenticator:                    pointer.String("FakeAuthenticator"),
						Authorizer:                       pointer.String("FakeAuthorizer"),
						AutoHintsCleanupEnabled:          pointer.Bool(true),
						AutoOptimiseFullRepairStreams:    pointer.Bool(false),
						AutoOptimiseIncRepairStreams:     pointer.Bool(true),
						AutoOptimisePreviewRepairStreams: pointer.Bool(false),
						AutoSnapshot:                     pointer.Bool(true),
						AutocompactionOnStartupEnabled:   pointer.Bool(false),
						AutomaticSstableUpgrade:          pointer.Bool(true),
						AvailableProcessors:              pointer.Int(17),
						BackPressureEnabled:              pointer.Bool(true),
						BackPressureStrategy: &api.ParameterizedClass{
							ClassName: "FakeBackPressureStrategy",
						},
						BatchSizeFailThresholdInKb:            pointer.Int(20),
						BatchSizeWarnThresholdInKb:            pointer.Int(21),
						BatchlogReplayThrottleInKb:            pointer.Int(22),
						BlockForPeersInRemoteDcs:              pointer.Bool(false),
						BlockForPeersTimeoutInSecs:            pointer.Int(24),
						BufferPoolUseHeapIfExhausted:          pointer.Bool(false),
						CasContentionTimeoutInMs:              pointer.Int(28),
						CdcEnabled:                            pointer.Bool(false),
						CdcFreeSpaceCheckIntervalMs:           pointer.Int(30),
						CdcRawDirectory:                       pointer.String("FakeCdcRawDirectory"),
						CdcTotalSpaceInMb:                     pointer.Int(32),
						CheckForDuplicateRowsDuringCompaction: pointer.Bool(false),
						CheckForDuplicateRowsDuringReads:      pointer.Bool(true),
						ClientErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						ColumnIndexCacheSizeInKb: pointer.Int(38),
						ColumnIndexSizeInKb:      pointer.Int(39),
						CommitlogCompression: &api.ParameterizedClass{
							ClassName: "FakeCommitlogCompression",
						},
						CommitlogMaxCompressionBuffersInPool:       pointer.Int(43),
						CommitlogPeriodicQueueSize:                 pointer.Int(44),
						CommitlogSegmentSizeInMb:                   pointer.Int(45),
						CommitlogSync:                              pointer.String("periodic"),
						CommitlogSyncPeriodInMs:                    pointer.Int(49),
						CommitlogTotalSpaceInMb:                    pointer.Int(50),
						CompactionLargePartitionWarningThresholdMb: pointer.Int(51),
						CompactionThroughputMbPerSec:               pointer.Int(52),
						CompactionTombstoneWarningThreshold:        pointer.Int(53),
						ConcurrentCompactors:                       pointer.Int(54),
						ConcurrentCounterWrites:                    pointer.Int(55),
						ConcurrentMaterializedViewBuilders:         pointer.Int(56),
						ConcurrentMaterializedViewWrites:           pointer.Int(57),
						ConcurrentReads:                            pointer.Int(58),
						ConcurrentReplicates:                       pointer.Int(59),
						ConcurrentValidations:                      pointer.Int(60),
						ConcurrentWrites:                           pointer.Int(61),
						ConsecutiveMessageErrorsThreshold:          pointer.Int(62),
						CorruptedTombstoneStrategy:                 pointer.String("disabled"),
						CounterCacheKeysToSave:                     pointer.Int(64),
						CounterCacheSavePeriod:                     pointer.Int(65),
						CounterCacheSizeInMb:                       pointer.Int(66),
						CounterWriteRequestTimeoutInMs:             pointer.Int(67),
						CredentialsCacheMaxEntries:                 pointer.Int(68),
						CredentialsUpdateIntervalInMs:              pointer.Int(69),
						CredentialsValidityInMs:                    pointer.Int(70),
						CrossNodeTimeout:                           pointer.Bool(false),
						DefaultKeyspaceRf:                          pointer.Int(73),
						DenylistConsistencyLevel:                   pointer.String("ONE"),
						DenylistInitialLoadRetrySeconds:            pointer.Int(75),
						DenylistMaxKeysPerTable:                    pointer.Int(76),
						DenylistMaxKeysTotal:                       pointer.Int(77),
						DenylistRefreshSeconds:                     pointer.Int(78),
						DiagnosticEventsEnabled:                    pointer.Bool(false),
						DiskAccessMode:                             pointer.String("auto"),
						DiskOptimizationEstimatePercentile:         pointer.String("0.1"),
						DiskOptimizationPageCrossChance:            pointer.String("0.1"),
						DiskOptimizationStrategy:                   pointer.String("ssd"),
						DynamicSnitch:                              pointer.Bool(false),
						DynamicSnitchBadnessThreshold:              pointer.String("86.1"),
						DynamicSnitchResetIntervalInMs:             pointer.Int(87),
						DynamicSnitchUpdateIntervalInMs:            pointer.Int(88),
						EnableDenylistRangeReads:                   pointer.Bool(false),
						EnableDenylistReads:                        pointer.Bool(true),
						EnableDenylistWrites:                       pointer.Bool(false),
						EnableDropCompactStorage:                   pointer.Bool(true),
						EnableMaterializedViews:                    pointer.Bool(false),
						EnablePartitionDenylist:                    pointer.Bool(true),
						EnableSasiIndexes:                          pointer.Bool(false),
						EnableScriptedUserDefinedFunctions:         pointer.Bool(true),
						EnableTransientReplication:                 pointer.Bool(false),
						EnableUserDefinedFunctions:                 pointer.Bool(true),
						EnableUserDefinedFunctionsThreads:          pointer.Bool(false),
						EndpointSnitch:                             pointer.String("FakeEndpointSnitch"),
						FailureDetector:                            pointer.String("FakeFailureDetector"),
						FileCacheEnabled:                           pointer.Bool(true),
						FileCacheRoundUp:                           pointer.Bool(false),
						FileCacheSizeInMb:                          pointer.Int(104),
						FlushCompression:                           pointer.String("none"),
						FullQueryLoggingOptions: &api.FullQueryLoggerOptions{
							LogDir: pointer.String("/tmp"),
							Block:  pointer.Bool(false),
						},
						GcLogThresholdInMs:               pointer.Int(107),
						GcWarnThresholdInMs:              pointer.Int(108),
						HintWindowPersistentEnabled:      pointer.Bool(false),
						HintedHandoffDisabledDatacenters: &[]string{"dc1"},
						HintedHandoffEnabled:             pointer.Bool(false),
						HintedHandoffThrottleInKb:        pointer.Int(112),
						HintsCompression: &api.ParameterizedClass{
							ClassName: "FakeHintsCompression",
						},
						HintsFlushPeriodInMs:                                           pointer.Int(115),
						IdealConsistencyLevel:                                          pointer.String("ONE"),
						IndexInterval:                                                  pointer.Int(118),
						IndexSummaryCapacityInMb:                                       pointer.Int(119),
						IndexSummaryResizeIntervalInMinutes:                            pointer.Int(120),
						InitialRangeTombstoneListAllocationSize:                        pointer.Int(121),
						InterDcStreamThroughputOutboundMegabitsPerSec:                  pointer.Int(123),
						InterDcTcpNodelay:                                              pointer.Bool(true),
						InternodeApplicationReceiveQueueCapacityInBytes:                pointer.Int(125),
						InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes: pointer.Int(126),
						InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes:   pointer.Int(127),
						InternodeApplicationSendQueueCapacityInBytes:                   pointer.Int(128),
						InternodeApplicationSendQueueReserveEndpointCapacityInBytes:    pointer.Int(129),
						InternodeApplicationSendQueueReserveGlobalCapacityInBytes:      pointer.Int(130),
						InternodeAuthenticator:                                         pointer.String("FakeInternodeAuthenticator"),
						InternodeCompression:                                           pointer.String("all"),
						InternodeErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						InternodeMaxMessageSizeInBytes:                   pointer.Int(134),
						InternodeRecvBuffSizeInBytes:                     pointer.Int(135),
						InternodeSendBuffSizeInBytes:                     pointer.Int(136),
						InternodeSocketReceiveBufferSizeInBytes:          pointer.Int(137),
						InternodeSocketSendBufferSizeInBytes:             pointer.Int(138),
						InternodeStreamingTcpUserTimeoutInMs:             pointer.Int(139),
						InternodeTcpConnectTimeoutInMs:                   pointer.Int(140),
						InternodeTcpUserTimeoutInMs:                      pointer.Int(141),
						KeyCacheKeysToSave:                               pointer.Int(142),
						KeyCacheMigrateDuringCompaction:                  pointer.Bool(false),
						KeyCacheSavePeriod:                               pointer.Int(144),
						KeyCacheSizeInMb:                                 pointer.Int(145),
						KeyspaceCountWarnThreshold:                       pointer.Int(146),
						MaxConcurrentAutomaticSstableUpgrades:            pointer.Int(152),
						MaxHintWindowInMs:                                pointer.Int(153),
						MaxHintsDeliveryThreads:                          pointer.Int(154),
						MaxHintsFileSizeInMb:                             pointer.Int(155),
						MaxMutationSizeInKb:                              pointer.Int(156),
						MaxStreamingRetries:                              pointer.Int(157),
						MaxValueSizeInMb:                                 pointer.Int(158),
						MemtableAllocationType:                           pointer.String("heap_buffers"),
						MemtableCleanupThreshold:                         pointer.String("0.1"),
						MemtableFlushWriters:                             pointer.Int(1),
						MemtableHeapSpaceInMb:                            pointer.Int(162),
						MemtableOffheapSpaceInMb:                         pointer.Int(163),
						MinFreeSpacePerDriveInMb:                         pointer.Int(164),
						MinimumKeyspaceRf:                                pointer.Int(1),
						NativeTransportAllowOlderProtocols:               pointer.Bool(true),
						NativeTransportFlushInBatchesLegacy:              pointer.Bool(false),
						NativeTransportIdleTimeoutInMs:                   pointer.Int(168),
						NativeTransportMaxConcurrentConnections:          pointer.Int(169),
						NativeTransportMaxConcurrentConnectionsPerIp:     pointer.Int(170),
						NativeTransportMaxConcurrentRequestsInBytes:      pointer.Int(171),
						NativeTransportMaxConcurrentRequestsInBytesPerIp: pointer.Int(172),
						NativeTransportMaxFrameSizeInMb:                  pointer.Int(173),
						NativeTransportMaxNegotiableProtocolVersion:      pointer.Int(4),
						NativeTransportMaxRequestsPerSecond:              pointer.Int(175),
						NativeTransportMaxThreads:                        pointer.Int(176),
						NativeTransportRateLimitingEnabled:               pointer.Bool(false),
						NativeTransportReceiveQueueCapacityInBytes:       pointer.Int(180),
						NetworkAuthorizer:                                pointer.String("FakeNetworkAuthorizer"),
						NetworkingCacheSizeInMb:                          pointer.Int(182),
						NumTokens:                                        pointer.Int(183),
						OtcBacklogExpirationIntervalMs:                   pointer.Int(184),
						OtcCoalescingEnoughCoalescedMessages:             pointer.Int(10),
						OtcCoalescingStrategy:                            pointer.String("FakeOtcCoalescingStrategy"),
						OtcCoalescingWindowUs:                            pointer.Int(187),
						PaxosCacheSizeInMb:                               pointer.Int(189),
						PeriodicCommitlogSyncLagBlockInMs:                pointer.Int(190),
						PermissionsCacheMaxEntries:                       pointer.Int(191),
						PermissionsUpdateIntervalInMs:                    pointer.Int(192),
						PermissionsValidityInMs:                          pointer.Int(193),
						PhiConvictThreshold:                              pointer.String("8.1"),
						PreparedStatementsCacheSizeMb:                    pointer.Int(195),
						RangeRequestTimeoutInMs:                          pointer.Int(196),
						RangeTombstoneListGrowthFactor:                   pointer.String("197.1"),
						ReadRequestTimeoutInMs:                           pointer.Int(198),
						RejectRepairCompactionThreshold:                  pointer.Int(199),
						RepairCommandPoolFullStrategy:                    pointer.String("queue"),
						RepairCommandPoolSize:                            pointer.Int(201),
						RepairSessionMaxTreeDepth:                        pointer.Int(202),
						RepairSessionSpaceInMb:                           pointer.Int(203),
						RepairedDataTrackingForPartitionReadsEnabled:     pointer.Bool(true),
						RepairedDataTrackingForRangeReadsEnabled:         pointer.Bool(false),
						ReplicaFilteringProtection: &api.ReplicaFilteringProtectionOptions{
							CachedRowsWarnThreshold: pointer.Int(100),
							CachedRowsFailThreshold: pointer.Int(200),
						},
						ReportUnconfirmedRepairedDataMismatches: pointer.Bool(false),
						RequestScheduler:                        pointer.String("FakeRequestScheduler"),
						RequestSchedulerId:                      pointer.String("keyspace"),
						RequestSchedulerOptions: &api.RequestSchedulerOptions{
							ThrottleLimit: pointer.Int(100),
							DefaultWeight: pointer.Int(200),
						},
						RequestTimeoutInMs:                     pointer.Int(211),
						RoleManager:                            pointer.String("FakeRoleManager"),
						RolesCacheMaxEntries:                   pointer.Int(213),
						RolesUpdateIntervalInMs:                pointer.Int(214),
						RolesValidityInMs:                      pointer.Int(215),
						RowCacheClassName:                      pointer.String("FakeRowCacheClassName"),
						RowCacheKeysToSave:                     pointer.Int(217),
						RowCacheSavePeriod:                     pointer.Int(218),
						RowCacheSizeInMb:                       pointer.Int(219),
						SlowQueryLogTimeoutInMs:                pointer.Int(234),
						SnapshotBeforeCompaction:               pointer.Bool(false),
						SnapshotLinksPerSecond:                 pointer.Int(236),
						SnapshotOnDuplicateRowDetection:        pointer.Bool(false),
						SnapshotOnRepairedDataMismatch:         pointer.Bool(true),
						SstablePreemptiveOpenIntervalInMb:      pointer.Int(240),
						StreamEntireSstables:                   pointer.Bool(true),
						StreamThroughputOutboundMegabitsPerSec: pointer.Int(245),
						StreamingConnectionsPerHost:            pointer.Int(246),
						StreamingKeepAlivePeriodInSecs:         pointer.Int(247),
						StreamingSocketTimeoutInMs:             pointer.Int(248),
						TableCountWarnThreshold:                pointer.Int(249),
						ThriftFramedTransportSizeInMb:          pointer.Int(250),
						ThriftMaxMessageLengthInMb:             pointer.Int(251),
						ThriftPreparedStatementsCacheSizeMb:    pointer.Int(252),
						TombstoneFailureThreshold:              pointer.Int(253),
						TombstoneWarnThreshold:                 pointer.Int(254),
						TracetypeQueryTtl:                      pointer.Int(255),
						TracetypeRepairTtl:                     pointer.Int(256),
						TrackWarnings: &api.TrackWarnings{
							Enabled: false,
						},
						TraverseAuthFromRoot:                       pointer.Bool(false),
						TrickleFsync:                               pointer.Bool(true),
						TrickleFsyncIntervalInKb:                   pointer.Int(261),
						TruncateRequestTimeoutInMs:                 pointer.Int(262),
						UnloggedBatchAcrossPartitionsWarnThreshold: pointer.Int(263),
						UseDeterministicTableId:                    pointer.Bool(true),
						UseOffheapMerkleTrees:                      pointer.Bool(false),
						UserDefinedFunctionFailTimeout:             pointer.Int(20),
						UserDefinedFunctionWarnTimeout:             pointer.Int(10),
						UserFunctionTimeoutPolicy:                  pointer.String("ignore"),
						ValidationPreviewPurgeHeadStartInSec:       pointer.Int(269),
						WindowsTimerInterval:                       pointer.Int(270),
						WriteRequestTimeoutInMs:                    pointer.Int(271),
					},
					JvmOptions: api.JvmOptions{
						AlwaysPreTouch:                       pointer.Bool(true),
						AvailableProcessors:                  pointer.Int(123),
						CmsHeapSizeYoungGeneration:           parseQuantity("128Mi"),
						CmsInitiatingOccupancyFraction:       pointer.Int(80),
						CmsMaxTenuringThreshold:              pointer.Int(90),
						CmsSurvivorRatio:                     pointer.Int(75),
						CmsWaitDurationMs:                    pointer.Int(40),
						CrashOnOutOfMemoryError:              pointer.Bool(true),
						DebugNonSafepoints:                   pointer.Bool(true),
						DisableAuthCachesRemoteConfiguration: pointer.Bool(true),
						DisableBiasedLocking:                 pointer.Bool(true),
						DisableContendedAnnotations:          pointer.Bool(true),
						DisablePerfSharedMem:                 pointer.Bool(true),
						EnableAssertions:                     pointer.Bool(true),
						EnableFlightRecorder:                 pointer.Bool(true),
						EnableNonRootThreadPriority:          pointer.Bool(true),
						EnableThreadPriorities:               pointer.Bool(true),
						ExitOnOutOfMemoryError:               pointer.Bool(true),
						ExpirationDateOverflowPolicy:         pointer.String("REJECT"),
						Force30ProtocolVersion:               pointer.Bool(true),
						ForceDefaultIndexingPageSize:         pointer.Bool(true),
						G1ConcGcThreads:                      pointer.Int(4),
						G1InitiatingHeapOccupancyPercent:     pointer.Int(85),
						G1MaxGcPauseMs:                       pointer.Int(1000),
						G1ParallelGcThreads:                  pointer.Int(8),
						G1RSetUpdatingPauseTimePercent:       pointer.Int(60),
						GarbageCollector:                     "G1GC",
						GuaranteedSafepointIntervalMs:        pointer.Int(1000),
						HeapDumpOnOutOfMemoryError:           pointer.Bool(true),
						InitialHeapSize:                      parseQuantity("1Gi"),
						JdkAllowAttachSelf:                   pointer.Bool(true),
						JmxConnectionType:                    pointer.String("local-no-auth"),
						JmxPort:                              pointer.Int(7199),
						JmxRemoteSsl:                         pointer.Bool(true),
						JmxRemoteSslOpts:                     pointer.String("-Dopt=value"),
						JmxRemoteSslRequireClientAuth:        pointer.Bool(true),
						ListenForRemoteDebuggers:             pointer.Bool(true),
						LogCompilation:                       pointer.Bool(true),
						LogFileSize:                          parseQuantity("1Gi"),
						MaxHeapSize:                          parseQuantity("4Gi"),
						MaxHintTtlSeconds:                    pointer.Int(1000),
						MetricsReporterConfigFile:            pointer.String("/mnt/dir"),
						NettyEventloopMaxPendingTasks:        pointer.Int(123),
						NettyTryReflectionSetAccessible:      pointer.Bool(true),
						NioAlignDirectMemory:                 pointer.Bool(true),
						NioMaxCachedBufferSize:               parseQuantity("1Mi"),
						NumberOfLogFiles:                     pointer.Int(10),
						PerThreadStackSize:                   parseQuantity("1Gi"),
						PreferIpv4:                           pointer.Bool(true),
						PreserveFramePointer:                 pointer.Bool(true),
						PrintApplicationStoppedTime:          pointer.Bool(true),
						PrintDateStamps:                      pointer.Bool(true),
						PrintDetails:                         pointer.Bool(true),
						PrintFlssStatistics:                  pointer.Bool(true),
						PrintHeap:                            pointer.Bool(true),
						PrintHeapHistogramOnOutOfMemoryError: pointer.Bool(true),
						PrintPromotionFailure:                pointer.Bool(true),
						PrintTenuringDistribution:            pointer.Bool(true),
						ResizeTlab:                           pointer.Bool(true),
						RingDelayMs:                          pointer.Int(456),
						StringTableSize:                      parseQuantity("1Gi"),
						TriggersDirectory:                    pointer.String("/mnt/dir"),
						UnlockCommercialFeatures:             pointer.Bool(true),
						UnlockDiagnosticVmOptions:            pointer.Bool(true),
						UseLogFile:                           pointer.Bool(true),
						UseLogFileRotation:                   pointer.Bool(true),
						UseNuma:                              pointer.Bool(true),
						UseTlab:                              pointer.Bool(true),
						WriteSurvey:                          pointer.Bool(true),
						AdditionalOptions:                    []string{"-Dadditional.option.1=true", "-Dadditional.option.2=42"},
					},
				},
			},
			want: `{
				"cassandra-yaml": {
					"allocate_tokens_for_keyspace": "system_auth",
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"auto_snapshot": true,
					"back_pressure_enabled": true,
					"back_pressure_strategy": {"class_name": "FakeBackPressureStrategy"},
					"batch_size_fail_threshold_in_kb": 20,
					"batch_size_warn_threshold_in_kb": 21,
					"batchlog_replay_throttle_in_kb": 22,
					"buffer_pool_use_heap_if_exhausted": false,
					"cas_contention_timeout_in_ms": 28,
					"cdc_enabled": false,
					"cdc_free_space_check_interval_ms": 30,
					"cdc_raw_directory": "FakeCdcRawDirectory",
					"cdc_total_space_in_mb": 32,
					"check_for_duplicate_rows_during_compaction": false,
					"check_for_duplicate_rows_during_reads": true,
					"column_index_cache_size_in_kb": 38,
					"column_index_size_in_kb": 39,
					"commitlog_compression": {"class_name": "FakeCommitlogCompression"},
					"commitlog_max_compression_buffers_in_pool": 43,
					"commitlog_periodic_queue_size": 44,
					"commitlog_segment_size_in_mb": 45,
					"commitlog_sync": "periodic",
					"commitlog_sync_period_in_ms": 49,
					"commitlog_total_space_in_mb": 50,
					"compaction_large_partition_warning_threshold_mb": 51,
					"compaction_throughput_mb_per_sec": 52,
					"concurrent_compactors": 54,
					"concurrent_counter_writes": 55,
					"concurrent_materialized_view_writes": 57,
					"concurrent_reads": 58,
					"concurrent_replicates": 59,
					"concurrent_writes": 61,
					"counter_cache_keys_to_save": 64,
					"counter_cache_save_period": 65,
					"counter_cache_size_in_mb": 66,
					"counter_write_request_timeout_in_ms": 67,
					"credentials_cache_max_entries": 68,
					"credentials_update_interval_in_ms": 69,
					"credentials_validity_in_ms": 70,
					"cross_node_timeout": false,
					"disk_access_mode": "auto",
					"disk_optimization_estimate_percentile": "0.1",
					"disk_optimization_page_cross_chance": "0.1",
					"disk_optimization_strategy": "ssd",
					"dynamic_snitch": false,
					"dynamic_snitch_badness_threshold": "86.1",
					"dynamic_snitch_reset_interval_in_ms": 87,
					"dynamic_snitch_update_interval_in_ms": 88,
					"enable_drop_compact_storage": true,
					"enable_materialized_views": false,
					"enable_sasi_indexes": false,
					"enable_scripted_user_defined_functions": true,
					"enable_user_defined_functions": true,
					"enable_user_defined_functions_threads": false,
					"endpoint_snitch": "FakeEndpointSnitch",
					"file_cache_round_up": false,
					"file_cache_size_in_mb": 104,
					"gc_log_threshold_in_ms": 107,
					"gc_warn_threshold_in_ms": 108,
					"hinted_handoff_disabled_datacenters": ["dc1"],
					"hinted_handoff_enabled": false,
					"hinted_handoff_throttle_in_kb": 112,
					"hints_compression": {"class_name": "FakeHintsCompression"},
					"hints_flush_period_in_ms": 115,
					"index_interval": 118,
					"index_summary_capacity_in_mb": 119,
					"index_summary_resize_interval_in_minutes": 120,
					"inter_dc_stream_throughput_outbound_megabits_per_sec": 123,
					"inter_dc_tcp_nodelay": true,
					"internode_authenticator": "FakeInternodeAuthenticator",
					"internode_compression": "all",
					"internode_recv_buff_size_in_bytes": 135,
					"internode_send_buff_size_in_bytes": 136,
					"key_cache_keys_to_save": 142,
					"key_cache_save_period": 144,
					"key_cache_size_in_mb": 145,
					"max_hint_window_in_ms": 153,
					"max_hints_delivery_threads": 154,
					"max_hints_file_size_in_mb": 155,
					"max_mutation_size_in_kb": 156,
					"max_streaming_retries": 157,
					"max_value_size_in_mb": 158,
					"memtable_allocation_type": "heap_buffers",
					"memtable_cleanup_threshold": "0.1",
					"memtable_flush_writers": 1,
					"memtable_heap_space_in_mb": 162,
					"memtable_offheap_space_in_mb": 163,
					"min_free_space_per_drive_in_mb": 164,
					"native_transport_flush_in_batches_legacy": false,
					"native_transport_max_concurrent_connections": 169,
					"native_transport_max_concurrent_connections_per_ip": 170,
					"native_transport_max_concurrent_requests_in_bytes": 171,
					"native_transport_max_concurrent_requests_in_bytes_per_ip": 172,
					"native_transport_max_frame_size_in_mb": 173,
					"native_transport_max_negotiable_protocol_version": 4,
					"native_transport_max_threads": 176,
					"num_tokens": 183,
					"otc_backlog_expiration_interval_ms": 184,
					"otc_coalescing_enough_coalesced_messages": 10,
					"otc_coalescing_strategy": "FakeOtcCoalescingStrategy",
					"otc_coalescing_window_us": 187,
					"permissions_cache_max_entries": 191,
					"permissions_update_interval_in_ms": 192,
					"permissions_validity_in_ms": 193,
					"phi_convict_threshold": "8.1",
					"prepared_statements_cache_size_mb": 195,
					"range_request_timeout_in_ms": 196,
					"read_request_timeout_in_ms": 198,
					"repair_session_max_tree_depth": 202,
					"replica_filtering_protection": {"cached_rows_warn_threshold": 100, "cached_rows_fail_threshold": 200},
					"request_scheduler": "FakeRequestScheduler",
					"request_scheduler_id": "keyspace",
					"request_scheduler_options": {"throttle_limit": 100, "default_weight": 200},
					"request_timeout_in_ms": 211,
					"role_manager": "FakeRoleManager",
					"roles_cache_max_entries": 213,
					"roles_update_interval_in_ms": 214,
					"roles_validity_in_ms": 215,
					"row_cache_class_name": "FakeRowCacheClassName",
					"row_cache_keys_to_save": 217,
					"row_cache_save_period": 218,
					"row_cache_size_in_mb": 219,
					"slow_query_log_timeout_in_ms": 234,
					"snapshot_before_compaction": false,
					"snapshot_on_duplicate_row_detection": false,
					"sstable_preemptive_open_interval_in_mb": 240,
					"start_rpc":false,
					"stream_throughput_outbound_megabits_per_sec": 245,
					"streaming_keep_alive_period_in_secs": 247,
					"streaming_socket_timeout_in_ms": 248,
					"thrift_framed_transport_size_in_mb": 250,
					"thrift_max_message_length_in_mb": 251,
					"thrift_prepared_statements_cache_size_mb": 252,
					"tombstone_failure_threshold": 253,
					"tombstone_warn_threshold": 254,
					"tracetype_query_ttl": 255,
					"tracetype_repair_ttl": 256,
					"trickle_fsync": true,
					"trickle_fsync_interval_in_kb": 261,
					"truncate_request_timeout_in_ms": 262,
					"unlogged_batch_across_partitions_warn_threshold": 263,
					"user_defined_function_fail_timeout": 20,
					"user_defined_function_warn_timeout": 10,
					"user_function_timeout_policy": "ignore",
					"windows_timer_interval": 270,
					"write_request_timeout_in_ms": 271
				},
				"jvm-options":{
					"agent_lib_jdwp":true,
					"always_pre_touch":true,
					"cassandra_available_processors":123,
					"cassandra_disable_auth_caches_remote_configuration":true,
					"cassandra_force_3_0_protocol_version":true,
					"cassandra_force_default_indexing_page_size":true,
					"cassandra_metrics_reporter_config_file":"/mnt/dir",
					"cassandra_ring_delay_ms":456,
					"cassandra_triggers_dir":"/mnt/dir",
					"cassandra_write_survey":true,
					"cms_initiating_occupancy_fraction":80,
					"cms_wait_duration":40,
					"conc_gc_threads":4,
					"enable_assertions":true,
					"flight_recorder":true,
					"garbage_collector":"G1GC",
					"gc_log_file_size":1073741824,
                    "g1r_set_updating_pause_time_percent":60,
					"heap_dump_on_out_of_memory_error":true,
					"heap_size_young_generation":134217728,
					"initial_heap_size":1073741824,
					"initiating_heap_occupancy_percent":85,
					"java_net_prefer_ipv4_stack":true,
					"jmx-connection-type":"local-no-auth",
					"jmx-port":7199,
					"jmx-remote-ssl":true,
					"jmx-remote-ssl-opts":"-Dopt=value",
					"log_gc":true,
					"max_gc_pause_millis":1000,
					"max_heap_size":4294967296,
					"max_tenuring_threshold":90,
					"number_of_gc_log_files":10,
					"parallel_gc_threads":8,
					"per_thread_stack_size":1073741824,
					"perf_disable_shared_mem":true,
					"print_flss_statistics":true,
					"print_gc_application_stopped_time":true,
					"print_gc_date_stamps":true,
					"print_gc_details":true,
					"print_heap_at_gc":true,
					"print_promotion_failure":true,
					"print_tenuring_distribution":true,
					"resize_tlb":true,
					"string_table_size":1073741824,
					"survivor_ratio":75,
					"thread_priority_policy_42":true,
					"unlock_commercial_features":true,
					"use_biased_locking":true,
					"use_gc_log_file_rotation":true,
					"use_thread_priorities":true,
					"use_tlb":true
				},
				"cassandra-env-sh":{
					"additional-jvm-opts":[
						"-Dadditional.option.1=true",
						"-Dadditional.option.2=42"
					]
				}
		   }`,
		},
		{
			name: "[4.0.0] all options",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						AllocateTokensForKeyspace:               pointer.String("system_auth"),
						AllocateTokensForLocalReplicationFactor: pointer.Int(3),
						AuditLoggingOptions: &api.AuditLogOptions{
							Enabled: false,
						},
						AuthReadConsistencyLevel:         pointer.String("ONE"),
						AuthWriteConsistencyLevel:        pointer.String("ONE"),
						Authenticator:                    pointer.String("FakeAuthenticator"),
						Authorizer:                       pointer.String("FakeAuthorizer"),
						AutoHintsCleanupEnabled:          pointer.Bool(true),
						AutoOptimiseFullRepairStreams:    pointer.Bool(false),
						AutoOptimiseIncRepairStreams:     pointer.Bool(true),
						AutoOptimisePreviewRepairStreams: pointer.Bool(false),
						AutoSnapshot:                     pointer.Bool(true),
						AutocompactionOnStartupEnabled:   pointer.Bool(false),
						AutomaticSstableUpgrade:          pointer.Bool(true),
						AvailableProcessors:              pointer.Int(17),
						BackPressureEnabled:              pointer.Bool(true),
						BackPressureStrategy: &api.ParameterizedClass{
							ClassName: "FakeBackPressureStrategy",
						},
						BatchSizeFailThresholdInKb:            pointer.Int(20),
						BatchSizeWarnThresholdInKb:            pointer.Int(21),
						BatchlogReplayThrottleInKb:            pointer.Int(22),
						BlockForPeersInRemoteDcs:              pointer.Bool(false),
						BlockForPeersTimeoutInSecs:            pointer.Int(24),
						BufferPoolUseHeapIfExhausted:          pointer.Bool(false),
						CasContentionTimeoutInMs:              pointer.Int(28),
						CdcEnabled:                            pointer.Bool(false),
						CdcFreeSpaceCheckIntervalMs:           pointer.Int(30),
						CdcRawDirectory:                       pointer.String("FakeCdcRawDirectory"),
						CdcTotalSpaceInMb:                     pointer.Int(32),
						CheckForDuplicateRowsDuringCompaction: pointer.Bool(false),
						CheckForDuplicateRowsDuringReads:      pointer.Bool(true),
						ClientErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						ColumnIndexCacheSizeInKb: pointer.Int(38),
						ColumnIndexSizeInKb:      pointer.Int(39),
						CommitlogCompression: &api.ParameterizedClass{
							ClassName: "FakeCommitlogCompression",
						},
						CommitlogMaxCompressionBuffersInPool:       pointer.Int(43),
						CommitlogPeriodicQueueSize:                 pointer.Int(44),
						CommitlogSegmentSizeInMb:                   pointer.Int(45),
						CommitlogSync:                              pointer.String("periodic"),
						CommitlogSyncPeriodInMs:                    pointer.Int(49),
						CommitlogTotalSpaceInMb:                    pointer.Int(50),
						CompactionLargePartitionWarningThresholdMb: pointer.Int(51),
						CompactionThroughputMbPerSec:               pointer.Int(52),
						CompactionTombstoneWarningThreshold:        pointer.Int(53),
						ConcurrentCompactors:                       pointer.Int(54),
						ConcurrentCounterWrites:                    pointer.Int(55),
						ConcurrentMaterializedViewBuilders:         pointer.Int(56),
						ConcurrentMaterializedViewWrites:           pointer.Int(57),
						ConcurrentReads:                            pointer.Int(58),
						ConcurrentReplicates:                       pointer.Int(59),
						ConcurrentValidations:                      pointer.Int(60),
						ConcurrentWrites:                           pointer.Int(61),
						ConsecutiveMessageErrorsThreshold:          pointer.Int(62),
						CorruptedTombstoneStrategy:                 pointer.String("disabled"),
						CounterCacheKeysToSave:                     pointer.Int(64),
						CounterCacheSavePeriod:                     pointer.Int(65),
						CounterCacheSizeInMb:                       pointer.Int(66),
						CounterWriteRequestTimeoutInMs:             pointer.Int(67),
						CredentialsCacheMaxEntries:                 pointer.Int(68),
						CredentialsUpdateIntervalInMs:              pointer.Int(69),
						CredentialsValidityInMs:                    pointer.Int(70),
						CrossNodeTimeout:                           pointer.Bool(false),
						DefaultKeyspaceRf:                          pointer.Int(73),
						DenylistConsistencyLevel:                   pointer.String("ONE"),
						DenylistInitialLoadRetrySeconds:            pointer.Int(75),
						DenylistMaxKeysPerTable:                    pointer.Int(76),
						DenylistMaxKeysTotal:                       pointer.Int(77),
						DenylistRefreshSeconds:                     pointer.Int(78),
						DiagnosticEventsEnabled:                    pointer.Bool(false),
						DiskAccessMode:                             pointer.String("auto"),
						DiskOptimizationEstimatePercentile:         pointer.String("0.1"),
						DiskOptimizationPageCrossChance:            pointer.String("0.1"),
						DiskOptimizationStrategy:                   pointer.String("ssd"),
						DynamicSnitch:                              pointer.Bool(false),
						DynamicSnitchBadnessThreshold:              pointer.String("86.1"),
						DynamicSnitchResetIntervalInMs:             pointer.Int(87),
						DynamicSnitchUpdateIntervalInMs:            pointer.Int(88),
						EnableDenylistRangeReads:                   pointer.Bool(false),
						EnableDenylistReads:                        pointer.Bool(true),
						EnableDenylistWrites:                       pointer.Bool(false),
						EnableDropCompactStorage:                   pointer.Bool(true),
						EnableMaterializedViews:                    pointer.Bool(false),
						EnablePartitionDenylist:                    pointer.Bool(true),
						EnableSasiIndexes:                          pointer.Bool(false),
						EnableScriptedUserDefinedFunctions:         pointer.Bool(true),
						EnableTransientReplication:                 pointer.Bool(false),
						EnableUserDefinedFunctions:                 pointer.Bool(true),
						EnableUserDefinedFunctionsThreads:          pointer.Bool(false),
						EndpointSnitch:                             pointer.String("FakeEndpointSnitch"),
						FailureDetector:                            pointer.String("FakeFailureDetector"),
						FileCacheEnabled:                           pointer.Bool(true),
						FileCacheRoundUp:                           pointer.Bool(false),
						FileCacheSizeInMb:                          pointer.Int(104),
						FlushCompression:                           pointer.String("none"),
						FullQueryLoggingOptions: &api.FullQueryLoggerOptions{
							LogDir: pointer.String("/tmp"),
							Block:  pointer.Bool(false),
						},
						GcLogThresholdInMs:               pointer.Int(107),
						GcWarnThresholdInMs:              pointer.Int(108),
						HintWindowPersistentEnabled:      pointer.Bool(false),
						HintedHandoffDisabledDatacenters: &[]string{"dc1"},
						HintedHandoffEnabled:             pointer.Bool(false),
						HintedHandoffThrottleInKb:        pointer.Int(112),
						HintsCompression: &api.ParameterizedClass{
							ClassName: "FakeHintsCompression",
						},
						HintsFlushPeriodInMs:                                           pointer.Int(115),
						IdealConsistencyLevel:                                          pointer.String("ONE"),
						IndexInterval:                                                  pointer.Int(118),
						IndexSummaryCapacityInMb:                                       pointer.Int(119),
						IndexSummaryResizeIntervalInMinutes:                            pointer.Int(120),
						InitialRangeTombstoneListAllocationSize:                        pointer.Int(121),
						InterDcStreamThroughputOutboundMegabitsPerSec:                  pointer.Int(123),
						InterDcTcpNodelay:                                              pointer.Bool(true),
						InternodeApplicationReceiveQueueCapacityInBytes:                pointer.Int(125),
						InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes: pointer.Int(126),
						InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes:   pointer.Int(127),
						InternodeApplicationSendQueueCapacityInBytes:                   pointer.Int(128),
						InternodeApplicationSendQueueReserveEndpointCapacityInBytes:    pointer.Int(129),
						InternodeApplicationSendQueueReserveGlobalCapacityInBytes:      pointer.Int(130),
						InternodeAuthenticator:                                         pointer.String("FakeInternodeAuthenticator"),
						InternodeCompression:                                           pointer.String("all"),
						InternodeErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						InternodeMaxMessageSizeInBytes:                   pointer.Int(134),
						InternodeRecvBuffSizeInBytes:                     pointer.Int(135),
						InternodeSendBuffSizeInBytes:                     pointer.Int(136),
						InternodeSocketReceiveBufferSizeInBytes:          pointer.Int(137),
						InternodeSocketSendBufferSizeInBytes:             pointer.Int(138),
						InternodeStreamingTcpUserTimeoutInMs:             pointer.Int(139),
						InternodeTcpConnectTimeoutInMs:                   pointer.Int(140),
						InternodeTcpUserTimeoutInMs:                      pointer.Int(141),
						KeyCacheKeysToSave:                               pointer.Int(142),
						KeyCacheMigrateDuringCompaction:                  pointer.Bool(false),
						KeyCacheSavePeriod:                               pointer.Int(144),
						KeyCacheSizeInMb:                                 pointer.Int(145),
						KeyspaceCountWarnThreshold:                       pointer.Int(146),
						MaxConcurrentAutomaticSstableUpgrades:            pointer.Int(152),
						MaxHintWindowInMs:                                pointer.Int(153),
						MaxHintsDeliveryThreads:                          pointer.Int(154),
						MaxHintsFileSizeInMb:                             pointer.Int(155),
						MaxMutationSizeInKb:                              pointer.Int(156),
						MaxStreamingRetries:                              pointer.Int(157),
						MaxValueSizeInMb:                                 pointer.Int(158),
						MemtableAllocationType:                           pointer.String("heap_buffers"),
						MemtableCleanupThreshold:                         pointer.String("0.1"),
						MemtableFlushWriters:                             pointer.Int(1),
						MemtableHeapSpaceInMb:                            pointer.Int(162),
						MemtableOffheapSpaceInMb:                         pointer.Int(163),
						MinFreeSpacePerDriveInMb:                         pointer.Int(164),
						MinimumKeyspaceRf:                                pointer.Int(1),
						NativeTransportAllowOlderProtocols:               pointer.Bool(true),
						NativeTransportFlushInBatchesLegacy:              pointer.Bool(false),
						NativeTransportIdleTimeoutInMs:                   pointer.Int(168),
						NativeTransportMaxConcurrentConnections:          pointer.Int(169),
						NativeTransportMaxConcurrentConnectionsPerIp:     pointer.Int(170),
						NativeTransportMaxConcurrentRequestsInBytes:      pointer.Int(171),
						NativeTransportMaxConcurrentRequestsInBytesPerIp: pointer.Int(172),
						NativeTransportMaxFrameSizeInMb:                  pointer.Int(173),
						NativeTransportMaxNegotiableProtocolVersion:      pointer.Int(4),
						NativeTransportMaxRequestsPerSecond:              pointer.Int(175),
						NativeTransportMaxThreads:                        pointer.Int(176),
						NativeTransportRateLimitingEnabled:               pointer.Bool(false),
						NativeTransportReceiveQueueCapacityInBytes:       pointer.Int(180),
						NetworkAuthorizer:                                pointer.String("FakeNetworkAuthorizer"),
						NetworkingCacheSizeInMb:                          pointer.Int(182),
						NumTokens:                                        pointer.Int(183),
						OtcBacklogExpirationIntervalMs:                   pointer.Int(184),
						OtcCoalescingEnoughCoalescedMessages:             pointer.Int(10),
						OtcCoalescingStrategy:                            pointer.String("FakeOtcCoalescingStrategy"),
						OtcCoalescingWindowUs:                            pointer.Int(187),
						PaxosCacheSizeInMb:                               pointer.Int(189),
						PeriodicCommitlogSyncLagBlockInMs:                pointer.Int(190),
						PermissionsCacheMaxEntries:                       pointer.Int(191),
						PermissionsUpdateIntervalInMs:                    pointer.Int(192),
						PermissionsValidityInMs:                          pointer.Int(193),
						PhiConvictThreshold:                              pointer.String("8.1"),
						PreparedStatementsCacheSizeMb:                    pointer.Int(195),
						RangeRequestTimeoutInMs:                          pointer.Int(196),
						RangeTombstoneListGrowthFactor:                   pointer.String("197.1"),
						ReadRequestTimeoutInMs:                           pointer.Int(198),
						RejectRepairCompactionThreshold:                  pointer.Int(199),
						RepairCommandPoolFullStrategy:                    pointer.String("queue"),
						RepairCommandPoolSize:                            pointer.Int(201),
						RepairSessionMaxTreeDepth:                        pointer.Int(202),
						RepairSessionSpaceInMb:                           pointer.Int(203),
						RepairedDataTrackingForPartitionReadsEnabled:     pointer.Bool(true),
						RepairedDataTrackingForRangeReadsEnabled:         pointer.Bool(false),
						ReplicaFilteringProtection: &api.ReplicaFilteringProtectionOptions{
							CachedRowsWarnThreshold: pointer.Int(100),
							CachedRowsFailThreshold: pointer.Int(200),
						},
						ReportUnconfirmedRepairedDataMismatches: pointer.Bool(false),
						RequestScheduler:                        pointer.String("FakeRequestScheduler"),
						RequestSchedulerId:                      pointer.String("keyspace"),
						RequestSchedulerOptions: &api.RequestSchedulerOptions{
							ThrottleLimit: pointer.Int(100),
							DefaultWeight: pointer.Int(200),
						},
						RequestTimeoutInMs:                     pointer.Int(211),
						RoleManager:                            pointer.String("FakeRoleManager"),
						RolesCacheMaxEntries:                   pointer.Int(213),
						RolesUpdateIntervalInMs:                pointer.Int(214),
						RolesValidityInMs:                      pointer.Int(215),
						RowCacheClassName:                      pointer.String("FakeRowCacheClassName"),
						RowCacheKeysToSave:                     pointer.Int(217),
						RowCacheSavePeriod:                     pointer.Int(218),
						RowCacheSizeInMb:                       pointer.Int(219),
						SlowQueryLogTimeoutInMs:                pointer.Int(234),
						SnapshotBeforeCompaction:               pointer.Bool(false),
						SnapshotLinksPerSecond:                 pointer.Int(236),
						SnapshotOnDuplicateRowDetection:        pointer.Bool(false),
						SnapshotOnRepairedDataMismatch:         pointer.Bool(true),
						SstablePreemptiveOpenIntervalInMb:      pointer.Int(240),
						StreamEntireSstables:                   pointer.Bool(true),
						StreamThroughputOutboundMegabitsPerSec: pointer.Int(245),
						StreamingConnectionsPerHost:            pointer.Int(246),
						StreamingKeepAlivePeriodInSecs:         pointer.Int(247),
						StreamingSocketTimeoutInMs:             pointer.Int(248),
						TableCountWarnThreshold:                pointer.Int(249),
						ThriftFramedTransportSizeInMb:          pointer.Int(250),
						ThriftMaxMessageLengthInMb:             pointer.Int(251),
						ThriftPreparedStatementsCacheSizeMb:    pointer.Int(252),
						TombstoneFailureThreshold:              pointer.Int(253),
						TombstoneWarnThreshold:                 pointer.Int(254),
						TracetypeQueryTtl:                      pointer.Int(255),
						TracetypeRepairTtl:                     pointer.Int(256),
						TrackWarnings: &api.TrackWarnings{
							Enabled: false,
						},
						TraverseAuthFromRoot:                       pointer.Bool(false),
						TrickleFsync:                               pointer.Bool(true),
						TrickleFsyncIntervalInKb:                   pointer.Int(261),
						TruncateRequestTimeoutInMs:                 pointer.Int(262),
						UnloggedBatchAcrossPartitionsWarnThreshold: pointer.Int(263),
						UseDeterministicTableId:                    pointer.Bool(true),
						UseOffheapMerkleTrees:                      pointer.Bool(false),
						UserDefinedFunctionFailTimeout:             pointer.Int(20),
						UserDefinedFunctionWarnTimeout:             pointer.Int(10),
						UserFunctionTimeoutPolicy:                  pointer.String("ignore"),
						ValidationPreviewPurgeHeadStartInSec:       pointer.Int(269),
						WindowsTimerInterval:                       pointer.Int(270),
						WriteRequestTimeoutInMs:                    pointer.Int(271),
					},
					JvmOptions: api.JvmOptions{
						AlwaysPreTouch:                       pointer.Bool(true),
						AvailableProcessors:                  pointer.Int(123),
						CmsHeapSizeYoungGeneration:           parseQuantity("128Mi"),
						CmsInitiatingOccupancyFraction:       pointer.Int(80),
						CmsMaxTenuringThreshold:              pointer.Int(90),
						CmsSurvivorRatio:                     pointer.Int(75),
						CmsWaitDurationMs:                    pointer.Int(40),
						CrashOnOutOfMemoryError:              pointer.Bool(true),
						DebugNonSafepoints:                   pointer.Bool(true),
						DisableAuthCachesRemoteConfiguration: pointer.Bool(true),
						DisableBiasedLocking:                 pointer.Bool(true),
						DisableContendedAnnotations:          pointer.Bool(true),
						DisablePerfSharedMem:                 pointer.Bool(true),
						EnableAssertions:                     pointer.Bool(true),
						EnableFlightRecorder:                 pointer.Bool(true),
						EnableNonRootThreadPriority:          pointer.Bool(true),
						EnableThreadPriorities:               pointer.Bool(true),
						ExitOnOutOfMemoryError:               pointer.Bool(true),
						ExpirationDateOverflowPolicy:         pointer.String("REJECT"),
						Force30ProtocolVersion:               pointer.Bool(true),
						ForceDefaultIndexingPageSize:         pointer.Bool(true),
						G1ConcGcThreads:                      pointer.Int(4),
						G1InitiatingHeapOccupancyPercent:     pointer.Int(85),
						G1MaxGcPauseMs:                       pointer.Int(1000),
						G1ParallelGcThreads:                  pointer.Int(8),
						G1RSetUpdatingPauseTimePercent:       pointer.Int(60),
						GarbageCollector:                     "G1GC",
						GuaranteedSafepointIntervalMs:        pointer.Int(1000),
						HeapDumpOnOutOfMemoryError:           pointer.Bool(true),
						InitialHeapSize:                      parseQuantity("1Gi"),
						JdkAllowAttachSelf:                   pointer.Bool(true),
						JmxConnectionType:                    pointer.String("local-no-auth"),
						JmxPort:                              pointer.Int(7199),
						JmxRemoteSsl:                         pointer.Bool(true),
						JmxRemoteSslOpts:                     pointer.String("-Dopt=value"),
						JmxRemoteSslRequireClientAuth:        pointer.Bool(true),
						ListenForRemoteDebuggers:             pointer.Bool(true),
						LogCompilation:                       pointer.Bool(true),
						LogFileSize:                          parseQuantity("1Gi"),
						MaxHeapSize:                          parseQuantity("4Gi"),
						MaxHintTtlSeconds:                    pointer.Int(1000),
						MetricsReporterConfigFile:            pointer.String("/mnt/dir"),
						NettyEventloopMaxPendingTasks:        pointer.Int(123),
						NettyTryReflectionSetAccessible:      pointer.Bool(true),
						NioAlignDirectMemory:                 pointer.Bool(true),
						NioMaxCachedBufferSize:               parseQuantity("1Mi"),
						NumberOfLogFiles:                     pointer.Int(10),
						PerThreadStackSize:                   parseQuantity("1Gi"),
						PreferIpv4:                           pointer.Bool(true),
						PreserveFramePointer:                 pointer.Bool(true),
						PrintApplicationStoppedTime:          pointer.Bool(true),
						PrintDateStamps:                      pointer.Bool(true),
						PrintDetails:                         pointer.Bool(true),
						PrintFlssStatistics:                  pointer.Bool(true),
						PrintHeap:                            pointer.Bool(true),
						PrintHeapHistogramOnOutOfMemoryError: pointer.Bool(true),
						PrintPromotionFailure:                pointer.Bool(true),
						PrintTenuringDistribution:            pointer.Bool(true),
						ResizeTlab:                           pointer.Bool(true),
						RingDelayMs:                          pointer.Int(456),
						StringTableSize:                      parseQuantity("1Gi"),
						TriggersDirectory:                    pointer.String("/mnt/dir"),
						UnlockCommercialFeatures:             pointer.Bool(true),
						UnlockDiagnosticVmOptions:            pointer.Bool(true),
						UseLogFile:                           pointer.Bool(true),
						UseLogFileRotation:                   pointer.Bool(true),
						UseNuma:                              pointer.Bool(true),
						UseTlab:                              pointer.Bool(true),
						WriteSurvey:                          pointer.Bool(true),
						AdditionalOptions:                    []string{"-Dadditional.option.1=true", "-Dadditional.option.2=42"},
					},
				},
			},
			want: `{
				"cassandra-yaml": {
					"allocate_tokens_for_keyspace": "system_auth",
					"allocate_tokens_for_local_replication_factor": 3,
					"audit_logging_options": {"enabled": false},
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"auto_optimise_full_repair_streams": false,
					"auto_optimise_inc_repair_streams": true,
					"auto_optimise_preview_repair_streams": false,
					"auto_snapshot": true,
					"autocompaction_on_startup_enabled": false,
					"automatic_sstable_upgrade": true,
					"back_pressure_enabled": true,
					"back_pressure_strategy": {"class_name": "FakeBackPressureStrategy"},
					"batch_size_fail_threshold_in_kb": 20,
					"batch_size_warn_threshold_in_kb": 21,
					"batchlog_replay_throttle_in_kb": 22,
					"block_for_peers_in_remote_dcs": false,
					"block_for_peers_timeout_in_secs": 24,
					"buffer_pool_use_heap_if_exhausted": false,
					"cas_contention_timeout_in_ms": 28,
					"cdc_enabled": false,
					"cdc_free_space_check_interval_ms": 30,
					"cdc_raw_directory": "FakeCdcRawDirectory",
					"cdc_total_space_in_mb": 32,
					"check_for_duplicate_rows_during_compaction": false,
					"check_for_duplicate_rows_during_reads": true,
					"column_index_cache_size_in_kb": 38,
					"column_index_size_in_kb": 39,
					"commitlog_compression": {"class_name": "FakeCommitlogCompression"},
					"commitlog_max_compression_buffers_in_pool": 43,
					"commitlog_periodic_queue_size": 44,
					"commitlog_segment_size_in_mb": 45,
					"commitlog_sync": "periodic",
					"commitlog_sync_period_in_ms": 49,
					"commitlog_total_space_in_mb": 50,
					"compaction_large_partition_warning_threshold_mb": 51,
					"compaction_throughput_mb_per_sec": 52,
					"concurrent_compactors": 54,
					"concurrent_counter_writes": 55,
					"concurrent_materialized_view_builders": 56,
					"concurrent_materialized_view_writes": 57,
					"concurrent_reads": 58,
					"concurrent_replicates": 59,
					"concurrent_validations": 60,
					"concurrent_writes": 61,
					"consecutive_message_errors_threshold": 62,
					"corrupted_tombstone_strategy": "disabled",
					"counter_cache_keys_to_save": 64,
					"counter_cache_save_period": 65,
					"counter_cache_size_in_mb": 66,
					"counter_write_request_timeout_in_ms": 67,
					"credentials_cache_max_entries": 68,
					"credentials_update_interval_in_ms": 69,
					"credentials_validity_in_ms": 70,
					"cross_node_timeout": false,
					"diagnostic_events_enabled": false,
					"disk_access_mode": "auto",
					"disk_optimization_estimate_percentile": "0.1",
					"disk_optimization_page_cross_chance": "0.1",
					"disk_optimization_strategy": "ssd",
					"dynamic_snitch": false,
					"dynamic_snitch_badness_threshold": "86.1",
					"dynamic_snitch_reset_interval_in_ms": 87,
					"dynamic_snitch_update_interval_in_ms": 88,
					"enable_drop_compact_storage": true,
					"enable_materialized_views": false,
					"enable_sasi_indexes": false,
					"enable_scripted_user_defined_functions": true,
					"enable_transient_replication": false,
					"enable_user_defined_functions": true,
					"enable_user_defined_functions_threads": false,
					"endpoint_snitch": "FakeEndpointSnitch",
					"file_cache_enabled": true,
					"file_cache_round_up": false,
					"file_cache_size_in_mb": 104,
					"flush_compression": "none",
					"full_query_logging_options": {"log_dir": "/tmp", "block": false},
					"gc_log_threshold_in_ms": 107,
					"gc_warn_threshold_in_ms": 108,
					"hinted_handoff_disabled_datacenters": ["dc1"],
					"hinted_handoff_enabled": false,
					"hinted_handoff_throttle_in_kb": 112,
					"hints_compression": {"class_name": "FakeHintsCompression"},
					"hints_flush_period_in_ms": 115,
					"ideal_consistency_level": "ONE",
					"index_summary_capacity_in_mb": 119,
					"index_summary_resize_interval_in_minutes": 120,
					"initial_range_tombstone_list_allocation_size": 121,
					"inter_dc_stream_throughput_outbound_megabits_per_sec": 123,
					"inter_dc_tcp_nodelay": true,
					"internode_application_receive_queue_capacity_in_bytes": 125,
					"internode_application_receive_queue_reserve_endpoint_capacity_in_bytes": 126,
					"internode_application_receive_queue_reserve_global_capacity_in_bytes": 127,
					"internode_application_send_queue_capacity_in_bytes": 128,
					"internode_application_send_queue_reserve_endpoint_capacity_in_bytes": 129,
					"internode_application_send_queue_reserve_global_capacity_in_bytes": 130,
					"internode_authenticator": "FakeInternodeAuthenticator",
					"internode_compression": "all",
					"internode_max_message_size_in_bytes": 134,
					"internode_socket_receive_buffer_size_in_bytes": 137,
					"internode_socket_send_buffer_size_in_bytes": 138,
					"internode_streaming_tcp_user_timeout_in_ms": 139,
					"internode_tcp_connect_timeout_in_ms": 140,
					"internode_tcp_user_timeout_in_ms": 141,
					"key_cache_keys_to_save": 142,
					"key_cache_migrate_during_compaction": false,
					"key_cache_save_period": 144,
					"key_cache_size_in_mb": 145,
					"keyspace_count_warn_threshold": 146,
					"max_concurrent_automatic_sstable_upgrades": 152,
					"max_hint_window_in_ms": 153,
					"max_hints_delivery_threads": 154,
					"max_hints_file_size_in_mb": 155,
					"max_mutation_size_in_kb": 156,
					"max_streaming_retries": 157,
					"max_value_size_in_mb": 158,
					"memtable_allocation_type": "heap_buffers",
					"memtable_cleanup_threshold": "0.1",
					"memtable_flush_writers": 1,
					"memtable_heap_space_in_mb": 162,
					"memtable_offheap_space_in_mb": 163,
					"min_free_space_per_drive_in_mb": 164,
					"native_transport_allow_older_protocols": true,
					"native_transport_flush_in_batches_legacy": false,
					"native_transport_idle_timeout_in_ms": 168,
					"native_transport_max_concurrent_connections": 169,
					"native_transport_max_concurrent_connections_per_ip": 170,
					"native_transport_max_concurrent_requests_in_bytes": 171,
					"native_transport_max_concurrent_requests_in_bytes_per_ip": 172,
					"native_transport_max_frame_size_in_mb": 173,
					"native_transport_max_negotiable_protocol_version": 4,
					"native_transport_max_threads": 176,
					"native_transport_receive_queue_capacity_in_bytes": 180,
					"network_authorizer": "FakeNetworkAuthorizer",
					"networking_cache_size_in_mb": 182,
					"num_tokens": 183,
					"otc_coalescing_enough_coalesced_messages": 10,
					"otc_coalescing_strategy": "FakeOtcCoalescingStrategy",
					"otc_coalescing_window_us": 187,
					"periodic_commitlog_sync_lag_block_in_ms": 190,
					"permissions_cache_max_entries": 191,
					"permissions_update_interval_in_ms": 192,
					"permissions_validity_in_ms": 193,
					"phi_convict_threshold": "8.1",
					"prepared_statements_cache_size_mb": 195,
					"range_request_timeout_in_ms": 196,
					"range_tombstone_list_growth_factor": "197.1",
					"read_request_timeout_in_ms": 198,
					"reject_repair_compaction_threshold": 199,
					"repair_command_pool_full_strategy": "queue",
					"repair_command_pool_size": 201,
					"repair_session_max_tree_depth": 202,
					"repair_session_space_in_mb": 203,
					"repaired_data_tracking_for_partition_reads_enabled": true,
					"repaired_data_tracking_for_range_reads_enabled": false,
					"replica_filtering_protection": {"cached_rows_warn_threshold": 100, "cached_rows_fail_threshold": 200},
					"report_unconfirmed_repaired_data_mismatches": false,
					"request_timeout_in_ms": 211,
					"role_manager": "FakeRoleManager",
					"roles_cache_max_entries": 213,
					"roles_update_interval_in_ms": 214,
					"roles_validity_in_ms": 215,
					"row_cache_class_name": "FakeRowCacheClassName",
					"row_cache_keys_to_save": 217,
					"row_cache_save_period": 218,
					"row_cache_size_in_mb": 219,
					"slow_query_log_timeout_in_ms": 234,
					"snapshot_before_compaction": false,
					"snapshot_links_per_second": 236,
					"snapshot_on_duplicate_row_detection": false,
					"snapshot_on_repaired_data_mismatch": true,
					"sstable_preemptive_open_interval_in_mb": 240,
					"stream_entire_sstables": true,
					"stream_throughput_outbound_megabits_per_sec": 245,
					"streaming_connections_per_host": 246,
					"streaming_keep_alive_period_in_secs": 247,
					"table_count_warn_threshold": 249,
					"tombstone_failure_threshold": 253,
					"tombstone_warn_threshold": 254,
					"tracetype_query_ttl": 255,
					"tracetype_repair_ttl": 256,
					"trickle_fsync": true,
					"trickle_fsync_interval_in_kb": 261,
					"truncate_request_timeout_in_ms": 262,
					"unlogged_batch_across_partitions_warn_threshold": 263,
					"use_offheap_merkle_trees": false,
					"user_defined_function_fail_timeout": 20,
					"user_defined_function_warn_timeout": 10,
					"user_function_timeout_policy": "ignore",
					"validation_preview_purge_head_start_in_sec": 269,
					"windows_timer_interval": 270,
					"write_request_timeout_in_ms": 271
				},
				"jvm-server-options":{
					"agent_lib_jdwp":true,
					"always_pre_touch":true,
					"cassandra_available_processors":123,
					"cassandra_disable_auth_caches_remote_configuration":true,
					"cassandra_expiration_date_overflow_policy":"REJECT",
					"cassandra_force_default_indexing_page_size":true,
					"cassandra_max_hint_ttl":1000,
					"cassandra_metrics_reporter_config_file":"/mnt/dir",
					"cassandra_ring_delay_ms":456,
					"cassandra_triggers_dir":"/mnt/dir",
					"cassandra_write_survey":true,
					"crash_on_out_of_memory_error":true,
					"debug-non-safepoints":true,
					"enable_assertions":true,
					"exit_on_out_of_memory_error":true,
					"flight_recorder":true,
					"guaranteed-safepoint-interval":1000,
					"heap_dump_on_out_of_memory_error":true,
					"initial_heap_size":1073741824,
					"io_netty_eventloop_maxpendingtasks":123,
					"java_net_prefer_ipv4_stack":true,
					"jdk_nio_maxcachedbuffersize":1048576,
					"jmx-connection-type":"local-no-auth",
					"jmx-port":7199,
					"jmx-remote-ssl":true,
					"jmx-remote-ssl-opts":"-Dopt=value",
					"jmx-remote-ssl-require-client-auth":true,
					"log_compilation":true,
					"max_heap_size":4294967296,
					"page-align-direct-memory":true,
					"per_thread_stack_size":1073741824,
					"perf_disable_shared_mem":true,
					"preserve-frame-pointer":true,
					"print_heap_histogram_on_out_of_memory_error":true,
					"resize_tlb":true,
					"restrict-contended":true,
					"string_table_size":1073741824,
					"unlock-diagnostic-vm-options":true,
					"unlock_commercial_features":true,
					"use-biased-locking":true,
					"use_numa":true,
					"use_thread_priorities":true,
					"use_tlb":true
				},
				"jvm11-server-options":{
					"conc_gc_threads":4,
					"garbage_collector":"G1GC",
                    "g1r_set_updating_pause_time_percent":60,
					"initiating_heap_occupancy_percent":85,
					"io_netty_try_reflection_set_accessible":true,
					"jdk_attach_allow_attach_self":true,
					"max_gc_pause_millis":1000,
					"parallel_gc_threads":8
				},
				"cassandra-env-sh":{
					"additional-jvm-opts":[
						"-Dadditional.option.1=true",
						"-Dadditional.option.2=42"
					]
				}
		   }`,
		},
		{
			name: "[DSE 6.8.0] all options",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("6.8.25"),
				ServerType:    "dse",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						AllocateTokensForKeyspace:               pointer.String("system_auth"),
						AllocateTokensForLocalReplicationFactor: pointer.Int(3),
						AuditLoggingOptions: &api.AuditLogOptions{
							Enabled: false,
						},
						AuthReadConsistencyLevel:         pointer.String("ONE"),
						AuthWriteConsistencyLevel:        pointer.String("ONE"),
						Authenticator:                    pointer.String("FakeAuthenticator"),
						Authorizer:                       pointer.String("FakeAuthorizer"),
						AutoHintsCleanupEnabled:          pointer.Bool(true),
						AutoOptimiseFullRepairStreams:    pointer.Bool(false),
						AutoOptimiseIncRepairStreams:     pointer.Bool(true),
						AutoOptimisePreviewRepairStreams: pointer.Bool(false),
						AutoSnapshot:                     pointer.Bool(true),
						AutocompactionOnStartupEnabled:   pointer.Bool(false),
						AutomaticSstableUpgrade:          pointer.Bool(true),
						AvailableProcessors:              pointer.Int(17),
						BackPressureEnabled:              pointer.Bool(true),
						BackPressureStrategy: &api.ParameterizedClass{
							ClassName: "FakeBackPressureStrategy",
						},
						BatchSizeFailThresholdInKb:            pointer.Int(20),
						BatchSizeWarnThresholdInKb:            pointer.Int(21),
						BatchlogReplayThrottleInKb:            pointer.Int(22),
						BlockForPeersInRemoteDcs:              pointer.Bool(false),
						BlockForPeersTimeoutInSecs:            pointer.Int(24),
						BufferPoolUseHeapIfExhausted:          pointer.Bool(false),
						CasContentionTimeoutInMs:              pointer.Int(28),
						CdcEnabled:                            pointer.Bool(false),
						CdcFreeSpaceCheckIntervalMs:           pointer.Int(30),
						CdcRawDirectory:                       pointer.String("FakeCdcRawDirectory"),
						CdcTotalSpaceInMb:                     pointer.Int(32),
						CheckForDuplicateRowsDuringCompaction: pointer.Bool(false),
						CheckForDuplicateRowsDuringReads:      pointer.Bool(true),
						ClientEncryptionOptions: &encryption.ClientEncryptionOptions{
							EncryptionSettings: encryption.EncryptionSettings{
								Protocol:          "protocol1",
								AcceptedProtocols: []string{"protocol2", "protocol3"},
								Algorithm:         "algorithm1",
								StoreType:         "storeType1",
								CipherSuites:      []string{"cipherSuite1", "cipherSuite2"},
								RequireClientAuth: true,
							},
							Enabled:  true,
							Optional: true,
						},
						ClientErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						ColumnIndexCacheSizeInKb: pointer.Int(38),
						ColumnIndexSizeInKb:      pointer.Int(39),
						CommitlogCompression: &api.ParameterizedClass{
							ClassName: "FakeCommitlogCompression",
						},
						CommitlogMaxCompressionBuffersInPool:       pointer.Int(43),
						CommitlogPeriodicQueueSize:                 pointer.Int(44),
						CommitlogSegmentSizeInMb:                   pointer.Int(45),
						CommitlogSync:                              pointer.String("periodic"),
						CommitlogSyncBatchWindowInMs:               pointer.String("123"),
						CommitlogSyncGroupWindowInMs:               pointer.Int(1000_1),
						CommitlogSyncPeriodInMs:                    pointer.Int(49),
						CommitlogTotalSpaceInMb:                    pointer.Int(50),
						CompactionLargePartitionWarningThresholdMb: pointer.Int(51),
						CompactionThroughputMbPerSec:               pointer.Int(52),
						CompactionTombstoneWarningThreshold:        pointer.Int(53),
						ConcurrentCompactors:                       pointer.Int(54),
						ConcurrentCounterWrites:                    pointer.Int(55),
						ConcurrentMaterializedViewBuilders:         pointer.Int(56),
						ConcurrentMaterializedViewWrites:           pointer.Int(57),
						ConcurrentReads:                            pointer.Int(58),
						ConcurrentReplicates:                       pointer.Int(59),
						ConcurrentValidations:                      pointer.Int(60),
						ConcurrentWrites:                           pointer.Int(61),
						ConsecutiveMessageErrorsThreshold:          pointer.Int(62),
						CorruptedTombstoneStrategy:                 pointer.String("disabled"),
						CounterCacheKeysToSave:                     pointer.Int(64),
						CounterCacheSavePeriod:                     pointer.Int(65),
						CounterCacheSizeInMb:                       pointer.Int(66),
						CounterWriteRequestTimeoutInMs:             pointer.Int(67),
						CredentialsCacheMaxEntries:                 pointer.Int(68),
						CredentialsUpdateIntervalInMs:              pointer.Int(69),
						CredentialsValidityInMs:                    pointer.Int(70),
						CrossNodeTimeout:                           pointer.Bool(false),
						DefaultKeyspaceRf:                          pointer.Int(73),
						DenylistConsistencyLevel:                   pointer.String("ONE"),
						DenylistInitialLoadRetrySeconds:            pointer.Int(75),
						DenylistMaxKeysPerTable:                    pointer.Int(76),
						DenylistMaxKeysTotal:                       pointer.Int(77),
						DenylistRefreshSeconds:                     pointer.Int(78),
						DiagnosticEventsEnabled:                    pointer.Bool(false),
						DiskAccessMode:                             pointer.String("auto"),
						DiskOptimizationEstimatePercentile:         pointer.String("0.1"),
						DiskOptimizationPageCrossChance:            pointer.String("0.1"),
						DiskOptimizationStrategy:                   pointer.String("ssd"),
						DynamicSnitch:                              pointer.Bool(false),
						DynamicSnitchBadnessThreshold:              pointer.String("86.1"),
						DynamicSnitchResetIntervalInMs:             pointer.Int(87),
						DynamicSnitchUpdateIntervalInMs:            pointer.Int(88),
						EnableDenylistRangeReads:                   pointer.Bool(false),
						EnableDenylistReads:                        pointer.Bool(true),
						EnableDenylistWrites:                       pointer.Bool(false),
						EnableDropCompactStorage:                   pointer.Bool(true),
						EnableMaterializedViews:                    pointer.Bool(false),
						EnablePartitionDenylist:                    pointer.Bool(true),
						EnableSasiIndexes:                          pointer.Bool(false),
						EnableScriptedUserDefinedFunctions:         pointer.Bool(true),
						EnableTransientReplication:                 pointer.Bool(false),
						EnableUserDefinedFunctions:                 pointer.Bool(true),
						EnableUserDefinedFunctionsThreads:          pointer.Bool(false),
						EndpointSnitch:                             pointer.String("FakeEndpointSnitch"),
						FailureDetector:                            pointer.String("FakeFailureDetector"),
						FileCacheEnabled:                           pointer.Bool(true),
						FileCacheRoundUp:                           pointer.Bool(false),
						FileCacheSizeInMb:                          pointer.Int(104),
						FlushCompression:                           pointer.String("none"),
						FullQueryLoggingOptions: &api.FullQueryLoggerOptions{
							LogDir: pointer.String("/tmp"),
							Block:  pointer.Bool(false),
						},
						GcLogThresholdInMs:               pointer.Int(107),
						GcWarnThresholdInMs:              pointer.Int(108),
						HintWindowPersistentEnabled:      pointer.Bool(false),
						HintedHandoffDisabledDatacenters: &[]string{"dc1"},
						HintedHandoffEnabled:             pointer.Bool(false),
						HintedHandoffThrottleInKb:        pointer.Int(112),
						HintsCompression: &api.ParameterizedClass{
							ClassName: "FakeHintsCompression",
						},
						HintsFlushPeriodInMs:                                           pointer.Int(115),
						IdealConsistencyLevel:                                          pointer.String("ONE"),
						IndexInterval:                                                  pointer.Int(118),
						IndexSummaryCapacityInMb:                                       pointer.Int(119),
						IndexSummaryResizeIntervalInMinutes:                            pointer.Int(120),
						InitialRangeTombstoneListAllocationSize:                        pointer.Int(121),
						InterDcStreamThroughputOutboundMegabitsPerSec:                  pointer.Int(123),
						InterDcTcpNodelay:                                              pointer.Bool(true),
						InternodeApplicationReceiveQueueCapacityInBytes:                pointer.Int(125),
						InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes: pointer.Int(126),
						InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes:   pointer.Int(127),
						InternodeApplicationSendQueueCapacityInBytes:                   pointer.Int(128),
						InternodeApplicationSendQueueReserveEndpointCapacityInBytes:    pointer.Int(129),
						InternodeApplicationSendQueueReserveGlobalCapacityInBytes:      pointer.Int(130),
						InternodeAuthenticator:                                         pointer.String("FakeInternodeAuthenticator"),
						InternodeCompression:                                           pointer.String("all"),
						InternodeErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						InternodeMaxMessageSizeInBytes:                   pointer.Int(134),
						InternodeRecvBuffSizeInBytes:                     pointer.Int(135),
						InternodeSendBuffSizeInBytes:                     pointer.Int(136),
						InternodeSocketReceiveBufferSizeInBytes:          pointer.Int(137),
						InternodeSocketSendBufferSizeInBytes:             pointer.Int(138),
						InternodeStreamingTcpUserTimeoutInMs:             pointer.Int(139),
						InternodeTcpConnectTimeoutInMs:                   pointer.Int(140),
						InternodeTcpUserTimeoutInMs:                      pointer.Int(141),
						KeyCacheKeysToSave:                               pointer.Int(142),
						KeyCacheMigrateDuringCompaction:                  pointer.Bool(false),
						KeyCacheSavePeriod:                               pointer.Int(144),
						KeyCacheSizeInMb:                                 pointer.Int(145),
						KeyspaceCountWarnThreshold:                       pointer.Int(146),
						MaxConcurrentAutomaticSstableUpgrades:            pointer.Int(152),
						MaxHintWindowInMs:                                pointer.Int(153),
						MaxHintsDeliveryThreads:                          pointer.Int(154),
						MaxHintsFileSizeInMb:                             pointer.Int(155),
						MaxMutationSizeInKb:                              pointer.Int(156),
						MaxStreamingRetries:                              pointer.Int(157),
						MaxValueSizeInMb:                                 pointer.Int(158),
						MemtableAllocationType:                           pointer.String("heap_buffers"),
						MemtableCleanupThreshold:                         pointer.String("0.1"),
						MemtableFlushWriters:                             pointer.Int(1),
						MemtableHeapSpaceInMb:                            pointer.Int(162),
						MemtableOffheapSpaceInMb:                         pointer.Int(163),
						MinFreeSpacePerDriveInMb:                         pointer.Int(164),
						MinimumKeyspaceRf:                                pointer.Int(1),
						NativeTransportAllowOlderProtocols:               pointer.Bool(true),
						NativeTransportFlushInBatchesLegacy:              pointer.Bool(false),
						NativeTransportIdleTimeoutInMs:                   pointer.Int(168),
						NativeTransportMaxConcurrentConnections:          pointer.Int(169),
						NativeTransportMaxConcurrentConnectionsPerIp:     pointer.Int(170),
						NativeTransportMaxConcurrentRequestsInBytes:      pointer.Int(171),
						NativeTransportMaxConcurrentRequestsInBytesPerIp: pointer.Int(172),
						NativeTransportMaxFrameSizeInMb:                  pointer.Int(173),
						NativeTransportMaxNegotiableProtocolVersion:      pointer.Int(4),
						NativeTransportMaxRequestsPerSecond:              pointer.Int(175),
						NativeTransportMaxThreads:                        pointer.Int(176),
						NativeTransportRateLimitingEnabled:               pointer.Bool(false),
						NativeTransportReceiveQueueCapacityInBytes:       pointer.Int(180),
						NetworkAuthorizer:                                pointer.String("FakeNetworkAuthorizer"),
						NetworkingCacheSizeInMb:                          pointer.Int(182),
						NumTokens:                                        pointer.Int(183),
						OtcBacklogExpirationIntervalMs:                   pointer.Int(184),
						OtcCoalescingEnoughCoalescedMessages:             pointer.Int(10),
						OtcCoalescingStrategy:                            pointer.String("FakeOtcCoalescingStrategy"),
						OtcCoalescingWindowUs:                            pointer.Int(187),
						PaxosCacheSizeInMb:                               pointer.Int(189),
						PeriodicCommitlogSyncLagBlockInMs:                pointer.Int(190),
						PermissionsCacheMaxEntries:                       pointer.Int(191),
						PermissionsUpdateIntervalInMs:                    pointer.Int(192),
						PermissionsValidityInMs:                          pointer.Int(193),
						PhiConvictThreshold:                              pointer.String("8.1"),
						PreparedStatementsCacheSizeMb:                    pointer.Int(195),
						RangeRequestTimeoutInMs:                          pointer.Int(196),
						RangeTombstoneListGrowthFactor:                   pointer.String("197.1"),
						ReadRequestTimeoutInMs:                           pointer.Int(198),
						RejectRepairCompactionThreshold:                  pointer.Int(199),
						RepairCommandPoolFullStrategy:                    pointer.String("queue"),
						RepairCommandPoolSize:                            pointer.Int(201),
						RepairSessionMaxTreeDepth:                        pointer.Int(202),
						RepairSessionSpaceInMb:                           pointer.Int(203),
						RepairedDataTrackingForPartitionReadsEnabled:     pointer.Bool(true),
						RepairedDataTrackingForRangeReadsEnabled:         pointer.Bool(false),
						ReplicaFilteringProtection: &api.ReplicaFilteringProtectionOptions{
							CachedRowsWarnThreshold: pointer.Int(100),
							CachedRowsFailThreshold: pointer.Int(200),
						},
						ReportUnconfirmedRepairedDataMismatches: pointer.Bool(false),
						RequestScheduler:                        pointer.String("FakeRequestScheduler"),
						RequestSchedulerId:                      pointer.String("keyspace"),
						RequestSchedulerOptions: &api.RequestSchedulerOptions{
							ThrottleLimit: pointer.Int(100),
							DefaultWeight: pointer.Int(200),
						},
						RequestTimeoutInMs:      pointer.Int(211),
						RoleManager:             pointer.String("FakeRoleManager"),
						RolesCacheMaxEntries:    pointer.Int(213),
						RolesUpdateIntervalInMs: pointer.Int(214),
						RolesValidityInMs:       pointer.Int(215),
						RowCacheClassName:       pointer.String("FakeRowCacheClassName"),
						RowCacheKeysToSave:      pointer.Int(217),
						RowCacheSavePeriod:      pointer.Int(218),
						RowCacheSizeInMb:        pointer.Int(219),
						ServerEncryptionOptions: &encryption.ServerEncryptionOptions{
							EncryptionSettings: encryption.EncryptionSettings{
								Protocol:          "protocol1",
								AcceptedProtocols: []string{"protocol2", "protocol3"},
								Algorithm:         "algorithm1",
								StoreType:         "storeType1",
								CipherSuites:      []string{"cipherSuite1", "cipherSuite2"},
								RequireClientAuth: true,
							},
							Optional: pointer.Bool(true),
						},
						SlowQueryLogTimeoutInMs:                pointer.Int(234),
						SnapshotBeforeCompaction:               pointer.Bool(false),
						SnapshotLinksPerSecond:                 pointer.Int(236),
						SnapshotOnDuplicateRowDetection:        pointer.Bool(false),
						SnapshotOnRepairedDataMismatch:         pointer.Bool(true),
						SstablePreemptiveOpenIntervalInMb:      pointer.Int(240),
						StreamEntireSstables:                   pointer.Bool(true),
						StreamThroughputOutboundMegabitsPerSec: pointer.Int(245),
						StreamingConnectionsPerHost:            pointer.Int(246),
						StreamingKeepAlivePeriodInSecs:         pointer.Int(247),
						StreamingSocketTimeoutInMs:             pointer.Int(248),
						TableCountWarnThreshold:                pointer.Int(249),
						ThriftFramedTransportSizeInMb:          pointer.Int(250),
						ThriftMaxMessageLengthInMb:             pointer.Int(251),
						ThriftPreparedStatementsCacheSizeMb:    pointer.Int(252),
						TombstoneFailureThreshold:              pointer.Int(253),
						TombstoneWarnThreshold:                 pointer.Int(254),
						TracetypeQueryTtl:                      pointer.Int(255),
						TracetypeRepairTtl:                     pointer.Int(256),
						TrackWarnings: &api.TrackWarnings{
							Enabled: false,
						},
						TraverseAuthFromRoot:                       pointer.Bool(false),
						TrickleFsync:                               pointer.Bool(true),
						TrickleFsyncIntervalInKb:                   pointer.Int(261),
						TruncateRequestTimeoutInMs:                 pointer.Int(262),
						UnloggedBatchAcrossPartitionsWarnThreshold: pointer.Int(263),
						UseDeterministicTableId:                    pointer.Bool(true),
						UseOffheapMerkleTrees:                      pointer.Bool(false),
						UserDefinedFunctionFailTimeout:             pointer.Int(20),
						UserDefinedFunctionWarnTimeout:             pointer.Int(10),
						UserFunctionTimeoutPolicy:                  pointer.String("ignore"),
						ValidationPreviewPurgeHeadStartInSec:       pointer.Int(269),
						WindowsTimerInterval:                       pointer.Int(270),
						WriteRequestTimeoutInMs:                    pointer.Int(271),
					},
					JvmOptions: api.JvmOptions{
						AlwaysPreTouch:                       pointer.Bool(true),
						AvailableProcessors:                  pointer.Int(123),
						CmsHeapSizeYoungGeneration:           parseQuantity("128Mi"),
						CmsInitiatingOccupancyFraction:       pointer.Int(80),
						CmsMaxTenuringThreshold:              pointer.Int(90),
						CmsSurvivorRatio:                     pointer.Int(75),
						CmsWaitDurationMs:                    pointer.Int(40),
						CrashOnOutOfMemoryError:              pointer.Bool(true),
						DebugNonSafepoints:                   pointer.Bool(true),
						DisableAuthCachesRemoteConfiguration: pointer.Bool(true),
						DisableBiasedLocking:                 pointer.Bool(true),
						DisableContendedAnnotations:          pointer.Bool(true),
						DisablePerfSharedMem:                 pointer.Bool(true),
						EnableAssertions:                     pointer.Bool(true),
						EnableFlightRecorder:                 pointer.Bool(true),
						EnableNonRootThreadPriority:          pointer.Bool(true),
						EnableThreadPriorities:               pointer.Bool(true),
						ExitOnOutOfMemoryError:               pointer.Bool(true),
						ExpirationDateOverflowPolicy:         pointer.String("REJECT"),
						Force30ProtocolVersion:               pointer.Bool(true),
						ForceDefaultIndexingPageSize:         pointer.Bool(true),
						G1ConcGcThreads:                      pointer.Int(4),
						G1InitiatingHeapOccupancyPercent:     pointer.Int(85),
						G1MaxGcPauseMs:                       pointer.Int(1000),
						G1ParallelGcThreads:                  pointer.Int(8),
						G1RSetUpdatingPauseTimePercent:       pointer.Int(60),
						GarbageCollector:                     "G1GC",
						GuaranteedSafepointIntervalMs:        pointer.Int(1000),
						HeapDumpOnOutOfMemoryError:           pointer.Bool(true),
						InitialHeapSize:                      parseQuantity("1Gi"),
						JdkAllowAttachSelf:                   pointer.Bool(true),
						JmxConnectionType:                    pointer.String("local-no-auth"),
						JmxPort:                              pointer.Int(7199),
						JmxRemoteSsl:                         pointer.Bool(true),
						JmxRemoteSslOpts:                     pointer.String("-Dopt=value"),
						JmxRemoteSslRequireClientAuth:        pointer.Bool(true),
						ListenForRemoteDebuggers:             pointer.Bool(true),
						LogCompilation:                       pointer.Bool(true),
						LogFileSize:                          parseQuantity("1Gi"),
						MaxHeapSize:                          parseQuantity("4Gi"),
						MaxHintTtlSeconds:                    pointer.Int(1000),
						MetricsReporterConfigFile:            pointer.String("/mnt/dir"),
						NettyEventloopMaxPendingTasks:        pointer.Int(123),
						NettyTryReflectionSetAccessible:      pointer.Bool(true),
						NioAlignDirectMemory:                 pointer.Bool(true),
						NioMaxCachedBufferSize:               parseQuantity("1Mi"),
						NumberOfLogFiles:                     pointer.Int(10),
						PerThreadStackSize:                   parseQuantity("1Gi"),
						PreferIpv4:                           pointer.Bool(true),
						PreserveFramePointer:                 pointer.Bool(true),
						PrintApplicationStoppedTime:          pointer.Bool(true),
						PrintDateStamps:                      pointer.Bool(true),
						PrintDetails:                         pointer.Bool(true),
						PrintFlssStatistics:                  pointer.Bool(true),
						PrintHeap:                            pointer.Bool(true),
						PrintHeapHistogramOnOutOfMemoryError: pointer.Bool(true),
						PrintPromotionFailure:                pointer.Bool(true),
						PrintTenuringDistribution:            pointer.Bool(true),
						ResizeTlab:                           pointer.Bool(true),
						RingDelayMs:                          pointer.Int(456),
						StringTableSize:                      parseQuantity("1Gi"),
						TriggersDirectory:                    pointer.String("/mnt/dir"),
						UnlockCommercialFeatures:             pointer.Bool(true),
						UnlockDiagnosticVmOptions:            pointer.Bool(true),
						UseLogFile:                           pointer.Bool(true),
						UseLogFileRotation:                   pointer.Bool(true),
						UseNuma:                              pointer.Bool(true),
						UseTlab:                              pointer.Bool(true),
						WriteSurvey:                          pointer.Bool(true),
						AdditionalOptions:                    []string{"-Dadditional.option.1=true", "-Dadditional.option.2=42"},
					},
					DseYaml: api.DseYaml{
						AuthenticationOptions: &api.AuthenticationOptions{
							Enabled:                 pointer.Bool(true),
							DefaultScheme:           pointer.String("scheme1"),
							OtherSchemes:            []string{"scheme2", "scheme3"},
							SchemePermissions:       pointer.Bool(true),
							AllowDigestWithKerberos: pointer.Bool(true),
							PlainTextWithoutSsl:     pointer.String("block"),
							TransitionalMode:        nil,
						},
						RoleManagementOptions: &api.RoleManagementOptions{
							Mode: pointer.String("internal"),
							ModeByAuthentication: &api.ModeByAuthentication{
								Internal: pointer.String("internal"),
								Ldap:     pointer.String("internal"),
								Kerberos: pointer.String("internal"),
							},
							Stats: pointer.Bool(true),
						},
						AuthorizationOptions: &api.AuthorizationOptions{
							Enabled:               pointer.Bool(true),
							TransitionalMode:      pointer.String("strict"),
							AllowRowLevelSecurity: pointer.Bool(true),
						},
						KerberosOptions: &api.KerberosOptions{
							Keytab:           pointer.String("/mnt/dir"),
							ServicePrincipal: pointer.String("service-principal"),
							HTTPPrincipal:    pointer.String("http-principal"),
							QOP:              pointer.String("auth"),
						},
						LdapOptions: &api.LdapOptions{
							ServerHost:              pointer.String("ldap.server.host"),
							ServerPort:              pointer.Int(389),
							HostnameVerification:    pointer.Bool(true),
							SearchDN:                pointer.String("search.dn"),
							SearchPassword:          pointer.String("search.password"),
							UseSSL:                  pointer.Bool(true),
							UseTLS:                  pointer.Bool(true),
							TruststorePath:          pointer.String("/mnt/dir/truststore.jks"),
							TruststorePassword:      pointer.String("truststore.password"),
							TruststoreType:          pointer.String("JKS"),
							UserSearchBase:          pointer.String("user.search.base"),
							UserSearchFilter:        pointer.String("user.search.filter"),
							UserMemberOfAttribute:   pointer.String("user.member.of.attribute"),
							GroupSearchType:         pointer.String("group.search.type"),
							GroupSearchBase:         pointer.String("group.search.base"),
							GroupSearchFilter:       pointer.String("group.search.filter"),
							GroupNameAttribute:      pointer.String("group.name.attribute"),
							ExtraUserSearchBases:    []string{"user.search.base.1", "user.search.base.2"},
							ExtraGroupSearchBases:   []string{"group.search.base.1", "group.search.base.2"},
							CredentialsValidityInMs: pointer.Int(1000),
							SearchValidityInSeconds: pointer.Int(1000),
							ConnectionPool: &api.LdapConnectionPoolOptions{
								MaxActive: pointer.Int(10),
								MaxIdle:   pointer.Int(20),
							},
							SslProtocol:                      pointer.String("TLSv1.2"),
							AllParentGroupsSearchType:        pointer.String("all.parent.groups.search.type"),
							AllParentGroupsMemberOfAttribute: pointer.String("all.parent.groups.member.of.attribute"),
							AllParentGroupsSearchFilter:      pointer.String("all.parent.groups.search.filter"),
							DnsServiceDiscovery: &api.DnsServiceDiscovery{
								Fqdn:                pointer.String("fqdn"),
								LookupTimeoutMs:     pointer.Int(1000),
								RetentionDurationMs: pointer.Int(1001),
								PollingIntervalMs:   pointer.Int(1002),
							},
							GroupsValidityInMs:       pointer.Int(1003),
							GroupsUpdateIntervalInMs: pointer.Int(1004),
						},
						SystemInfoEncryptionOptions: &api.SystemInfoEncryptionOptions{
							Enabled:           pointer.Bool(true),
							CipherAlgorithm:   pointer.String("cipher.algorithm"),
							SecretKeyStrength: pointer.Int(128),
							ChunkLengthKb:     pointer.Int(129),
							KeyProvider:       pointer.String("key.provider"),
							KmipHost:          pointer.String("kmip.host"),
						},
						ConfigurationEncryptionOptions: &api.ConfigurationEncryptionOptions{
							SystemKeyDirectory:      pointer.String("system.key.directory"),
							ConfigEncryptionActive:  pointer.Bool(true),
							ConfigEncryptionKeyName: pointer.String("config.encryption.key.name"),
						},
						KmipEncryptionOptions: &api.KmipEncryptionOptions{
							KmipHosts: map[string]api.KmipHostsGroup{
								"group1": {
									Hosts: pointer.String("host1,host2"),
								},
							},
						},
						SolrEncryptionOptions: &api.SolrEncryptionOptions{
							DecryptionCacheOffheapAllocation: pointer.Bool(true),
							DecryptionCacheSizeInMb:          pointer.Int(1024),
						},
						DseInMemoryOptions: &api.DseInMemoryOptions{
							MaxMemoryToLockFraction: parseQuantity("0.2"),
							MaxMemoryToLockMb:       pointer.Int(1024),
						},
						NodeHealthOptions: &api.NodeHealthOptions{
							RefreshRateMs:                pointer.Int(1000),
							UptimeRampUpPeriodSeconds:    pointer.Int(100),
							DroppedMutationWindowMinutes: pointer.Int(10),
						},
						EnableHealthBasedRouting: pointer.Bool(true),
						LeaseMetricsOptions: &api.LeaseMetricsOptions{
							Enabled:    pointer.Bool(true),
							TtlSeconds: pointer.Int(100),
						},
						SolrSchedulerOptions: &api.SolrSchedulerOptions{
							FixedRatePeriodInSeconds: pointer.Int(100),
							InitialDelayInSeconds:    pointer.Int(101),
							MaxDocsPerBatch:          pointer.Int(102),
							ThreadPoolSize:           pointer.Int(103),
						},
						SolrCqlQueryOptions: &api.SolrCqlQueryOptions{
							Paging:     pointer.String("driver"),
							RowTimeout: pointer.Int(100),
						},
						SolrIndexingOptions: &api.SolrIndexingOptions{
							DataDir:                      pointer.String("data.dir"),
							FieldCacheEnabled:            pointer.Bool(true),
							BackPressureThresholdPerCore: pointer.Int(100),
							FlushMaxTimePerCoreMinutes:   pointer.Int(101),
							LoadMaxTimePerCoreMinutes:    pointer.Int(102),
							EnableIndexDiskFailurePolicy: pointer.Bool(true),
							RamBufferHeapSpaceInMb:       pointer.Int(103),
							RamBufferOffheapSpaceInMb:    pointer.Int(104),
							AsyncBootstrapReindex:        pointer.Bool(true),
							ResourceUploadLimitMb:        pointer.Int(105),
						},
						SolrShardTransportOptions: &api.SolrShardTransportOptions{
							NettyClientRequestTimeoutMs: pointer.Int(100),
						},
						PerformanceServiceOptions: &api.PerformanceServiceOptions{
							CoreThreads:   pointer.Int(100),
							MaxThreads:    pointer.Int(101),
							QueueCapacity: pointer.Int(102),
							CqlSlowLogOptions: &api.CqlSlowLogOptions{
								Enabled:           pointer.Bool(true),
								Threshold:         parseQuantity("200.0"),
								MinimumSamples:    pointer.Int(101),
								TtlSeconds:        pointer.Int(102),
								SkipWritingToDb:   pointer.Bool(true),
								NumSlowestQueries: pointer.Int(103),
							},
							CqlSystemInfoOptions: &api.MetricsOptions{
								Enabled:       pointer.Bool(true),
								RefreshRateMs: pointer.Int(100),
							},
							ResourceLevelLatencyTrackingOptions: &api.MetricsOptions{
								Enabled:       pointer.Bool(true),
								RefreshRateMs: pointer.Int(100),
							},
							DbSummaryStatsOptions: &api.MetricsOptions{
								Enabled:       pointer.Bool(true),
								RefreshRateMs: pointer.Int(100),
							},
							ClusterSummaryStatsOptions: &api.MetricsOptions{
								Enabled:       pointer.Bool(true),
								RefreshRateMs: pointer.Int(100),
							},
							SparkClusterInfoOptions: &api.MetricsOptions{
								Enabled:       pointer.Bool(true),
								RefreshRateMs: pointer.Int(100),
							},
							HistogramDataOptions: &api.HistogramDataOptions{
								MetricsOptions: api.MetricsOptions{
									Enabled:       pointer.Bool(true),
									RefreshRateMs: pointer.Int(100),
								},
								RetentionCount: pointer.Int(100),
							},
							UserLevelLatencyTrackingOptions: &api.UserLevelLatencyTrackingOptions{
								MetricsOptions: api.MetricsOptions{
									Enabled:       pointer.Bool(true),
									RefreshRateMs: pointer.Int(100),
								},
								TopStatsLimit: pointer.Int(100),
								Quantiles:     pointer.Bool(true),
							},
							SolrPerformanceOptions: &api.SolrPerformanceOptions{
								SlowSubQueryLogOptions: &api.SolrSlowSubQueryLogOptions{
									Enabled:      pointer.Bool(true),
									TtlSeconds:   pointer.Int(100),
									AsyncWriters: pointer.Int(101),
									ThresholdMs:  pointer.Int(102),
								},
								UpdateHandlerMetricsOptions: &api.SolrMetricsOptions{
									MetricsOptions: api.MetricsOptions{
										Enabled:       pointer.Bool(true),
										RefreshRateMs: pointer.Int(100),
									},
									TtlSeconds: pointer.Int(100),
								},
								RequestHandlerMetricsOptions: &api.SolrMetricsOptions{
									MetricsOptions: api.MetricsOptions{
										Enabled:       pointer.Bool(true),
										RefreshRateMs: pointer.Int(101),
									},
									TtlSeconds: pointer.Int(101),
								},
								IndexStatsOptions: &api.SolrMetricsOptions{
									MetricsOptions: api.MetricsOptions{
										Enabled:       pointer.Bool(true),
										RefreshRateMs: pointer.Int(102),
									},
									TtlSeconds: pointer.Int(102),
								},
								CacheStatsOptions: &api.SolrMetricsOptions{
									MetricsOptions: api.MetricsOptions{
										Enabled:       pointer.Bool(true),
										RefreshRateMs: pointer.Int(103),
									},
									TtlSeconds: pointer.Int(103),
								},
								LatencySnapshotOptions: &api.SolrMetricsOptions{
									MetricsOptions: api.MetricsOptions{
										Enabled:       pointer.Bool(true),
										RefreshRateMs: pointer.Int(104),
									},
									TtlSeconds: pointer.Int(104),
								},
							},
							SparkApplicationInfoOptions: &api.SparkApplicationInfoOptions{
								Enabled:       pointer.Bool(true),
								RefreshRateMs: pointer.Int(100),
								Driver: &api.SparkApplicationInfoDriverOptions{
									SparkApplicationInfoExecutorOptions: api.SparkApplicationInfoExecutorOptions{
										Sink:            pointer.Bool(true),
										ConnectorSource: pointer.Bool(true),
										JvmSource:       pointer.Bool(true),
									},
									StateSource: pointer.Bool(true),
								},
								Executor: &api.SparkApplicationInfoExecutorOptions{
									Sink:            pointer.Bool(true),
									ConnectorSource: pointer.Bool(true),
									JvmSource:       pointer.Bool(true),
								},
							},
							GraphEvents: &api.GraphEvents{
								TtlSeconds: pointer.Int(100),
							},
						},
						AnalyticsOptions: &api.AnalyticsOptions{
							SparkSharedSecretBitLength:              pointer.Int(100),
							SparkSecurityEnabled:                    pointer.Bool(true),
							SparkSecurityEncryptionEnabled:          pointer.Bool(true),
							SparkDaemonReadinessAssertionIntervalMs: pointer.Int(100),
							ResourceManagerOptions: &api.SparkResourceManagerOptions{
								WorkerOptions: &api.SparkWorkerOptions{
									CoresTotal:  parseQuantity("1.0"),
									MemoryTotal: parseQuantity("0.8"),
									Workpools: []api.SparkWorkpool{
										{
											Name:   pointer.String("workpool1"),
											Cores:  parseQuantity("1"),
											Memory: parseQuantity("1.0"),
										},
									},
								},
							},
							SparkUiOptions: &api.SparkUiOptions{
								Encryption: pointer.String("custom"),
								EncryptionOptions: &api.SparkUiEncryptionOptions{
									Enabled:            pointer.Bool(true),
									Keystore:           pointer.String("keystore"),
									KeystorePassword:   pointer.String("keystorePassword"),
									RequireClientAuth:  pointer.Bool(true),
									Truststore:         pointer.String("truststore"),
									TruststorePassword: pointer.String("truststorePassword"),
									Protocol:           pointer.String("protocol"),
									Algorithm:          pointer.String("algorithm"),
									KeystoreType:       pointer.String("keystoreType"),
									TruststoreType:     pointer.String("truststoreType"),
									CipherSuites:       pointer.String("cipherSuites"),
								},
							},
							SparkProcessRunner: &api.SparkProcessRunner{
								RunnerType: pointer.String("run_as"),
								RunAsRunnerOptions: &api.SparkRunAsRunnerOptions{
									UserSlots: []string{"user1", "user2"},
								},
							},
						},
						AlwaysOnSqlOptions: &api.AlwaysOnSqlOptions{
							Enabled:                        pointer.Bool(true),
							ThriftPort:                     pointer.Int(100),
							WebUIPort:                      pointer.Int(101),
							ReservePortWaitTimeMs:          pointer.Int(102),
							StatusCheckWaitTimeMs:          pointer.Int(103),
							Workpool:                       pointer.String("workpool"),
							LogDsefsDir:                    pointer.String("logDsefsDir"),
							AuthUser:                       pointer.String("authUser"),
							RunnerMaxErrors:                pointer.Int(104),
							HeartbeatUpdateIntervalSeconds: pointer.Int(105),
						},
						DsefsOptions: &api.DsefsOptions{
							Enabled:      pointer.Bool(true),
							KeyspaceName: pointer.String("keyspaceName"),
							WorkDir:      pointer.String("workDir"),
							PublicPort:   pointer.Int(100),
							PrivatePort:  pointer.Int(101),
							DataDirectories: []api.DsefsDataDirectory{
								{
									Dir:           pointer.String("dir"),
									StorageWeight: parseQuantity("1.0"),
									MinFreeSpace:  parseQuantity("1M"),
								},
							},
							ServiceStartupTimeoutMs: pointer.Int(102),
							ServiceCloseTimeoutMs:   pointer.Int(103),
							ServerCloseTimeoutMs:    pointer.Int(104),
							CompressionFrameMaxSize: pointer.Int(105),
							QueryCacheSize:          pointer.Int(106),
							QueryCacheExpireAfterMs: pointer.Int(107),
							GossipOptions: &api.DsefsGossipOptions{
								RoundDelayMs:    pointer.Int(108),
								StartupDelayMs:  pointer.Int(109),
								ShutdownDelayMs: pointer.Int(110),
							},
							RestOptions: &api.DsefsRestOptions{
								RequestTimeoutMs:                    pointer.Int(111),
								ConnectionOpenTimeoutMs:             pointer.Int(112),
								ClientCloseTimeoutMs:                pointer.Int(113),
								ServerRequestTimeoutMs:              pointer.Int(114),
								IdleConnectionTimeoutMs:             pointer.Int(115),
								InternodeIdleConnectionTimeoutMs:    pointer.Int(116),
								CoreMaxConcurrentConnectionsPerHost: pointer.Int(117),
							},
							TransactionOptions: &api.DsefsTransactionOptions{
								TransactionTimeoutMs:  pointer.Int(118),
								ConflictRetryDelayMs:  pointer.Int(119),
								ConflictRetryCount:    pointer.Int(120),
								ExecutionRetryDelayMs: pointer.Int(121),
								ExecutionRetryCount:   pointer.Int(122),
							},
							BlockAllocatorOptions: &api.DsefsBlockAllocatorOptions{
								OverflowMarginMb: pointer.Int(123),
								OverflowFactor:   parseQuantity("1.05"),
							},
						},
						InsightsOptions: &api.InsightsOptions{
							DataDir: pointer.String("dataDir"),
							LogDir:  pointer.String("logDir"),
						},
						AuditLoggingOptions: &api.AuditLoggingOptions{
							Enabled:                        pointer.Bool(true),
							Logger:                         pointer.String("logger"),
							IncludedCategories:             pointer.String("includedCategories"),
							ExcludedCategories:             pointer.String("excludedCategories"),
							IncludedKeyspaces:              pointer.String("includedKeyspaces"),
							ExcludedKeyspaces:              pointer.String("excludedKeyspaces"),
							IncludedRoles:                  pointer.String("includedRoles"),
							ExcludedRoles:                  pointer.String("excludedRoles"),
							AuditLoggingRetentionTimeHours: pointer.Int(100),
							CassandraAuditWriterOptions: &api.CassandraAuditWriterOptions{
								Mode:               pointer.String("mode"),
								BatchSize:          pointer.Int(101),
								FlushTimeMs:        pointer.Int(102),
								QueueSize:          pointer.Int(103),
								WriteConsistency:   pointer.String("writeConsistency"),
								DroppedEventLog:    pointer.String("droppedEventLog"),
								DayPartitionMillis: pointer.Int(104),
							},
						},
						TieredStorageOptions: map[string]api.TieredStorageOptions{
							"option1": {
								Tiers: []api.StorageTier{
									{
										Paths: []string{"path1", "path2"},
									},
								},
								LocalOptions: map[string]string{
									"localOption1": "localValue1",
									"localOption2": "localValue2",
								},
							},
						},
						AdvancedReplicationOptions: &api.AdvancedReplicationOptions{
							Enabled:                             pointer.Bool(true),
							ConfDriverPasswordEncryptionEnabled: pointer.Bool(true),
							AdvancedReplicationDirectory:        pointer.String("advancedReplicationDirectory"),
							SecurityBasePath:                    pointer.String("securityBasePath"),
						},
						InternodeMessagingOptions: &api.InternodeMessagingOptions{
							Port:                        pointer.Int(100),
							FrameLengthInMb:             pointer.Int(101),
							ServerAcceptorThreads:       pointer.Int(102),
							ServerWorkerThreads:         pointer.Int(103),
							ClientMaxConnections:        pointer.Int(104),
							ClientWorkerThreads:         pointer.Int(105),
							HandshakeTimeoutSeconds:     pointer.Int(106),
							ClientRequestTimeoutSeconds: pointer.Int(107),
						},
						GraphOptions: &api.GraphOptions{
							AnalyticEvaluationTimeoutInMinutes: pointer.Int(100),
							RealtimeEvaluationTimeoutInSeconds: pointer.Int(101),
							SchemaAgreementTimeoutInMs:         pointer.Int(102),
							SystemEvaluationTimeoutInSeconds:   pointer.Int(103),
							AdjacencyCacheSizeInMb:             pointer.Int(104),
							IndexCacheSizeInMb:                 pointer.Int(105),
							MaxQueryParams:                     pointer.Int(106),
							GremlinServerOptions: &api.GremlinServerOptions{
								Port:             pointer.Int(100),
								ThreadPoolWorker: pointer.Int(101),
								GremlinPool:      pointer.Int(102),
								ScriptEngines: &api.GremlinScriptEngine{
									GremlinGroovy: &api.GremlinGroovy{
										Config: &api.GremlinGroovyConfig{
											SandboxEnabled: pointer.Bool(true),
											SandboxRules: &api.GremlinGroovySandboxRules{
												WhitelistPackages: []string{"package1", "package2"},
												WhitelistTypes:    []string{"type1", "type2"},
												WhitelistSupers:   []string{"super1", "super2"},
												BlacklistPackages: []string{"package3", "package4"},
												BlacklistSupers:   []string{"super3", "super4"},
											},
										},
									},
								},
							},
						},
						ServerId: pointer.String("server-id"),
					},
				},
			},
			want: `{
				"cassandra-yaml": {
					"allocate_tokens_for_keyspace": "system_auth",
					"allocate_tokens_for_local_replication_factor": 3,
					"audit_logging_options": {"enabled": false},
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"auto_optimise_full_repair_streams": false,
					"auto_optimise_inc_repair_streams": true,
					"auto_optimise_preview_repair_streams": false,
					"auto_snapshot": true,
					"autocompaction_on_startup_enabled": false,
					"automatic_sstable_upgrade": true,
					"back_pressure_enabled": true,
					"back_pressure_strategy": {"class_name": "FakeBackPressureStrategy"},
					"batch_size_fail_threshold_in_kb": 20,
					"batch_size_warn_threshold_in_kb": 21,
					"batchlog_replay_throttle_in_kb": 22,
					"block_for_peers_in_remote_dcs": false,
					"block_for_peers_timeout_in_secs": 24,
					"buffer_pool_use_heap_if_exhausted": false,
					"cas_contention_timeout_in_ms": 28,
					"cdc_enabled": false,
					"cdc_free_space_check_interval_ms": 30,
					"cdc_raw_directory": "FakeCdcRawDirectory",
					"cdc_total_space_in_mb": 32,
					"check_for_duplicate_rows_during_compaction": false,
					"check_for_duplicate_rows_during_reads": true,
	                "client_encryption_options": {
						"accepted_protocols": ["protocol2","protocol3"],
						"algorithm": "algorithm1",
						"cipher_suites": ["cipherSuite1","cipherSuite2"],
						"enabled": true,
						"keystore": "/mnt/client-keystore/keystore",
						"optional": true,
						"protocol": "protocol1",
						"require_client_auth": true,
						"store_type": "storeType1",
						"truststore": "/mnt/client-truststore/truststore"
					},
					"column_index_cache_size_in_kb": 38,
					"column_index_size_in_kb": 39,
					"commitlog_compression": {"class_name": "FakeCommitlogCompression"},
					"commitlog_max_compression_buffers_in_pool": 43,
					"commitlog_periodic_queue_size": 44,
					"commitlog_segment_size_in_mb": 45,
					"commitlog_sync": "periodic",
					"commitlog_sync_batch_window_in_ms": "123",
        	        "commitlog_sync_group_window_in_ms": 10001,
					"commitlog_sync_period_in_ms": 49,
					"commitlog_total_space_in_mb": 50,
					"compaction_large_partition_warning_threshold_mb": 51,
					"compaction_throughput_mb_per_sec": 52,
					"concurrent_compactors": 54,
					"concurrent_counter_writes": 55,
					"concurrent_materialized_view_builders": 56,
					"concurrent_materialized_view_writes": 57,
					"concurrent_reads": 58,
					"concurrent_replicates": 59,
					"concurrent_validations": 60,
					"concurrent_writes": 61,
					"consecutive_message_errors_threshold": 62,
					"corrupted_tombstone_strategy": "disabled",
					"counter_cache_keys_to_save": 64,
					"counter_cache_save_period": 65,
					"counter_cache_size_in_mb": 66,
					"counter_write_request_timeout_in_ms": 67,
					"credentials_cache_max_entries": 68,
					"credentials_update_interval_in_ms": 69,
					"credentials_validity_in_ms": 70,
					"cross_node_timeout": false,
					"diagnostic_events_enabled": false,
					"disk_access_mode": "auto",
					"disk_optimization_estimate_percentile": "0.1",
					"disk_optimization_page_cross_chance": "0.1",
					"disk_optimization_strategy": "ssd",
					"dynamic_snitch": false,
					"dynamic_snitch_badness_threshold": "86.1",
					"dynamic_snitch_reset_interval_in_ms": 87,
					"dynamic_snitch_update_interval_in_ms": 88,
					"enable_drop_compact_storage": true,
					"enable_materialized_views": false,
					"enable_sasi_indexes": false,
					"enable_scripted_user_defined_functions": true,
					"enable_transient_replication": false,
					"enable_user_defined_functions": true,
					"enable_user_defined_functions_threads": false,
					"endpoint_snitch": "FakeEndpointSnitch",
					"file_cache_enabled": true,
					"file_cache_round_up": false,
					"file_cache_size_in_mb": 104,
					"flush_compression": "none",
					"full_query_logging_options": {"log_dir": "/tmp", "block": false},
					"gc_log_threshold_in_ms": 107,
					"gc_warn_threshold_in_ms": 108,
					"hinted_handoff_disabled_datacenters": ["dc1"],
					"hinted_handoff_enabled": false,
					"hinted_handoff_throttle_in_kb": 112,
					"hints_compression": {"class_name": "FakeHintsCompression"},
					"hints_flush_period_in_ms": 115,
					"ideal_consistency_level": "ONE",
					"index_summary_capacity_in_mb": 119,
					"index_summary_resize_interval_in_minutes": 120,
					"initial_range_tombstone_list_allocation_size": 121,
					"inter_dc_stream_throughput_outbound_megabits_per_sec": 123,
					"inter_dc_tcp_nodelay": true,
					"internode_application_receive_queue_capacity_in_bytes": 125,
					"internode_application_receive_queue_reserve_endpoint_capacity_in_bytes": 126,
					"internode_application_receive_queue_reserve_global_capacity_in_bytes": 127,
					"internode_application_send_queue_capacity_in_bytes": 128,
					"internode_application_send_queue_reserve_endpoint_capacity_in_bytes": 129,
					"internode_application_send_queue_reserve_global_capacity_in_bytes": 130,
					"internode_authenticator": "FakeInternodeAuthenticator",
					"internode_compression": "all",
					"internode_max_message_size_in_bytes": 134,
					"internode_socket_receive_buffer_size_in_bytes": 137,
					"internode_socket_send_buffer_size_in_bytes": 138,
					"internode_streaming_tcp_user_timeout_in_ms": 139,
					"internode_tcp_connect_timeout_in_ms": 140,
					"internode_tcp_user_timeout_in_ms": 141,
					"key_cache_keys_to_save": 142,
					"key_cache_migrate_during_compaction": false,
					"key_cache_save_period": 144,
					"key_cache_size_in_mb": 145,
					"keyspace_count_warn_threshold": 146,
					"max_concurrent_automatic_sstable_upgrades": 152,
					"max_hint_window_in_ms": 153,
					"max_hints_delivery_threads": 154,
					"max_hints_file_size_in_mb": 155,
					"max_mutation_size_in_kb": 156,
					"max_streaming_retries": 157,
					"max_value_size_in_mb": 158,
					"memtable_allocation_type": "heap_buffers",
					"memtable_cleanup_threshold": "0.1",
					"memtable_flush_writers": 1,
					"memtable_heap_space_in_mb": 162,
					"memtable_offheap_space_in_mb": 163,
					"min_free_space_per_drive_in_mb": 164,
					"native_transport_allow_older_protocols": true,
					"native_transport_flush_in_batches_legacy": false,
					"native_transport_idle_timeout_in_ms": 168,
					"native_transport_max_concurrent_connections": 169,
					"native_transport_max_concurrent_connections_per_ip": 170,
					"native_transport_max_concurrent_requests_in_bytes": 171,
					"native_transport_max_concurrent_requests_in_bytes_per_ip": 172,
					"native_transport_max_frame_size_in_mb": 173,
					"native_transport_max_negotiable_protocol_version": 4,
					"native_transport_max_threads": 176,
					"native_transport_receive_queue_capacity_in_bytes": 180,
					"network_authorizer": "FakeNetworkAuthorizer",
					"networking_cache_size_in_mb": 182,
					"num_tokens": 183,
					"otc_coalescing_enough_coalesced_messages": 10,
					"otc_coalescing_strategy": "FakeOtcCoalescingStrategy",
					"otc_coalescing_window_us": 187,
					"periodic_commitlog_sync_lag_block_in_ms": 190,
					"permissions_cache_max_entries": 191,
					"permissions_update_interval_in_ms": 192,
					"permissions_validity_in_ms": 193,
					"phi_convict_threshold": "8.1",
					"prepared_statements_cache_size_mb": 195,
					"range_request_timeout_in_ms": 196,
					"range_tombstone_list_growth_factor": "197.1",
					"read_request_timeout_in_ms": 198,
					"reject_repair_compaction_threshold": 199,
					"repair_command_pool_full_strategy": "queue",
					"repair_command_pool_size": 201,
					"repair_session_max_tree_depth": 202,
					"repair_session_space_in_mb": 203,
					"repaired_data_tracking_for_partition_reads_enabled": true,
					"repaired_data_tracking_for_range_reads_enabled": false,
					"replica_filtering_protection": {"cached_rows_warn_threshold": 100, "cached_rows_fail_threshold": 200},
					"report_unconfirmed_repaired_data_mismatches": false,
					"request_timeout_in_ms": 211,
					"role_manager": "FakeRoleManager",
					"roles_cache_max_entries": 213,
					"roles_update_interval_in_ms": 214,
					"roles_validity_in_ms": 215,
					"row_cache_class_name": "FakeRowCacheClassName",
					"row_cache_keys_to_save": 217,
					"row_cache_save_period": 218,
					"row_cache_size_in_mb": 219,
	                "server_encryption_options": {
						"accepted_protocols": ["protocol2","protocol3"],
						"algorithm": "algorithm1",
						"cipher_suites": ["cipherSuite1","cipherSuite2"],
						"keystore": "/mnt/server-keystore/keystore",
						"optional": true,
						"protocol": "protocol1",
						"require_client_auth": true,
						"store_type": "storeType1",
						"truststore": "/mnt/server-truststore/truststore"
					},
					"slow_query_log_timeout_in_ms": 234,
					"snapshot_before_compaction": false,
					"snapshot_links_per_second": 236,
					"snapshot_on_duplicate_row_detection": false,
					"snapshot_on_repaired_data_mismatch": true,
					"sstable_preemptive_open_interval_in_mb": 240,
					"stream_entire_sstables": true,
					"stream_throughput_outbound_megabits_per_sec": 245,
					"streaming_connections_per_host": 246,
					"streaming_keep_alive_period_in_secs": 247,
					"table_count_warn_threshold": 249,
					"tombstone_failure_threshold": 253,
					"tombstone_warn_threshold": 254,
					"tracetype_query_ttl": 255,
					"tracetype_repair_ttl": 256,
					"trickle_fsync": true,
					"trickle_fsync_interval_in_kb": 261,
					"truncate_request_timeout_in_ms": 262,
					"unlogged_batch_across_partitions_warn_threshold": 263,
					"use_offheap_merkle_trees": false,
					"user_defined_function_fail_timeout": 20,
					"user_defined_function_warn_timeout": 10,
					"user_function_timeout_policy": "ignore",
					"validation_preview_purge_head_start_in_sec": 269,
					"windows_timer_interval": 270,
					"write_request_timeout_in_ms": 271
				},
				"dse-yaml":{
					"advanced_replication_options": {
						"advanced_replication_directory": "advancedReplicationDirectory",
						"conf_driver_password_encryption_enabled": true,
						"enabled": true,
						"security_base_path": "securityBasePath"
					},
					"alwayson_sql_options": {
						"alwayson_sql_status_check_wait_time_ms": 103,
						"auth_user": "authUser",
						"enabled": true,
						"heartbeat_update_interval_seconds": 105,
						"log_dsefs_dir": "logDsefsDir",
						"reserve_port_wait_time_ms": 102,
						"runner_max_errors": 104,
						"thrift_port": 100,
						"web_ui_port": 101,
						"workpool": "workpool"
					},
					"async_bootstrap_reindex": true,
					"audit_logging_options": {
						"cassandra_audit_writer_options": {
							"batch_size": 101,
							"day_partition_millis": 104,
							"dropped_event_log": "droppedEventLog",
							"flush_time": 102,
							"mode": "mode",
							"queue_size": 103,
							"write_consistency": "writeConsistency"
						},
						"enabled": true,
						"excluded_categories": "excludedCategories",
						"excluded_keyspaces": "excludedKeyspaces",
						"excluded_roles": "excludedRoles",
						"included_categories": "includedCategories",
						"included_keyspaces": "includedKeyspaces",
						"included_roles": "includedRoles",
						"logger": "logger",
						"retention_time": 100
					},
					"authentication_options": {
						"allow_digest_with_kerberos": true,
						"default_scheme": "scheme1",
						"enabled": true,
						"other_schemes": ["scheme2","scheme3"],
						"plain_text_without_ssl": "block",
						"scheme_permissions": true
					},
				   	"authorization_options": {
						"allow_row_level_security": true,
						"enabled": true,
						"transitional_mode": "strict"
				   	},
					"back_pressure_threshold_per_core": 100,
					"cluster_summary_stats_options": {
						"enabled": true,
						"refresh_rate_ms": 100
					},
					"config_encryption_active": true,
					"config_encryption_key_name": "config.encryption.key.name",
					"cql_slow_log_options": {
						"enabled": true,
						"minimum_samples": 101,
						"num_slowest_queries": 103,
						"skip_writing_to_db": true,
						"threshold": 200,
						"ttl_seconds": 102
					},
					"cql_solr_query_paging": "driver",
					"cql_solr_query_row_timeout": 100,
					"cql_system_info_options": {
						"enabled": true,
						"refresh_rate_ms": 100
					},
					"db_summary_stats_options": {
						"enabled": true,
						"refresh_rate_ms": 100
					},
					"dsefs_options": {
						"block_allocator_options": {
							"overflow_factor": 1.05,
							"overflow_margin_mb": 123
						},
						"compression_frame_max_size": 105,
						"data_directories": [
							{
								"dir": "dir",
								"min_free_space": 1000000,
								"storage_weight": 1.0
							}
						],
						"enabled": true,
						"gossip_options": {
							"round_delay_ms": 108,
							"shutdown_delay_ms": 110,
							"startup_delay_ms": 109
						},
						"keyspace_name": "keyspaceName",
						"private_port": 101,
						"public_port": 100,
						"query_cache_expire_after_ms": 107,
						"query_cache_size": 106,
						"rest_options": {
							"client_close_timeout_ms": 113,
							"connection_open_timeout_ms": 112,
							"core_max_concurrent_connections_per_host": 117,
							"idle_connection_timeout_ms": 115,
							"internode_idle_connection_timeout_ms": 116,
							"request_timeout_ms": 111,
							"server_request_timeout_ms": 114
						},
						"server_close_timeout_ms": 104,
						"service_close_timeout_ms": 103,
						"service_startup_timeout_ms": 102,
						"transaction_options": {
							"conflict_retry_count": 120,
							"conflict_retry_delay_ms": 119,
							"execution_retry_count": 122,
							"execution_retry_delay_ms": 121,
							"transaction_timeout_ms": 118
						},
						"work_dir": "workDir"
					},
					"enable_health_based_routing": true,
					"enable_index_disk_failure_policy": true,
					"flush_max_time_per_core": 101,
					"graph": {
						"adjacency_cache_size_in_mb": 104,
						"analytic_evaluation_timeout_in_minutes": 100,
						"gremlin_server": {
							"gremlinPool": 102,
							"port": 100,
							"scriptEngines": {
								"gremlin-groovy": {
									"config": {
										"sandbox_enabled": true,
										"sandbox_rules": {
											"blacklist_packages": ["package3", "package4"],
											"blacklist_supers": ["super3", "super4"],
											"whitelist_packages": ["package1", "package2"],
											"whitelist_supers": ["super1", "super2"],
											"whitelist_types": ["type1", "type2"]
										}
									}
								}
							},
							"threadPoolWorker": 101
						},
						"index_cache_size_in_mb": 105,
						"max_query_params": 106,
						"realtime_evaluation_timeout_in_seconds": 101,
						"schema_agreement_timeout_in_ms": 102,
						"system_evaluation_timeout_in_seconds": 103
					},
					"graph_events": {
						"ttl_seconds": 100
					},
					"histogram_data_options": {
						"enabled": true,
						"refresh_rate_ms": 100,
						"retention_count": 100
					},
					"insights_options": {
						"data_dir": "dataDir",
						"log_dir": "logDir"
					},
					"internode_messaging_options": {
						"client_max_connections": 104,
						"client_request_timeout_seconds": 107,
						"client_worker_threads": 105,
						"frame_length_in_mb": 101,
						"handshake_timeout_seconds": 106,
						"port": 100,
						"server_acceptor_threads": 102,
						"server_worker_threads": 103
					},
				   	"kerberos_options": {
						"http_principal": "http-principal",
						"keytab": "/mnt/dir",
						"qop": "auth",
						"service_principal": "service-principal"
				   	},
					"kmip_hosts": {
						"group1": {
							"hosts": "host1,host2"
						}
					},
				   	"ldap_options": {
						"all_parent_groups_memberof_attribute": "all.parent.groups.member.of.attribute",
						"all_parent_groups_search_filter": "all.parent.groups.search.filter",
						"all_parent_groups_search_type": "all.parent.groups.search.type",
						"connection_pool": {
							"max_active": 10,
							"max_idle": 20
						},
						"credentials_validity_in_ms": 1000,
        	            "dns_service_discovery": {
        	            	"fqdn": "fqdn",
        	            	"lookup_timeout_ms": 1000,
        	            	"polling_interval_ms": 1002,
        	            	"retention_duration_ms": 1001
						},
						"extra_group_search_bases": ["group.search.base.1","group.search.base.2"],
						"extra_user_search_bases": ["user.search.base.1","user.search.base.2"],
						"group_name_attribute": "group.name.attribute",
						"group_search_base": "group.search.base",
						"group_search_filter": "group.search.filter",
						"group_search_type": "group.search.type",
						"groups_update_interval_in_ms": 1004,
						"groups_validity_in_ms": 1003,
						"hostname_verification": true,
						"search_dn": "search.dn",
						"search_password": "search.password",
						"search_validity_in_seconds": 1000,
						"server_host": "ldap.server.host",
						"server_port": 389,
						"ssl_protocol": "TLSv1.2",
						"truststore_password": "truststore.password",
						"truststore_path": "/mnt/dir/truststore.jks",
						"truststore_type": "JKS",
						"use_ssl": true,
						"use_tls": true,
						"user_memberof_attribute": "user.member.of.attribute",
						"user_search_base": "user.search.base",
						"user_search_filter": "user.search.filter"
				   	},
					"lease_metrics_options": {
						"enabled": true,
						"ttl_seconds": 100
					},
					"load_max_time_per_core": 102,
					"max_memory_to_lock_fraction": 0.2,
					"max_memory_to_lock_mb": 1024,
					"node_health_options": {
						"dropped_mutation_window_minutes": 10,
						"refresh_rate_ms": 1000,
						"uptime_ramp_up_period_seconds": 100
					},
					"performance_core_threads": 100,
					"performance_max_threads": 101,
					"performance_queue_capacity": 102,
					"ram_buffer_heap_space_in_mb": 103,
					"ram_buffer_offheap_space_in_mb": 104,
					"resource_level_latency_tracking_options": {
						"enabled": true,
						"refresh_rate_ms": 100
					},
					"resource_manager_options": {
						"worker_options": {
							"cores_total": 1,
							"memory_total": 0.8,
        	            	"workpools": [
        	            		{
		        	            	"cores": 1,
        			            	"memory": 1.0,
        	    		        	"name": "workpool1"
        	            		}
        	            	]
						}
					},
				   	"role_management_options": {
						"mode": "internal",
						"mode_by_authentication": {
							"internal": "internal",
							"kerberos": "internal",
							"ldap": "internal"
        	            },
						"stats": true
				   	},
					"server_id": "server-id",
					"shard_transport_options": {
						"netty_client_request_timeout": 100
					},
					"solr_cache_stats_options": {
						"enabled": true,
						"refresh_rate_ms": 103,
						"ttl_seconds": 103
					},
					"solr_data_dir": "data.dir",
					"solr_encryption_options": {
						"decryption_cache_offheap_allocation": true,
						"decryption_cache_size_in_mb": 1024
					},
					"solr_field_cache_enabled": true,
					"solr_index_stats_options": {
						"enabled": true,
						"refresh_rate_ms": 102,
						"ttl_seconds": 102
					},
					"solr_latency_snapshot_options": {
						"enabled": true,
						"refresh_rate_ms": 104,
						"ttl_seconds": 104
					},
					"solr_request_handler_metrics_options": {
						"enabled": true,
						"refresh_rate_ms": 101,
						"ttl_seconds": 101
					},
					"solr_resource_upload_limit_mb": 105,
					"solr_slow_sub_query_log_options": {
						"async_writers": 101,
						"enabled": true,
						"threshold_ms": 102,
						"ttl_seconds": 100
					},
					"solr_update_handler_metrics_options": {
						"enabled": true,
						"refresh_rate_ms": 100,
						"ttl_seconds": 100
					},
					"spark_application_info_options": {
						"driver": {
							"connectorSource": true,
							"jvmSource": true,
							"sink": true,
							"stateSource": true
						},
						"enabled": true,
						"executor": {
							"connectorSource": true,
							"jvmSource": true,
							"sink": true
						},
						"refresh_rate_ms": 100
					},
					"spark_cluster_info_options": {
						"enabled": true,
						"refresh_rate_ms": 100
					},
					"spark_daemon_readiness_assertion_interval": 100,
					"spark_process_runner": {
						"run_as_runner_options": {
							"user_slots": ["user1","user2"]
						},
						"runner_type": "run_as"
					},
					"spark_security_enabled": true,
					"spark_security_encryption_enabled": true,
					"spark_shared_secret_bit_length": 100,
					"spark_ui_options": {
						"encryption": "custom",
						"encryption_options": {
        	            	"algorithm": "algorithm",
        	            	"cipher_suites": "cipherSuites",
        	            	"enabled": true,
        	            	"keystore": "keystore",
        	            	"keystore_password": "keystorePassword",
        	            	"keystore_type": "keystoreType",
        	            	"protocol": "protocol",
        	            	"require_client_auth": true,
        	            	"truststore": "truststore",
        	            	"truststore_password": "truststorePassword",
        	            	"truststore_type": "truststoreType"
						}
					},
					"system_info_encryption": {
						"chunk_length_kb": 129,
						"cipher_algorithm": "cipher.algorithm",
						"enabled": true,
						"key_provider": "key.provider",
						"kmip_host": "kmip.host",
						"secret_key_strength": 128
					},
					"system_key_directory": "system.key.directory",
					"tiered_storage_options": {
						"option1": {
							"local_options": {
								"localOption1": "localValue1",
								"localOption2": "localValue2"
							},
							"tiers": [
								{
									"paths": ["path1","path2"]
								}
							]
						}
					},
					"ttl_index_rebuild_options": {
						"fixed_rate_period": 100,
						"initial_delay": 101,
						"max_docs_per_batch": 102,
						"thread_pool_size": 103
					},
					"user_level_latency_tracking_options": {
						"enabled": true,
						"quantiles": true,
						"refresh_rate_ms": 100,
						"top_stats_limit": 100
					}
				},
				"jvm-server-options":{
					"agent_lib_jdwp":true,
					"always_pre_touch":true,
					"cassandra_available_processors":123,
					"cassandra_disable_auth_caches_remote_configuration":true,
					"cassandra_expiration_date_overflow_policy":"REJECT",
					"cassandra_force_default_indexing_page_size":true,
					"cassandra_max_hint_ttl":1000,
					"cassandra_metrics_reporter_config_file":"/mnt/dir",
					"cassandra_ring_delay_ms":456,
					"cassandra_triggers_dir":"/mnt/dir",
					"cassandra_write_survey":true,
					"crash_on_out_of_memory_error":true,
					"debug-non-safepoints":true,
					"enable_assertions":true,
					"exit_on_out_of_memory_error":true,
					"flight_recorder":true,
					"guaranteed-safepoint-interval":1000,
					"heap_dump_on_out_of_memory_error":true,
					"initial_heap_size":1073741824,
					"io_netty_eventloop_maxpendingtasks":123,
					"java_net_prefer_ipv4_stack":true,
					"jdk_nio_maxcachedbuffersize":1048576,
					"jmx-connection-type":"local-no-auth",
					"jmx-port":7199,
					"jmx-remote-ssl":true,
					"jmx-remote-ssl-opts":"-Dopt=value",
					"jmx-remote-ssl-require-client-auth":true,
					"log_compilation":true,
					"max_heap_size":4294967296,
					"page-align-direct-memory":true,
					"per_thread_stack_size":1073741824,
					"perf_disable_shared_mem":true,
					"preserve-frame-pointer":true,
					"print_heap_histogram_on_out_of_memory_error":true,
					"resize_tlb":true,
					"restrict-contended":true,
					"string_table_size":1073741824,
					"unlock-diagnostic-vm-options":true,
					"unlock_commercial_features":true,
					"use-biased-locking":true,
					"use_numa":true,
					"use_thread_priorities":true,
					"use_tlb":true
				},
				"jvm11-server-options":{
					"conc_gc_threads":4,
					"garbage_collector":"G1GC",
					"g1r_set_updating_pause_time_percent":60,
					"initiating_heap_occupancy_percent":85,
					"io_netty_try_reflection_set_accessible":true,
					"jdk_attach_allow_attach_self":true,
					"max_gc_pause_millis":1000,
					"parallel_gc_threads":8
				},
				"cassandra-env-sh":{
					"additional-jvm-opts":[
						"-Dadditional.option.1=true",
						"-Dadditional.option.2=42"
					]
				}
		   }`,
		},
		{
			// 4.1 will also include options that currently only exist in Cassandra trunk
			name: "[4.1.0] all options",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.1.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						AllocateTokensForKeyspace:               pointer.String("system_auth"),
						AllocateTokensForLocalReplicationFactor: pointer.Int(3),
						AuditLoggingOptions: &api.AuditLogOptions{
							Enabled: false,
						},
						AuthReadConsistencyLevel:         pointer.String("ONE"),
						AuthWriteConsistencyLevel:        pointer.String("ONE"),
						Authenticator:                    pointer.String("FakeAuthenticator"),
						Authorizer:                       pointer.String("FakeAuthorizer"),
						AutoHintsCleanupEnabled:          pointer.Bool(true),
						AutoOptimiseFullRepairStreams:    pointer.Bool(false),
						AutoOptimiseIncRepairStreams:     pointer.Bool(true),
						AutoOptimisePreviewRepairStreams: pointer.Bool(false),
						AutoSnapshot:                     pointer.Bool(true),
						AutocompactionOnStartupEnabled:   pointer.Bool(false),
						AutomaticSstableUpgrade:          pointer.Bool(true),
						AvailableProcessors:              pointer.Int(17),
						BackPressureEnabled:              pointer.Bool(true),
						BackPressureStrategy: &api.ParameterizedClass{
							ClassName: "FakeBackPressureStrategy",
						},
						BatchSizeFailThresholdInKb:            pointer.Int(20),
						BatchSizeWarnThresholdInKb:            pointer.Int(21),
						BatchlogReplayThrottleInKb:            pointer.Int(22),
						BlockForPeersInRemoteDcs:              pointer.Bool(false),
						BlockForPeersTimeoutInSecs:            pointer.Int(24),
						BufferPoolUseHeapIfExhausted:          pointer.Bool(false),
						CasContentionTimeoutInMs:              pointer.Int(28),
						CdcEnabled:                            pointer.Bool(false),
						CdcFreeSpaceCheckIntervalMs:           pointer.Int(30),
						CdcRawDirectory:                       pointer.String("FakeCdcRawDirectory"),
						CdcTotalSpaceInMb:                     pointer.Int(32),
						CheckForDuplicateRowsDuringCompaction: pointer.Bool(false),
						CheckForDuplicateRowsDuringReads:      pointer.Bool(true),
						ClientErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						ColumnIndexCacheSizeInKb: pointer.Int(38),
						ColumnIndexSizeInKb:      pointer.Int(39),
						CommitlogCompression: &api.ParameterizedClass{
							ClassName: "FakeCommitlogCompression",
						},
						CommitlogMaxCompressionBuffersInPool:       pointer.Int(43),
						CommitlogPeriodicQueueSize:                 pointer.Int(44),
						CommitlogSegmentSizeInMb:                   pointer.Int(45),
						CommitlogSync:                              pointer.String("periodic"),
						CommitlogSyncPeriodInMs:                    pointer.Int(49),
						CommitlogTotalSpaceInMb:                    pointer.Int(50),
						CompactionLargePartitionWarningThresholdMb: pointer.Int(51),
						CompactionThroughputMbPerSec:               pointer.Int(52),
						CompactionTombstoneWarningThreshold:        pointer.Int(53),
						ConcurrentCompactors:                       pointer.Int(54),
						ConcurrentCounterWrites:                    pointer.Int(55),
						ConcurrentMaterializedViewBuilders:         pointer.Int(56),
						ConcurrentMaterializedViewWrites:           pointer.Int(57),
						ConcurrentReads:                            pointer.Int(58),
						ConcurrentReplicates:                       pointer.Int(59),
						ConcurrentValidations:                      pointer.Int(60),
						ConcurrentWrites:                           pointer.Int(61),
						ConsecutiveMessageErrorsThreshold:          pointer.Int(62),
						CorruptedTombstoneStrategy:                 pointer.String("disabled"),
						CounterCacheKeysToSave:                     pointer.Int(64),
						CounterCacheSavePeriod:                     pointer.Int(65),
						CounterCacheSizeInMb:                       pointer.Int(66),
						CounterWriteRequestTimeoutInMs:             pointer.Int(67),
						CredentialsCacheMaxEntries:                 pointer.Int(68),
						CredentialsUpdateIntervalInMs:              pointer.Int(69),
						CredentialsValidityInMs:                    pointer.Int(70),
						CrossNodeTimeout:                           pointer.Bool(false),
						DefaultKeyspaceRf:                          pointer.Int(73),
						DenylistConsistencyLevel:                   pointer.String("ONE"),
						DenylistInitialLoadRetrySeconds:            pointer.Int(75),
						DenylistMaxKeysPerTable:                    pointer.Int(76),
						DenylistMaxKeysTotal:                       pointer.Int(77),
						DenylistRefreshSeconds:                     pointer.Int(78),
						DiagnosticEventsEnabled:                    pointer.Bool(false),
						DiskAccessMode:                             pointer.String("auto"),
						DiskOptimizationEstimatePercentile:         pointer.String("0.1"),
						DiskOptimizationPageCrossChance:            pointer.String("0.1"),
						DiskOptimizationStrategy:                   pointer.String("ssd"),
						DynamicSnitch:                              pointer.Bool(false),
						DynamicSnitchBadnessThreshold:              pointer.String("86.1"),
						DynamicSnitchResetIntervalInMs:             pointer.Int(87),
						DynamicSnitchUpdateIntervalInMs:            pointer.Int(88),
						EnableDenylistRangeReads:                   pointer.Bool(false),
						EnableDenylistReads:                        pointer.Bool(true),
						EnableDenylistWrites:                       pointer.Bool(false),
						EnableDropCompactStorage:                   pointer.Bool(true),
						EnableMaterializedViews:                    pointer.Bool(false),
						EnablePartitionDenylist:                    pointer.Bool(true),
						EnableSasiIndexes:                          pointer.Bool(false),
						EnableScriptedUserDefinedFunctions:         pointer.Bool(true),
						EnableTransientReplication:                 pointer.Bool(false),
						EnableUserDefinedFunctions:                 pointer.Bool(true),
						EnableUserDefinedFunctionsThreads:          pointer.Bool(false),
						EndpointSnitch:                             pointer.String("FakeEndpointSnitch"),
						FailureDetector:                            pointer.String("FakeFailureDetector"),
						FileCacheEnabled:                           pointer.Bool(true),
						FileCacheRoundUp:                           pointer.Bool(false),
						FileCacheSizeInMb:                          pointer.Int(104),
						FlushCompression:                           pointer.String("none"),
						FullQueryLoggingOptions: &api.FullQueryLoggerOptions{
							LogDir: pointer.String("/tmp"),
							Block:  pointer.Bool(false),
						},
						GcLogThresholdInMs:               pointer.Int(107),
						GcWarnThresholdInMs:              pointer.Int(108),
						HintWindowPersistentEnabled:      pointer.Bool(false),
						HintedHandoffDisabledDatacenters: &[]string{"dc1"},
						HintedHandoffEnabled:             pointer.Bool(false),
						HintedHandoffThrottleInKb:        pointer.Int(112),
						HintsCompression: &api.ParameterizedClass{
							ClassName: "FakeHintsCompression",
						},
						HintsFlushPeriodInMs:                                           pointer.Int(115),
						IdealConsistencyLevel:                                          pointer.String("ONE"),
						IndexInterval:                                                  pointer.Int(118),
						IndexSummaryCapacityInMb:                                       pointer.Int(119),
						IndexSummaryResizeIntervalInMinutes:                            pointer.Int(120),
						InitialRangeTombstoneListAllocationSize:                        pointer.Int(121),
						InterDcStreamThroughputOutboundMegabitsPerSec:                  pointer.Int(123),
						InterDcTcpNodelay:                                              pointer.Bool(true),
						InternodeApplicationReceiveQueueCapacityInBytes:                pointer.Int(125),
						InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes: pointer.Int(126),
						InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes:   pointer.Int(127),
						InternodeApplicationSendQueueCapacityInBytes:                   pointer.Int(128),
						InternodeApplicationSendQueueReserveEndpointCapacityInBytes:    pointer.Int(129),
						InternodeApplicationSendQueueReserveGlobalCapacityInBytes:      pointer.Int(130),
						InternodeAuthenticator:                                         pointer.String("FakeInternodeAuthenticator"),
						InternodeCompression:                                           pointer.String("all"),
						InternodeErrorReportingExclusions: &api.SubnetGroups{
							Subnets: []string{"127.0.0.1", "127.0.0.0/31"},
						},
						InternodeMaxMessageSizeInBytes:                   pointer.Int(134),
						InternodeRecvBuffSizeInBytes:                     pointer.Int(135),
						InternodeSendBuffSizeInBytes:                     pointer.Int(136),
						InternodeSocketReceiveBufferSizeInBytes:          pointer.Int(137),
						InternodeSocketSendBufferSizeInBytes:             pointer.Int(138),
						InternodeStreamingTcpUserTimeoutInMs:             pointer.Int(139),
						InternodeTcpConnectTimeoutInMs:                   pointer.Int(140),
						InternodeTcpUserTimeoutInMs:                      pointer.Int(141),
						KeyCacheKeysToSave:                               pointer.Int(142),
						KeyCacheMigrateDuringCompaction:                  pointer.Bool(false),
						KeyCacheSavePeriod:                               pointer.Int(144),
						KeyCacheSizeInMb:                                 pointer.Int(145),
						KeyspaceCountWarnThreshold:                       pointer.Int(146),
						MaxConcurrentAutomaticSstableUpgrades:            pointer.Int(152),
						MaxHintWindowInMs:                                pointer.Int(153),
						MaxHintsDeliveryThreads:                          pointer.Int(154),
						MaxHintsFileSizeInMb:                             pointer.Int(155),
						MaxMutationSizeInKb:                              pointer.Int(156),
						MaxStreamingRetries:                              pointer.Int(157),
						MaxValueSizeInMb:                                 pointer.Int(158),
						MemtableAllocationType:                           pointer.String("heap_buffers"),
						MemtableCleanupThreshold:                         pointer.String("0.1"),
						MemtableFlushWriters:                             pointer.Int(1),
						MemtableHeapSpaceInMb:                            pointer.Int(162),
						MemtableOffheapSpaceInMb:                         pointer.Int(163),
						MinFreeSpacePerDriveInMb:                         pointer.Int(164),
						MinimumKeyspaceRf:                                pointer.Int(1),
						NativeTransportAllowOlderProtocols:               pointer.Bool(true),
						NativeTransportFlushInBatchesLegacy:              pointer.Bool(false),
						NativeTransportIdleTimeoutInMs:                   pointer.Int(168),
						NativeTransportMaxConcurrentConnections:          pointer.Int(169),
						NativeTransportMaxConcurrentConnectionsPerIp:     pointer.Int(170),
						NativeTransportMaxConcurrentRequestsInBytes:      pointer.Int(171),
						NativeTransportMaxConcurrentRequestsInBytesPerIp: pointer.Int(172),
						NativeTransportMaxFrameSizeInMb:                  pointer.Int(173),
						NativeTransportMaxNegotiableProtocolVersion:      pointer.Int(4),
						NativeTransportMaxRequestsPerSecond:              pointer.Int(175),
						NativeTransportMaxThreads:                        pointer.Int(176),
						NativeTransportRateLimitingEnabled:               pointer.Bool(false),
						NativeTransportReceiveQueueCapacityInBytes:       pointer.Int(180),
						NetworkAuthorizer:                                pointer.String("FakeNetworkAuthorizer"),
						NetworkingCacheSizeInMb:                          pointer.Int(182),
						NumTokens:                                        pointer.Int(183),
						OtcBacklogExpirationIntervalMs:                   pointer.Int(184),
						OtcCoalescingEnoughCoalescedMessages:             pointer.Int(10),
						OtcCoalescingStrategy:                            pointer.String("FakeOtcCoalescingStrategy"),
						OtcCoalescingWindowUs:                            pointer.Int(187),
						PaxosCacheSizeInMb:                               pointer.Int(189),
						PeriodicCommitlogSyncLagBlockInMs:                pointer.Int(190),
						PermissionsCacheMaxEntries:                       pointer.Int(191),
						PermissionsUpdateIntervalInMs:                    pointer.Int(192),
						PermissionsValidityInMs:                          pointer.Int(193),
						PhiConvictThreshold:                              pointer.String("8.1"),
						PreparedStatementsCacheSizeMb:                    pointer.Int(195),
						RangeRequestTimeoutInMs:                          pointer.Int(196),
						RangeTombstoneListGrowthFactor:                   pointer.String("197.1"),
						ReadRequestTimeoutInMs:                           pointer.Int(198),
						RejectRepairCompactionThreshold:                  pointer.Int(199),
						RepairCommandPoolFullStrategy:                    pointer.String("queue"),
						RepairCommandPoolSize:                            pointer.Int(201),
						RepairSessionMaxTreeDepth:                        pointer.Int(202),
						RepairSessionSpaceInMb:                           pointer.Int(203),
						RepairedDataTrackingForPartitionReadsEnabled:     pointer.Bool(true),
						RepairedDataTrackingForRangeReadsEnabled:         pointer.Bool(false),
						ReplicaFilteringProtection: &api.ReplicaFilteringProtectionOptions{
							CachedRowsWarnThreshold: pointer.Int(100),
							CachedRowsFailThreshold: pointer.Int(200),
						},
						ReportUnconfirmedRepairedDataMismatches: pointer.Bool(false),
						RequestScheduler:                        pointer.String("FakeRequestScheduler"),
						RequestSchedulerId:                      pointer.String("keyspace"),
						RequestSchedulerOptions: &api.RequestSchedulerOptions{
							ThrottleLimit: pointer.Int(100),
							DefaultWeight: pointer.Int(200),
						},
						RequestTimeoutInMs:                     pointer.Int(211),
						RoleManager:                            pointer.String("FakeRoleManager"),
						RolesCacheMaxEntries:                   pointer.Int(213),
						RolesUpdateIntervalInMs:                pointer.Int(214),
						RolesValidityInMs:                      pointer.Int(215),
						RowCacheClassName:                      pointer.String("FakeRowCacheClassName"),
						RowCacheKeysToSave:                     pointer.Int(217),
						RowCacheSavePeriod:                     pointer.Int(218),
						RowCacheSizeInMb:                       pointer.Int(219),
						SlowQueryLogTimeoutInMs:                pointer.Int(234),
						SnapshotBeforeCompaction:               pointer.Bool(false),
						SnapshotLinksPerSecond:                 pointer.Int(236),
						SnapshotOnDuplicateRowDetection:        pointer.Bool(false),
						SnapshotOnRepairedDataMismatch:         pointer.Bool(true),
						SstablePreemptiveOpenIntervalInMb:      pointer.Int(240),
						StreamEntireSstables:                   pointer.Bool(true),
						StreamThroughputOutboundMegabitsPerSec: pointer.Int(245),
						StreamingConnectionsPerHost:            pointer.Int(246),
						StreamingKeepAlivePeriodInSecs:         pointer.Int(247),
						StreamingSocketTimeoutInMs:             pointer.Int(248),
						TableCountWarnThreshold:                pointer.Int(249),
						ThriftFramedTransportSizeInMb:          pointer.Int(250),
						ThriftMaxMessageLengthInMb:             pointer.Int(251),
						ThriftPreparedStatementsCacheSizeMb:    pointer.Int(252),
						TombstoneFailureThreshold:              pointer.Int(253),
						TombstoneWarnThreshold:                 pointer.Int(254),
						TracetypeQueryTtl:                      pointer.Int(255),
						TracetypeRepairTtl:                     pointer.Int(256),
						TrackWarnings: &api.TrackWarnings{
							Enabled: false,
						},
						TraverseAuthFromRoot:                       pointer.Bool(false),
						TrickleFsync:                               pointer.Bool(true),
						TrickleFsyncIntervalInKb:                   pointer.Int(261),
						TruncateRequestTimeoutInMs:                 pointer.Int(262),
						UnloggedBatchAcrossPartitionsWarnThreshold: pointer.Int(263),
						UseDeterministicTableId:                    pointer.Bool(true),
						UseOffheapMerkleTrees:                      pointer.Bool(false),
						UserDefinedFunctionFailTimeout:             pointer.Int(20),
						UserDefinedFunctionWarnTimeout:             pointer.Int(10),
						UserFunctionTimeoutPolicy:                  pointer.String("ignore"),
						ValidationPreviewPurgeHeadStartInSec:       pointer.Int(269),
						WindowsTimerInterval:                       pointer.Int(270),
						WriteRequestTimeoutInMs:                    pointer.Int(271),
					},
					JvmOptions: api.JvmOptions{
						AlwaysPreTouch:                       pointer.Bool(true),
						AvailableProcessors:                  pointer.Int(123),
						CmsHeapSizeYoungGeneration:           parseQuantity("128Mi"),
						CmsInitiatingOccupancyFraction:       pointer.Int(80),
						CmsMaxTenuringThreshold:              pointer.Int(90),
						CmsSurvivorRatio:                     pointer.Int(75),
						CmsWaitDurationMs:                    pointer.Int(40),
						CrashOnOutOfMemoryError:              pointer.Bool(true),
						DebugNonSafepoints:                   pointer.Bool(true),
						DisableAuthCachesRemoteConfiguration: pointer.Bool(true),
						DisableBiasedLocking:                 pointer.Bool(true),
						DisableContendedAnnotations:          pointer.Bool(true),
						DisablePerfSharedMem:                 pointer.Bool(true),
						EnableAssertions:                     pointer.Bool(true),
						EnableFlightRecorder:                 pointer.Bool(true),
						EnableNonRootThreadPriority:          pointer.Bool(true),
						EnableThreadPriorities:               pointer.Bool(true),
						ExitOnOutOfMemoryError:               pointer.Bool(true),
						ExpirationDateOverflowPolicy:         pointer.String("REJECT"),
						Force30ProtocolVersion:               pointer.Bool(true),
						ForceDefaultIndexingPageSize:         pointer.Bool(true),
						G1ConcGcThreads:                      pointer.Int(4),
						G1InitiatingHeapOccupancyPercent:     pointer.Int(85),
						G1MaxGcPauseMs:                       pointer.Int(1000),
						G1ParallelGcThreads:                  pointer.Int(8),
						G1RSetUpdatingPauseTimePercent:       pointer.Int(60),
						GarbageCollector:                     "G1GC",
						GuaranteedSafepointIntervalMs:        pointer.Int(1000),
						HeapDumpOnOutOfMemoryError:           pointer.Bool(true),
						InitialHeapSize:                      parseQuantity("1Gi"),
						JdkAllowAttachSelf:                   pointer.Bool(true),
						JmxConnectionType:                    pointer.String("local-no-auth"),
						JmxPort:                              pointer.Int(7199),
						JmxRemoteSsl:                         pointer.Bool(true),
						JmxRemoteSslOpts:                     pointer.String("-Dopt=value"),
						JmxRemoteSslRequireClientAuth:        pointer.Bool(true),
						ListenForRemoteDebuggers:             pointer.Bool(true),
						LogCompilation:                       pointer.Bool(true),
						LogFileSize:                          parseQuantity("1Gi"),
						MaxHeapSize:                          parseQuantity("4Gi"),
						MaxHintTtlSeconds:                    pointer.Int(1000),
						MetricsReporterConfigFile:            pointer.String("/mnt/dir"),
						NettyEventloopMaxPendingTasks:        pointer.Int(123),
						NettyTryReflectionSetAccessible:      pointer.Bool(true),
						NioAlignDirectMemory:                 pointer.Bool(true),
						NioMaxCachedBufferSize:               parseQuantity("1Mi"),
						NumberOfLogFiles:                     pointer.Int(10),
						PerThreadStackSize:                   parseQuantity("1Gi"),
						PreferIpv4:                           pointer.Bool(true),
						PreserveFramePointer:                 pointer.Bool(true),
						PrintApplicationStoppedTime:          pointer.Bool(true),
						PrintDateStamps:                      pointer.Bool(true),
						PrintDetails:                         pointer.Bool(true),
						PrintFlssStatistics:                  pointer.Bool(true),
						PrintHeap:                            pointer.Bool(true),
						PrintHeapHistogramOnOutOfMemoryError: pointer.Bool(true),
						PrintPromotionFailure:                pointer.Bool(true),
						PrintTenuringDistribution:            pointer.Bool(true),
						ResizeTlab:                           pointer.Bool(true),
						RingDelayMs:                          pointer.Int(456),
						StringTableSize:                      parseQuantity("1Gi"),
						TriggersDirectory:                    pointer.String("/mnt/dir"),
						UnlockCommercialFeatures:             pointer.Bool(true),
						UnlockDiagnosticVmOptions:            pointer.Bool(true),
						UseLogFile:                           pointer.Bool(true),
						UseLogFileRotation:                   pointer.Bool(true),
						UseNuma:                              pointer.Bool(true),
						UseTlab:                              pointer.Bool(true),
						WriteSurvey:                          pointer.Bool(true),
						AdditionalOptions:                    []string{"-Dadditional.option.1=true", "-Dadditional.option.2=42"},
					},
				},
			},
			want: `{
				"cassandra-yaml":{
					"allocate_tokens_for_keyspace":"system_auth",
					"allocate_tokens_for_local_replication_factor":3,
					"audit_logging_options":{
					  "enabled":false
					},
					"auth_read_consistency_level":"ONE",
					"auth_write_consistency_level":"ONE",
					"authenticator":"FakeAuthenticator",
					"authorizer":"FakeAuthorizer",
					"auto_hints_cleanup_enabled":true,
					"auto_optimise_full_repair_streams":false,
					"auto_optimise_inc_repair_streams":true,
					"auto_optimise_preview_repair_streams":false,
					"auto_snapshot":true,
					"autocompaction_on_startup_enabled":false,
					"automatic_sstable_upgrade":true,
					"available_processors":17,
					"back_pressure_enabled":true,
					"back_pressure_strategy":{
					  "class_name":"FakeBackPressureStrategy"
					},
					"batch_size_fail_threshold_in_kb":20,
					"batch_size_warn_threshold_in_kb":21,
					"batchlog_replay_throttle_in_kb":22,
					"block_for_peers_in_remote_dcs":false,
					"block_for_peers_timeout_in_secs":24,
					"buffer_pool_use_heap_if_exhausted":false,
					"cas_contention_timeout_in_ms":28,
					"cdc_enabled":false,
					"cdc_free_space_check_interval_ms":30,
					"cdc_raw_directory":"FakeCdcRawDirectory",
					"cdc_total_space_in_mb":32,
					"check_for_duplicate_rows_during_compaction":false,
					"check_for_duplicate_rows_during_reads":true,
					"client_error_reporting_exclusions":{
					  "subnets":["127.0.0.1", "127.0.0.0/31"]
					},
					"column_index_cache_size_in_kb":38,
					"column_index_size_in_kb":39,
					"commitlog_compression":{
					  "class_name":"FakeCommitlogCompression"
					},
					"commitlog_max_compression_buffers_in_pool":43,
					"commitlog_periodic_queue_size":44,
					"commitlog_segment_size_in_mb":45,
					"commitlog_sync":"periodic",
					"commitlog_sync_period_in_ms":49,
					"commitlog_total_space_in_mb":50,
					"compaction_large_partition_warning_threshold_mb":51,
					"compaction_throughput_mb_per_sec":52,
					"compaction_tombstone_warning_threshold":53,
					"concurrent_compactors":54,
					"concurrent_counter_writes":55,
					"concurrent_materialized_view_builders":56,
					"concurrent_materialized_view_writes":57,
					"concurrent_reads":58,
					"concurrent_replicates":59,
					"concurrent_validations":60,
					"concurrent_writes":61,
					"consecutive_message_errors_threshold":62,
					"corrupted_tombstone_strategy":"disabled",
					"counter_cache_keys_to_save":64,
					"counter_cache_save_period":65,
					"counter_cache_size_in_mb":66,
					"counter_write_request_timeout_in_ms":67,
					"credentials_cache_max_entries":68,
					"credentials_update_interval_in_ms":69,
					"credentials_validity_in_ms":70,
					"cross_node_timeout":false,
					"default_keyspace_rf":73,
					"denylist_consistency_level":"ONE",
					"denylist_initial_load_retry_seconds":75,
					"denylist_max_keys_per_table":76,
					"denylist_max_keys_total":77,
					"denylist_refresh_seconds":78,
					"diagnostic_events_enabled":false,
					"disk_access_mode":"auto",
					"disk_optimization_estimate_percentile":"0.1",
					"disk_optimization_page_cross_chance":"0.1",
					"disk_optimization_strategy":"ssd",
					"dynamic_snitch":false,
					"dynamic_snitch_badness_threshold":"86.1",
					"dynamic_snitch_reset_interval_in_ms":87,
					"dynamic_snitch_update_interval_in_ms":88,
					"enable_denylist_range_reads":false,
					"enable_denylist_reads":true,
					"enable_denylist_writes":false,
					"enable_drop_compact_storage":true,
					"enable_materialized_views":false,
					"enable_partition_denylist":true,
					"enable_sasi_indexes":false,
					"enable_scripted_user_defined_functions":true,
					"enable_transient_replication":false,
					"enable_user_defined_functions":true,
					"enable_user_defined_functions_threads":false,
					"endpoint_snitch":"FakeEndpointSnitch",
					"failure_detector":"FakeFailureDetector",
					"file_cache_enabled":true,
					"file_cache_round_up":false,
					"file_cache_size_in_mb":104,
					"flush_compression":"none",
					"full_query_logging_options":{
					  "block":false,
					  "log_dir":"/tmp"
					},
					"gc_log_threshold_in_ms":107,
					"gc_warn_threshold_in_ms":108,
					"hint_window_persistent_enabled":false,
					"hinted_handoff_disabled_datacenters":[
					  "dc1"
					],
					"hinted_handoff_enabled":false,
					"hinted_handoff_throttle_in_kb":112,
					"hints_compression":{
					  "class_name":"FakeHintsCompression"
					},
					"hints_flush_period_in_ms":115,
					"ideal_consistency_level":"ONE",
					"index_summary_capacity_in_mb":119,
					"index_summary_resize_interval_in_minutes":120,
					"initial_range_tombstone_list_allocation_size":121,
					"inter_dc_stream_throughput_outbound_megabits_per_sec":123,
					"inter_dc_tcp_nodelay":true,
					"internode_application_receive_queue_capacity_in_bytes":125,
					"internode_application_receive_queue_reserve_endpoint_capacity_in_bytes":126,
					"internode_application_receive_queue_reserve_global_capacity_in_bytes":127,
					"internode_application_send_queue_capacity_in_bytes":128,
					"internode_application_send_queue_reserve_endpoint_capacity_in_bytes":129,
					"internode_application_send_queue_reserve_global_capacity_in_bytes":130,
					"internode_authenticator":"FakeInternodeAuthenticator",
					"internode_compression":"all",
					"internode_error_reporting_exclusions":{
					  "subnets":["127.0.0.1", "127.0.0.0/31"]
					},
					"internode_max_message_size_in_bytes":134,
					"internode_socket_receive_buffer_size_in_bytes":137,
					"internode_socket_send_buffer_size_in_bytes":138,
					"internode_streaming_tcp_user_timeout_in_ms":139,
					"internode_tcp_connect_timeout_in_ms":140,
					"internode_tcp_user_timeout_in_ms":141,
					"key_cache_keys_to_save":142,
					"key_cache_migrate_during_compaction":false,
					"key_cache_save_period":144,
					"key_cache_size_in_mb":145,
					"keyspace_count_warn_threshold":146,
					"max_concurrent_automatic_sstable_upgrades":152,
					"max_hint_window_in_ms":153,
					"max_hints_delivery_threads":154,
					"max_hints_file_size_in_mb":155,
					"max_mutation_size_in_kb":156,
					"max_streaming_retries":157,
					"max_value_size_in_mb":158,
					"memtable_allocation_type":"heap_buffers",
					"memtable_cleanup_threshold":"0.1",
					"memtable_flush_writers":1,
					"memtable_heap_space_in_mb":162,
					"memtable_offheap_space_in_mb":163,
					"min_free_space_per_drive_in_mb":164,
					"minimum_keyspace_rf":1,
					"native_transport_allow_older_protocols":true,
					"native_transport_flush_in_batches_legacy":false,
					"native_transport_idle_timeout_in_ms":168,
					"native_transport_max_concurrent_connections":169,
					"native_transport_max_concurrent_connections_per_ip":170,
					"native_transport_max_concurrent_requests_in_bytes":171,
					"native_transport_max_concurrent_requests_in_bytes_per_ip":172,
					"native_transport_max_frame_size_in_mb":173,
					"native_transport_max_negotiable_protocol_version":4,
					"native_transport_max_requests_per_second":175,
					"native_transport_max_threads":176,
					"native_transport_rate_limiting_enabled":false,
					"native_transport_receive_queue_capacity_in_bytes":180,
					"network_authorizer":"FakeNetworkAuthorizer",
					"networking_cache_size_in_mb":182,
					"num_tokens":183,
					"otc_coalescing_enough_coalesced_messages":10,
					"otc_coalescing_strategy":"FakeOtcCoalescingStrategy",
					"otc_coalescing_window_us":187,
					"paxos_cache_size_in_mb":189,
					"periodic_commitlog_sync_lag_block_in_ms":190,
					"permissions_cache_max_entries":191,
					"permissions_update_interval_in_ms":192,
					"permissions_validity_in_ms":193,
					"phi_convict_threshold":"8.1",
					"prepared_statements_cache_size_mb":195,
					"range_request_timeout_in_ms":196,
					"range_tombstone_list_growth_factor":"197.1",
					"read_request_timeout_in_ms":198,
					"reject_repair_compaction_threshold":199,
					"repair_command_pool_full_strategy":"queue",
					"repair_command_pool_size":201,
					"repair_session_max_tree_depth":202,
					"repair_session_space_in_mb":203,
					"repaired_data_tracking_for_partition_reads_enabled":true,
					"repaired_data_tracking_for_range_reads_enabled":false,
					"replica_filtering_protection":{
					  "cached_rows_fail_threshold":200,
					  "cached_rows_warn_threshold":100
					},
					"report_unconfirmed_repaired_data_mismatches":false,
					"request_timeout_in_ms":211,
					"role_manager":"FakeRoleManager",
					"roles_cache_max_entries":213,
					"roles_update_interval_in_ms":214,
					"roles_validity_in_ms":215,
					"row_cache_class_name":"FakeRowCacheClassName",
					"row_cache_keys_to_save":217,
					"row_cache_save_period":218,
					"row_cache_size_in_mb":219,
					"slow_query_log_timeout_in_ms":234,
					"snapshot_before_compaction":false,
					"snapshot_links_per_second":236,
					"snapshot_on_duplicate_row_detection":false,
					"snapshot_on_repaired_data_mismatch":true,
					"sstable_preemptive_open_interval_in_mb":240,
					"stream_entire_sstables":true,
					"stream_throughput_outbound_megabits_per_sec":245,
					"streaming_connections_per_host":246,
					"streaming_keep_alive_period_in_secs":247,
					"table_count_warn_threshold":249,
					"tombstone_failure_threshold":253,
					"tombstone_warn_threshold":254,
					"tracetype_query_ttl":255,
					"tracetype_repair_ttl":256,
					"track_warnings":{
					  "enabled":false
					},
					"traverse_auth_from_root":false,
					"trickle_fsync":true,
					"trickle_fsync_interval_in_kb":261,
					"truncate_request_timeout_in_ms":262,
					"unlogged_batch_across_partitions_warn_threshold":263,
					"use_deterministic_table_id":true,
					"use_offheap_merkle_trees":false,
					"user_defined_function_fail_timeout":20,
					"user_defined_function_warn_timeout":10,
					"user_function_timeout_policy":"ignore",
					"validation_preview_purge_head_start_in_sec":269,
					"windows_timer_interval":270,
					"write_request_timeout_in_ms":271
			    },
                "jvm-server-options":{
					"agent_lib_jdwp":true,
					"always_pre_touch":true,
					"cassandra_available_processors":123,
					"cassandra_disable_auth_caches_remote_configuration":true,
					"cassandra_expiration_date_overflow_policy":"REJECT",
					"cassandra_force_default_indexing_page_size":true,
					"cassandra_max_hint_ttl":1000,
					"cassandra_metrics_reporter_config_file":"/mnt/dir",
					"cassandra_ring_delay_ms":456,
					"cassandra_triggers_dir":"/mnt/dir",
					"cassandra_write_survey":true,
					"crash_on_out_of_memory_error":true,
					"debug-non-safepoints":true,
					"enable_assertions":true,
					"exit_on_out_of_memory_error":true,
					"flight_recorder":true,
					"guaranteed-safepoint-interval":1000,
					"heap_dump_on_out_of_memory_error":true,
					"initial_heap_size":1073741824,
					"io_netty_eventloop_maxpendingtasks":123,
					"java_net_prefer_ipv4_stack":true,
					"jdk_nio_maxcachedbuffersize":1048576,
					"jmx-connection-type":"local-no-auth",
					"jmx-port":7199,
					"jmx-remote-ssl":true,
					"jmx-remote-ssl-opts":"-Dopt=value",
					"jmx-remote-ssl-require-client-auth":true,
					"log_compilation":true,
					"max_heap_size":4294967296,
					"page-align-direct-memory":true,
					"per_thread_stack_size":1073741824,
					"perf_disable_shared_mem":true,
					"preserve-frame-pointer":true,
					"print_heap_histogram_on_out_of_memory_error":true,
					"resize_tlb":true,
					"restrict-contended":true,
					"string_table_size":1073741824,
					"unlock-diagnostic-vm-options":true,
					"unlock_commercial_features":true,
					"use-biased-locking":true,
					"use_numa":true,
					"use_thread_priorities":true,
					"use_tlb":true
				},
				"jvm11-server-options":{
					"conc_gc_threads":4,
					"garbage_collector":"G1GC",
                    "g1r_set_updating_pause_time_percent":60,
					"initiating_heap_occupancy_percent":85,
					"io_netty_try_reflection_set_accessible":true,
					"jdk_attach_allow_attach_self":true,
					"max_gc_pause_millis":1000,
					"parallel_gc_threads":8
				},
				"cassandra-env-sh":{
					"additional-jvm-opts":[
						"-Dadditional.option.1=true",
						"-Dadditional.option.2=42"
					]
				}
		   }`,
		},
		{
			name: "[4.0.0] encryption",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					CassandraYaml: api.CassandraYaml{
						ClientEncryptionOptions: &encryption.ClientEncryptionOptions{
							Enabled: true,
						},
						ServerEncryptionOptions: &encryption.ServerEncryptionOptions{
							InternodeEncryption: "all",
						},
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16,
                "client_encryption_options": {
					"enabled": true,
					"keystore": "/mnt/client-keystore/keystore",
					"truststore": "/mnt/client-truststore/truststore"
				},
				"server_encryption_options": {
					"internode_encryption": "all",
					"keystore": "/mnt/server-keystore/keystore",
					"truststore": "/mnt/server-truststore/truststore"
				}
              }
            }`,
		},
		{
			name: "[3.11.11] GC",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("3.11.11"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						GarbageCollector: "G1GC",
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 256,
                "start_rpc": false
              },
              "jvm-options": {
                "garbage_collector": "G1GC"
              }
            }`,
		},
		{
			name: "[4.0.0] GC",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("4.0.0"),
				ServerType:    "cassandra",
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						GarbageCollector: "ZGC",
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16
              },
              "jvm11-server-options": {
                "garbage_collector": "ZGC"
              }
            }`,
		},
		{
			name: "[DSE 6.8.25] simple",
			config: DatacenterConfig{
				ServerVersion: semver.MustParse("6.8.25"),
				ServerType:    "dse",
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						GarbageCollector: "ZGC",
					},
					DseYaml: api.DseYaml{
						AuthenticationOptions: &api.AuthenticationOptions{
							Enabled: pointer.Bool(true),
						},
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16
              },
              "jvm11-server-options": {
                "garbage_collector": "ZGC"
              },
              "dse-yaml": {
                "authentication_options": {
				  "enabled": true
                }
              }
            }`,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			var err error
			tc.got, err = CreateJsonConfig(&tc.config)
			require.NoError(t, err, "failed to create json dcConfig")
			expected, err := gabs.ParseJSON([]byte(tc.want))
			require.NoError(t, err, "failed to parse expected value")
			actual, err := gabs.ParseJSON(tc.got)
			require.NoError(t, err, "failed to parse actual value")
			assert.Equal(t, expected, actual)
		})
	}

}

func parseQuantity(quantity string) *resource.Quantity {
	parsed := resource.MustParse(quantity)
	return &parsed
}
