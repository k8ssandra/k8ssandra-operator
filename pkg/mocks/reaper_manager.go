// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	k8ssandrav1alpha1 "github.com/k8ssandra/k8ssandra-operator/apis/k8ssandra/v1alpha1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/k8ssandra/k8ssandra-operator/apis/reaper/v1alpha1"

	v1beta1 "github.com/k8ssandra/cass-operator/apis/cassandra/v1beta1"
)

// ReaperManager is an autogenerated mock type for the Manager type
type ReaperManager struct {
	mock.Mock
}

// AddClusterToReaper provides a mock function with given fields: ctx, cassdc
func (_m *ReaperManager) AddClusterToReaper(ctx context.Context, cassdc *v1beta1.CassandraDatacenter) error {
	ret := _m.Called(ctx, cassdc)

	if len(ret) == 0 {
		panic("no return value specified for AddClusterToReaper")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.CassandraDatacenter) error); ok {
		r0 = rf(ctx, cassdc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: ctx, _a1, username, password
func (_m *ReaperManager) Connect(ctx context.Context, _a1 *v1alpha1.Reaper, username string, password string) error {
	ret := _m.Called(ctx, _a1, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Reaper, string, string) error); ok {
		r0 = rf(ctx, _a1, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectWithReaperRef provides a mock function with given fields: ctx, kc, username, password
func (_m *ReaperManager) ConnectWithReaperRef(ctx context.Context, kc *k8ssandrav1alpha1.K8ssandraCluster, username string, password string) error {
	ret := _m.Called(ctx, kc, username, password)

	if len(ret) == 0 {
		panic("no return value specified for ConnectWithReaperRef")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *k8ssandrav1alpha1.K8ssandraCluster, string, string) error); ok {
		r0 = rf(ctx, kc, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUiCredentials provides a mock function with given fields: ctx, uiUserSecretRef, namespace
func (_m *ReaperManager) GetUiCredentials(ctx context.Context, uiUserSecretRef *v1.LocalObjectReference, namespace string) (string, string, error) {
	ret := _m.Called(ctx, uiUserSecretRef, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetUiCredentials")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LocalObjectReference, string) (string, string, error)); ok {
		return rf(ctx, uiUserSecretRef, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LocalObjectReference, string) string); ok {
		r0 = rf(ctx, uiUserSecretRef, namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.LocalObjectReference, string) string); ok {
		r1 = rf(ctx, uiUserSecretRef, namespace)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1.LocalObjectReference, string) error); ok {
		r2 = rf(ctx, uiUserSecretRef, namespace)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetK8sClient provides a mock function with given fields: _a0
func (_m *ReaperManager) SetK8sClient(_a0 client.Reader) {
	_m.Called(_a0)
}

// VerifyClusterIsConfigured provides a mock function with given fields: ctx, cassdc
func (_m *ReaperManager) VerifyClusterIsConfigured(ctx context.Context, cassdc *v1beta1.CassandraDatacenter) (bool, error) {
	ret := _m.Called(ctx, cassdc)

	if len(ret) == 0 {
		panic("no return value specified for VerifyClusterIsConfigured")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.CassandraDatacenter) (bool, error)); ok {
		return rf(ctx, cassdc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.CassandraDatacenter) bool); ok {
		r0 = rf(ctx, cassdc)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.CassandraDatacenter) error); ok {
		r1 = rf(ctx, cassdc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReaperManager creates a new instance of ReaperManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReaperManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReaperManager {
	mock := &ReaperManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
