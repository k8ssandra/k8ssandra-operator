//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/k8ssandra/cass-operator/apis/cassandra/v1beta1"
	medusav1alpha1 "github.com/k8ssandra/k8ssandra-operator/apis/medusa/v1alpha1"
	reaperv1alpha1 "github.com/k8ssandra/k8ssandra-operator/apis/reaper/v1alpha1"
	stargatev1alpha1 "github.com/k8ssandra/k8ssandra-operator/apis/stargate/v1alpha1"
	telemetryv1alpha1 "github.com/k8ssandra/k8ssandra-operator/apis/telemetry/v1alpha1"
	"github.com/k8ssandra/k8ssandra-operator/pkg/encryption"
	"github.com/k8ssandra/k8ssandra-operator/pkg/images"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdvancedReplicationOptions) DeepCopyInto(out *AdvancedReplicationOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ConfDriverPasswordEncryptionEnabled != nil {
		in, out := &in.ConfDriverPasswordEncryptionEnabled, &out.ConfDriverPasswordEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AdvancedReplicationDirectory != nil {
		in, out := &in.AdvancedReplicationDirectory, &out.AdvancedReplicationDirectory
		*out = new(string)
		**out = **in
	}
	if in.SecurityBasePath != nil {
		in, out := &in.SecurityBasePath, &out.SecurityBasePath
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdvancedReplicationOptions.
func (in *AdvancedReplicationOptions) DeepCopy() *AdvancedReplicationOptions {
	if in == nil {
		return nil
	}
	out := new(AdvancedReplicationOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AlwaysOnSqlOptions) DeepCopyInto(out *AlwaysOnSqlOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ThriftPort != nil {
		in, out := &in.ThriftPort, &out.ThriftPort
		*out = new(int)
		**out = **in
	}
	if in.WebUIPort != nil {
		in, out := &in.WebUIPort, &out.WebUIPort
		*out = new(int)
		**out = **in
	}
	if in.ReservePortWaitTimeMs != nil {
		in, out := &in.ReservePortWaitTimeMs, &out.ReservePortWaitTimeMs
		*out = new(int)
		**out = **in
	}
	if in.StatusCheckWaitTimeMs != nil {
		in, out := &in.StatusCheckWaitTimeMs, &out.StatusCheckWaitTimeMs
		*out = new(int)
		**out = **in
	}
	if in.Workpool != nil {
		in, out := &in.Workpool, &out.Workpool
		*out = new(string)
		**out = **in
	}
	if in.LogDsefsDir != nil {
		in, out := &in.LogDsefsDir, &out.LogDsefsDir
		*out = new(string)
		**out = **in
	}
	if in.AuthUser != nil {
		in, out := &in.AuthUser, &out.AuthUser
		*out = new(string)
		**out = **in
	}
	if in.RunnerMaxErrors != nil {
		in, out := &in.RunnerMaxErrors, &out.RunnerMaxErrors
		*out = new(int)
		**out = **in
	}
	if in.HeartbeatUpdateIntervalSeconds != nil {
		in, out := &in.HeartbeatUpdateIntervalSeconds, &out.HeartbeatUpdateIntervalSeconds
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AlwaysOnSqlOptions.
func (in *AlwaysOnSqlOptions) DeepCopy() *AlwaysOnSqlOptions {
	if in == nil {
		return nil
	}
	out := new(AlwaysOnSqlOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnalyticsOptions) DeepCopyInto(out *AnalyticsOptions) {
	*out = *in
	if in.SparkSharedSecretBitLength != nil {
		in, out := &in.SparkSharedSecretBitLength, &out.SparkSharedSecretBitLength
		*out = new(int)
		**out = **in
	}
	if in.SparkSecurityEnabled != nil {
		in, out := &in.SparkSecurityEnabled, &out.SparkSecurityEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SparkSecurityEncryptionEnabled != nil {
		in, out := &in.SparkSecurityEncryptionEnabled, &out.SparkSecurityEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SparkDaemonReadinessAssertionIntervalMs != nil {
		in, out := &in.SparkDaemonReadinessAssertionIntervalMs, &out.SparkDaemonReadinessAssertionIntervalMs
		*out = new(int)
		**out = **in
	}
	if in.ResourceManagerOptions != nil {
		in, out := &in.ResourceManagerOptions, &out.ResourceManagerOptions
		*out = new(SparkResourceManagerOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkUiOptions != nil {
		in, out := &in.SparkUiOptions, &out.SparkUiOptions
		*out = new(SparkUiOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkProcessRunner != nil {
		in, out := &in.SparkProcessRunner, &out.SparkProcessRunner
		*out = new(SparkProcessRunner)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnalyticsOptions.
func (in *AnalyticsOptions) DeepCopy() *AnalyticsOptions {
	if in == nil {
		return nil
	}
	out := new(AnalyticsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogOptions) DeepCopyInto(out *AuditLogOptions) {
	*out = *in
	if in.Logger != nil {
		in, out := &in.Logger, &out.Logger
		*out = new(ParameterizedClass)
		(*in).DeepCopyInto(*out)
	}
	if in.IncludedKeyspaces != nil {
		in, out := &in.IncludedKeyspaces, &out.IncludedKeyspaces
		*out = new(string)
		**out = **in
	}
	if in.ExcludedKeyspaces != nil {
		in, out := &in.ExcludedKeyspaces, &out.ExcludedKeyspaces
		*out = new(string)
		**out = **in
	}
	if in.IncludedCategories != nil {
		in, out := &in.IncludedCategories, &out.IncludedCategories
		*out = new(string)
		**out = **in
	}
	if in.ExcludedCategories != nil {
		in, out := &in.ExcludedCategories, &out.ExcludedCategories
		*out = new(string)
		**out = **in
	}
	if in.IncludedUsers != nil {
		in, out := &in.IncludedUsers, &out.IncludedUsers
		*out = new(string)
		**out = **in
	}
	if in.ExcludedUsers != nil {
		in, out := &in.ExcludedUsers, &out.ExcludedUsers
		*out = new(string)
		**out = **in
	}
	if in.RollCycle != nil {
		in, out := &in.RollCycle, &out.RollCycle
		*out = new(string)
		**out = **in
	}
	if in.Block != nil {
		in, out := &in.Block, &out.Block
		*out = new(bool)
		**out = **in
	}
	if in.MaxQueueWeight != nil {
		in, out := &in.MaxQueueWeight, &out.MaxQueueWeight
		*out = new(int)
		**out = **in
	}
	if in.MaxLogSize != nil {
		in, out := &in.MaxLogSize, &out.MaxLogSize
		*out = new(int)
		**out = **in
	}
	if in.ArchiveCommand != nil {
		in, out := &in.ArchiveCommand, &out.ArchiveCommand
		*out = new(string)
		**out = **in
	}
	if in.MaxArchiveRetries != nil {
		in, out := &in.MaxArchiveRetries, &out.MaxArchiveRetries
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogOptions.
func (in *AuditLogOptions) DeepCopy() *AuditLogOptions {
	if in == nil {
		return nil
	}
	out := new(AuditLogOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLoggingOptions) DeepCopyInto(out *AuditLoggingOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Logger != nil {
		in, out := &in.Logger, &out.Logger
		*out = new(string)
		**out = **in
	}
	if in.IncludedCategories != nil {
		in, out := &in.IncludedCategories, &out.IncludedCategories
		*out = new(string)
		**out = **in
	}
	if in.ExcludedCategories != nil {
		in, out := &in.ExcludedCategories, &out.ExcludedCategories
		*out = new(string)
		**out = **in
	}
	if in.IncludedKeyspaces != nil {
		in, out := &in.IncludedKeyspaces, &out.IncludedKeyspaces
		*out = new(string)
		**out = **in
	}
	if in.ExcludedKeyspaces != nil {
		in, out := &in.ExcludedKeyspaces, &out.ExcludedKeyspaces
		*out = new(string)
		**out = **in
	}
	if in.IncludedRoles != nil {
		in, out := &in.IncludedRoles, &out.IncludedRoles
		*out = new(string)
		**out = **in
	}
	if in.ExcludedRoles != nil {
		in, out := &in.ExcludedRoles, &out.ExcludedRoles
		*out = new(string)
		**out = **in
	}
	if in.AuditLoggingRetentionTimeHours != nil {
		in, out := &in.AuditLoggingRetentionTimeHours, &out.AuditLoggingRetentionTimeHours
		*out = new(int)
		**out = **in
	}
	if in.CassandraAuditWriterOptions != nil {
		in, out := &in.CassandraAuditWriterOptions, &out.CassandraAuditWriterOptions
		*out = new(CassandraAuditWriterOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLoggingOptions.
func (in *AuditLoggingOptions) DeepCopy() *AuditLoggingOptions {
	if in == nil {
		return nil
	}
	out := new(AuditLoggingOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthenticationOptions) DeepCopyInto(out *AuthenticationOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.DefaultScheme != nil {
		in, out := &in.DefaultScheme, &out.DefaultScheme
		*out = new(string)
		**out = **in
	}
	if in.OtherSchemes != nil {
		in, out := &in.OtherSchemes, &out.OtherSchemes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SchemePermissions != nil {
		in, out := &in.SchemePermissions, &out.SchemePermissions
		*out = new(bool)
		**out = **in
	}
	if in.AllowDigestWithKerberos != nil {
		in, out := &in.AllowDigestWithKerberos, &out.AllowDigestWithKerberos
		*out = new(bool)
		**out = **in
	}
	if in.PlainTextWithoutSsl != nil {
		in, out := &in.PlainTextWithoutSsl, &out.PlainTextWithoutSsl
		*out = new(string)
		**out = **in
	}
	if in.TransitionalMode != nil {
		in, out := &in.TransitionalMode, &out.TransitionalMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthenticationOptions.
func (in *AuthenticationOptions) DeepCopy() *AuthenticationOptions {
	if in == nil {
		return nil
	}
	out := new(AuthenticationOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationOptions) DeepCopyInto(out *AuthorizationOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TransitionalMode != nil {
		in, out := &in.TransitionalMode, &out.TransitionalMode
		*out = new(string)
		**out = **in
	}
	if in.AllowRowLevelSecurity != nil {
		in, out := &in.AllowRowLevelSecurity, &out.AllowRowLevelSecurity
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationOptions.
func (in *AuthorizationOptions) DeepCopy() *AuthorizationOptions {
	if in == nil {
		return nil
	}
	out := new(AuthorizationOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CassandraAuditWriterOptions) DeepCopyInto(out *CassandraAuditWriterOptions) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.BatchSize != nil {
		in, out := &in.BatchSize, &out.BatchSize
		*out = new(int)
		**out = **in
	}
	if in.FlushTimeMs != nil {
		in, out := &in.FlushTimeMs, &out.FlushTimeMs
		*out = new(int)
		**out = **in
	}
	if in.QueueSize != nil {
		in, out := &in.QueueSize, &out.QueueSize
		*out = new(int)
		**out = **in
	}
	if in.WriteConsistency != nil {
		in, out := &in.WriteConsistency, &out.WriteConsistency
		*out = new(string)
		**out = **in
	}
	if in.DroppedEventLog != nil {
		in, out := &in.DroppedEventLog, &out.DroppedEventLog
		*out = new(string)
		**out = **in
	}
	if in.DayPartitionMillis != nil {
		in, out := &in.DayPartitionMillis, &out.DayPartitionMillis
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CassandraAuditWriterOptions.
func (in *CassandraAuditWriterOptions) DeepCopy() *CassandraAuditWriterOptions {
	if in == nil {
		return nil
	}
	out := new(CassandraAuditWriterOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CassandraClusterTemplate) DeepCopyInto(out *CassandraClusterTemplate) {
	*out = *in
	in.DatacenterOptions.DeepCopyInto(&out.DatacenterOptions)
	out.SuperuserSecretRef = in.SuperuserSecretRef
	if in.Datacenters != nil {
		in, out := &in.Datacenters, &out.Datacenters
		*out = make([]CassandraDatacenterTemplate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AdditionalSeeds != nil {
		in, out := &in.AdditionalSeeds, &out.AdditionalSeeds
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ServerEncryptionStores != nil {
		in, out := &in.ServerEncryptionStores, &out.ServerEncryptionStores
		*out = new(encryption.Stores)
		**out = **in
	}
	if in.ClientEncryptionStores != nil {
		in, out := &in.ClientEncryptionStores, &out.ClientEncryptionStores
		*out = new(encryption.Stores)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CassandraClusterTemplate.
func (in *CassandraClusterTemplate) DeepCopy() *CassandraClusterTemplate {
	if in == nil {
		return nil
	}
	out := new(CassandraClusterTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CassandraConfig) DeepCopyInto(out *CassandraConfig) {
	*out = *in
	in.CassandraYaml.DeepCopyInto(&out.CassandraYaml)
	in.JvmOptions.DeepCopyInto(&out.JvmOptions)
	in.DseYaml.DeepCopyInto(&out.DseYaml)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CassandraConfig.
func (in *CassandraConfig) DeepCopy() *CassandraConfig {
	if in == nil {
		return nil
	}
	out := new(CassandraConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CassandraDatacenterTemplate) DeepCopyInto(out *CassandraDatacenterTemplate) {
	*out = *in
	in.Meta.DeepCopyInto(&out.Meta)
	in.DatacenterOptions.DeepCopyInto(&out.DatacenterOptions)
	if in.Stargate != nil {
		in, out := &in.Stargate, &out.Stargate
		*out = new(stargatev1alpha1.StargateDatacenterTemplate)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CassandraDatacenterTemplate.
func (in *CassandraDatacenterTemplate) DeepCopy() *CassandraDatacenterTemplate {
	if in == nil {
		return nil
	}
	out := new(CassandraDatacenterTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CassandraYaml) DeepCopyInto(out *CassandraYaml) {
	*out = *in
	if in.AllocateTokensForKeyspace != nil {
		in, out := &in.AllocateTokensForKeyspace, &out.AllocateTokensForKeyspace
		*out = new(string)
		**out = **in
	}
	if in.AllocateTokensForLocalReplicationFactor != nil {
		in, out := &in.AllocateTokensForLocalReplicationFactor, &out.AllocateTokensForLocalReplicationFactor
		*out = new(int)
		**out = **in
	}
	if in.AuditLoggingOptions != nil {
		in, out := &in.AuditLoggingOptions, &out.AuditLoggingOptions
		*out = new(AuditLogOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthReadConsistencyLevel != nil {
		in, out := &in.AuthReadConsistencyLevel, &out.AuthReadConsistencyLevel
		*out = new(string)
		**out = **in
	}
	if in.AuthWriteConsistencyLevel != nil {
		in, out := &in.AuthWriteConsistencyLevel, &out.AuthWriteConsistencyLevel
		*out = new(string)
		**out = **in
	}
	if in.Authenticator != nil {
		in, out := &in.Authenticator, &out.Authenticator
		*out = new(string)
		**out = **in
	}
	if in.Authorizer != nil {
		in, out := &in.Authorizer, &out.Authorizer
		*out = new(string)
		**out = **in
	}
	if in.AutoHintsCleanupEnabled != nil {
		in, out := &in.AutoHintsCleanupEnabled, &out.AutoHintsCleanupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AutoOptimiseFullRepairStreams != nil {
		in, out := &in.AutoOptimiseFullRepairStreams, &out.AutoOptimiseFullRepairStreams
		*out = new(bool)
		**out = **in
	}
	if in.AutoOptimiseIncRepairStreams != nil {
		in, out := &in.AutoOptimiseIncRepairStreams, &out.AutoOptimiseIncRepairStreams
		*out = new(bool)
		**out = **in
	}
	if in.AutoOptimisePreviewRepairStreams != nil {
		in, out := &in.AutoOptimisePreviewRepairStreams, &out.AutoOptimisePreviewRepairStreams
		*out = new(bool)
		**out = **in
	}
	if in.AutoSnapshot != nil {
		in, out := &in.AutoSnapshot, &out.AutoSnapshot
		*out = new(bool)
		**out = **in
	}
	if in.AutocompactionOnStartupEnabled != nil {
		in, out := &in.AutocompactionOnStartupEnabled, &out.AutocompactionOnStartupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AutomaticSstableUpgrade != nil {
		in, out := &in.AutomaticSstableUpgrade, &out.AutomaticSstableUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.AvailableProcessors != nil {
		in, out := &in.AvailableProcessors, &out.AvailableProcessors
		*out = new(int)
		**out = **in
	}
	if in.BackPressureEnabled != nil {
		in, out := &in.BackPressureEnabled, &out.BackPressureEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BackPressureStrategy != nil {
		in, out := &in.BackPressureStrategy, &out.BackPressureStrategy
		*out = new(ParameterizedClass)
		(*in).DeepCopyInto(*out)
	}
	if in.BatchSizeFailThresholdInKb != nil {
		in, out := &in.BatchSizeFailThresholdInKb, &out.BatchSizeFailThresholdInKb
		*out = new(int)
		**out = **in
	}
	if in.BatchSizeWarnThresholdInKb != nil {
		in, out := &in.BatchSizeWarnThresholdInKb, &out.BatchSizeWarnThresholdInKb
		*out = new(int)
		**out = **in
	}
	if in.BatchlogReplayThrottleInKb != nil {
		in, out := &in.BatchlogReplayThrottleInKb, &out.BatchlogReplayThrottleInKb
		*out = new(int)
		**out = **in
	}
	if in.BlockForPeersInRemoteDcs != nil {
		in, out := &in.BlockForPeersInRemoteDcs, &out.BlockForPeersInRemoteDcs
		*out = new(bool)
		**out = **in
	}
	if in.BlockForPeersTimeoutInSecs != nil {
		in, out := &in.BlockForPeersTimeoutInSecs, &out.BlockForPeersTimeoutInSecs
		*out = new(int)
		**out = **in
	}
	if in.BufferPoolUseHeapIfExhausted != nil {
		in, out := &in.BufferPoolUseHeapIfExhausted, &out.BufferPoolUseHeapIfExhausted
		*out = new(bool)
		**out = **in
	}
	if in.CasContentionTimeoutInMs != nil {
		in, out := &in.CasContentionTimeoutInMs, &out.CasContentionTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.CdcEnabled != nil {
		in, out := &in.CdcEnabled, &out.CdcEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CdcFreeSpaceCheckIntervalMs != nil {
		in, out := &in.CdcFreeSpaceCheckIntervalMs, &out.CdcFreeSpaceCheckIntervalMs
		*out = new(int)
		**out = **in
	}
	if in.CdcRawDirectory != nil {
		in, out := &in.CdcRawDirectory, &out.CdcRawDirectory
		*out = new(string)
		**out = **in
	}
	if in.CdcTotalSpaceInMb != nil {
		in, out := &in.CdcTotalSpaceInMb, &out.CdcTotalSpaceInMb
		*out = new(int)
		**out = **in
	}
	if in.CheckForDuplicateRowsDuringCompaction != nil {
		in, out := &in.CheckForDuplicateRowsDuringCompaction, &out.CheckForDuplicateRowsDuringCompaction
		*out = new(bool)
		**out = **in
	}
	if in.CheckForDuplicateRowsDuringReads != nil {
		in, out := &in.CheckForDuplicateRowsDuringReads, &out.CheckForDuplicateRowsDuringReads
		*out = new(bool)
		**out = **in
	}
	if in.ClientEncryptionOptions != nil {
		in, out := &in.ClientEncryptionOptions, &out.ClientEncryptionOptions
		*out = new(encryption.ClientEncryptionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientErrorReportingExclusions != nil {
		in, out := &in.ClientErrorReportingExclusions, &out.ClientErrorReportingExclusions
		*out = new(SubnetGroups)
		(*in).DeepCopyInto(*out)
	}
	if in.ColumnIndexCacheSizeInKb != nil {
		in, out := &in.ColumnIndexCacheSizeInKb, &out.ColumnIndexCacheSizeInKb
		*out = new(int)
		**out = **in
	}
	if in.ColumnIndexSizeInKb != nil {
		in, out := &in.ColumnIndexSizeInKb, &out.ColumnIndexSizeInKb
		*out = new(int)
		**out = **in
	}
	if in.CommitlogCompression != nil {
		in, out := &in.CommitlogCompression, &out.CommitlogCompression
		*out = new(ParameterizedClass)
		(*in).DeepCopyInto(*out)
	}
	if in.CommitlogMaxCompressionBuffersInPool != nil {
		in, out := &in.CommitlogMaxCompressionBuffersInPool, &out.CommitlogMaxCompressionBuffersInPool
		*out = new(int)
		**out = **in
	}
	if in.CommitlogPeriodicQueueSize != nil {
		in, out := &in.CommitlogPeriodicQueueSize, &out.CommitlogPeriodicQueueSize
		*out = new(int)
		**out = **in
	}
	if in.CommitlogSegmentSizeInMb != nil {
		in, out := &in.CommitlogSegmentSizeInMb, &out.CommitlogSegmentSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.CommitlogSync != nil {
		in, out := &in.CommitlogSync, &out.CommitlogSync
		*out = new(string)
		**out = **in
	}
	if in.CommitlogSyncBatchWindowInMs != nil {
		in, out := &in.CommitlogSyncBatchWindowInMs, &out.CommitlogSyncBatchWindowInMs
		*out = new(string)
		**out = **in
	}
	if in.CommitlogSyncGroupWindowInMs != nil {
		in, out := &in.CommitlogSyncGroupWindowInMs, &out.CommitlogSyncGroupWindowInMs
		*out = new(int)
		**out = **in
	}
	if in.CommitlogSyncPeriodInMs != nil {
		in, out := &in.CommitlogSyncPeriodInMs, &out.CommitlogSyncPeriodInMs
		*out = new(int)
		**out = **in
	}
	if in.CommitlogTotalSpaceInMb != nil {
		in, out := &in.CommitlogTotalSpaceInMb, &out.CommitlogTotalSpaceInMb
		*out = new(int)
		**out = **in
	}
	if in.CompactionLargePartitionWarningThresholdMb != nil {
		in, out := &in.CompactionLargePartitionWarningThresholdMb, &out.CompactionLargePartitionWarningThresholdMb
		*out = new(int)
		**out = **in
	}
	if in.CompactionThroughputMbPerSec != nil {
		in, out := &in.CompactionThroughputMbPerSec, &out.CompactionThroughputMbPerSec
		*out = new(int)
		**out = **in
	}
	if in.CompactionTombstoneWarningThreshold != nil {
		in, out := &in.CompactionTombstoneWarningThreshold, &out.CompactionTombstoneWarningThreshold
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentCompactors != nil {
		in, out := &in.ConcurrentCompactors, &out.ConcurrentCompactors
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentCounterWrites != nil {
		in, out := &in.ConcurrentCounterWrites, &out.ConcurrentCounterWrites
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentMaterializedViewBuilders != nil {
		in, out := &in.ConcurrentMaterializedViewBuilders, &out.ConcurrentMaterializedViewBuilders
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentMaterializedViewWrites != nil {
		in, out := &in.ConcurrentMaterializedViewWrites, &out.ConcurrentMaterializedViewWrites
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentReads != nil {
		in, out := &in.ConcurrentReads, &out.ConcurrentReads
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentReplicates != nil {
		in, out := &in.ConcurrentReplicates, &out.ConcurrentReplicates
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentValidations != nil {
		in, out := &in.ConcurrentValidations, &out.ConcurrentValidations
		*out = new(int)
		**out = **in
	}
	if in.ConcurrentWrites != nil {
		in, out := &in.ConcurrentWrites, &out.ConcurrentWrites
		*out = new(int)
		**out = **in
	}
	if in.ConsecutiveMessageErrorsThreshold != nil {
		in, out := &in.ConsecutiveMessageErrorsThreshold, &out.ConsecutiveMessageErrorsThreshold
		*out = new(int)
		**out = **in
	}
	if in.CorruptedTombstoneStrategy != nil {
		in, out := &in.CorruptedTombstoneStrategy, &out.CorruptedTombstoneStrategy
		*out = new(string)
		**out = **in
	}
	if in.CounterCacheKeysToSave != nil {
		in, out := &in.CounterCacheKeysToSave, &out.CounterCacheKeysToSave
		*out = new(int)
		**out = **in
	}
	if in.CounterCacheSavePeriod != nil {
		in, out := &in.CounterCacheSavePeriod, &out.CounterCacheSavePeriod
		*out = new(int)
		**out = **in
	}
	if in.CounterCacheSizeInMb != nil {
		in, out := &in.CounterCacheSizeInMb, &out.CounterCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.CounterWriteRequestTimeoutInMs != nil {
		in, out := &in.CounterWriteRequestTimeoutInMs, &out.CounterWriteRequestTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.CredentialsCacheMaxEntries != nil {
		in, out := &in.CredentialsCacheMaxEntries, &out.CredentialsCacheMaxEntries
		*out = new(int)
		**out = **in
	}
	if in.CredentialsUpdateIntervalInMs != nil {
		in, out := &in.CredentialsUpdateIntervalInMs, &out.CredentialsUpdateIntervalInMs
		*out = new(int)
		**out = **in
	}
	if in.CredentialsValidityInMs != nil {
		in, out := &in.CredentialsValidityInMs, &out.CredentialsValidityInMs
		*out = new(int)
		**out = **in
	}
	if in.CrossNodeTimeout != nil {
		in, out := &in.CrossNodeTimeout, &out.CrossNodeTimeout
		*out = new(bool)
		**out = **in
	}
	if in.DefaultKeyspaceRf != nil {
		in, out := &in.DefaultKeyspaceRf, &out.DefaultKeyspaceRf
		*out = new(int)
		**out = **in
	}
	if in.DenylistConsistencyLevel != nil {
		in, out := &in.DenylistConsistencyLevel, &out.DenylistConsistencyLevel
		*out = new(string)
		**out = **in
	}
	if in.DenylistInitialLoadRetrySeconds != nil {
		in, out := &in.DenylistInitialLoadRetrySeconds, &out.DenylistInitialLoadRetrySeconds
		*out = new(int)
		**out = **in
	}
	if in.DenylistMaxKeysPerTable != nil {
		in, out := &in.DenylistMaxKeysPerTable, &out.DenylistMaxKeysPerTable
		*out = new(int)
		**out = **in
	}
	if in.DenylistMaxKeysTotal != nil {
		in, out := &in.DenylistMaxKeysTotal, &out.DenylistMaxKeysTotal
		*out = new(int)
		**out = **in
	}
	if in.DenylistRefreshSeconds != nil {
		in, out := &in.DenylistRefreshSeconds, &out.DenylistRefreshSeconds
		*out = new(int)
		**out = **in
	}
	if in.DiagnosticEventsEnabled != nil {
		in, out := &in.DiagnosticEventsEnabled, &out.DiagnosticEventsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DiskAccessMode != nil {
		in, out := &in.DiskAccessMode, &out.DiskAccessMode
		*out = new(string)
		**out = **in
	}
	if in.DiskOptimizationEstimatePercentile != nil {
		in, out := &in.DiskOptimizationEstimatePercentile, &out.DiskOptimizationEstimatePercentile
		*out = new(string)
		**out = **in
	}
	if in.DiskOptimizationPageCrossChance != nil {
		in, out := &in.DiskOptimizationPageCrossChance, &out.DiskOptimizationPageCrossChance
		*out = new(string)
		**out = **in
	}
	if in.DiskOptimizationStrategy != nil {
		in, out := &in.DiskOptimizationStrategy, &out.DiskOptimizationStrategy
		*out = new(string)
		**out = **in
	}
	if in.DynamicSnitch != nil {
		in, out := &in.DynamicSnitch, &out.DynamicSnitch
		*out = new(bool)
		**out = **in
	}
	if in.DynamicSnitchBadnessThreshold != nil {
		in, out := &in.DynamicSnitchBadnessThreshold, &out.DynamicSnitchBadnessThreshold
		*out = new(string)
		**out = **in
	}
	if in.DynamicSnitchResetIntervalInMs != nil {
		in, out := &in.DynamicSnitchResetIntervalInMs, &out.DynamicSnitchResetIntervalInMs
		*out = new(int)
		**out = **in
	}
	if in.DynamicSnitchUpdateIntervalInMs != nil {
		in, out := &in.DynamicSnitchUpdateIntervalInMs, &out.DynamicSnitchUpdateIntervalInMs
		*out = new(int)
		**out = **in
	}
	if in.EnableDenylistRangeReads != nil {
		in, out := &in.EnableDenylistRangeReads, &out.EnableDenylistRangeReads
		*out = new(bool)
		**out = **in
	}
	if in.EnableDenylistReads != nil {
		in, out := &in.EnableDenylistReads, &out.EnableDenylistReads
		*out = new(bool)
		**out = **in
	}
	if in.EnableDenylistWrites != nil {
		in, out := &in.EnableDenylistWrites, &out.EnableDenylistWrites
		*out = new(bool)
		**out = **in
	}
	if in.EnableDropCompactStorage != nil {
		in, out := &in.EnableDropCompactStorage, &out.EnableDropCompactStorage
		*out = new(bool)
		**out = **in
	}
	if in.EnableMaterializedViews != nil {
		in, out := &in.EnableMaterializedViews, &out.EnableMaterializedViews
		*out = new(bool)
		**out = **in
	}
	if in.EnablePartitionDenylist != nil {
		in, out := &in.EnablePartitionDenylist, &out.EnablePartitionDenylist
		*out = new(bool)
		**out = **in
	}
	if in.EnableSasiIndexes != nil {
		in, out := &in.EnableSasiIndexes, &out.EnableSasiIndexes
		*out = new(bool)
		**out = **in
	}
	if in.EnableScriptedUserDefinedFunctions != nil {
		in, out := &in.EnableScriptedUserDefinedFunctions, &out.EnableScriptedUserDefinedFunctions
		*out = new(bool)
		**out = **in
	}
	if in.EnableTransientReplication != nil {
		in, out := &in.EnableTransientReplication, &out.EnableTransientReplication
		*out = new(bool)
		**out = **in
	}
	if in.EnableUserDefinedFunctions != nil {
		in, out := &in.EnableUserDefinedFunctions, &out.EnableUserDefinedFunctions
		*out = new(bool)
		**out = **in
	}
	if in.EnableUserDefinedFunctionsThreads != nil {
		in, out := &in.EnableUserDefinedFunctionsThreads, &out.EnableUserDefinedFunctionsThreads
		*out = new(bool)
		**out = **in
	}
	if in.EndpointSnitch != nil {
		in, out := &in.EndpointSnitch, &out.EndpointSnitch
		*out = new(string)
		**out = **in
	}
	if in.FailureDetector != nil {
		in, out := &in.FailureDetector, &out.FailureDetector
		*out = new(string)
		**out = **in
	}
	if in.FileCacheEnabled != nil {
		in, out := &in.FileCacheEnabled, &out.FileCacheEnabled
		*out = new(bool)
		**out = **in
	}
	if in.FileCacheRoundUp != nil {
		in, out := &in.FileCacheRoundUp, &out.FileCacheRoundUp
		*out = new(bool)
		**out = **in
	}
	if in.FileCacheSizeInMb != nil {
		in, out := &in.FileCacheSizeInMb, &out.FileCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.FlushCompression != nil {
		in, out := &in.FlushCompression, &out.FlushCompression
		*out = new(string)
		**out = **in
	}
	if in.FullQueryLoggingOptions != nil {
		in, out := &in.FullQueryLoggingOptions, &out.FullQueryLoggingOptions
		*out = new(FullQueryLoggerOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.GcLogThresholdInMs != nil {
		in, out := &in.GcLogThresholdInMs, &out.GcLogThresholdInMs
		*out = new(int)
		**out = **in
	}
	if in.GcWarnThresholdInMs != nil {
		in, out := &in.GcWarnThresholdInMs, &out.GcWarnThresholdInMs
		*out = new(int)
		**out = **in
	}
	if in.HintWindowPersistentEnabled != nil {
		in, out := &in.HintWindowPersistentEnabled, &out.HintWindowPersistentEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HintedHandoffDisabledDatacenters != nil {
		in, out := &in.HintedHandoffDisabledDatacenters, &out.HintedHandoffDisabledDatacenters
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.HintedHandoffEnabled != nil {
		in, out := &in.HintedHandoffEnabled, &out.HintedHandoffEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HintedHandoffThrottleInKb != nil {
		in, out := &in.HintedHandoffThrottleInKb, &out.HintedHandoffThrottleInKb
		*out = new(int)
		**out = **in
	}
	if in.HintsCompression != nil {
		in, out := &in.HintsCompression, &out.HintsCompression
		*out = new(ParameterizedClass)
		(*in).DeepCopyInto(*out)
	}
	if in.HintsFlushPeriodInMs != nil {
		in, out := &in.HintsFlushPeriodInMs, &out.HintsFlushPeriodInMs
		*out = new(int)
		**out = **in
	}
	if in.IdealConsistencyLevel != nil {
		in, out := &in.IdealConsistencyLevel, &out.IdealConsistencyLevel
		*out = new(string)
		**out = **in
	}
	if in.IndexInterval != nil {
		in, out := &in.IndexInterval, &out.IndexInterval
		*out = new(int)
		**out = **in
	}
	if in.IndexSummaryCapacityInMb != nil {
		in, out := &in.IndexSummaryCapacityInMb, &out.IndexSummaryCapacityInMb
		*out = new(int)
		**out = **in
	}
	if in.IndexSummaryResizeIntervalInMinutes != nil {
		in, out := &in.IndexSummaryResizeIntervalInMinutes, &out.IndexSummaryResizeIntervalInMinutes
		*out = new(int)
		**out = **in
	}
	if in.InitialRangeTombstoneListAllocationSize != nil {
		in, out := &in.InitialRangeTombstoneListAllocationSize, &out.InitialRangeTombstoneListAllocationSize
		*out = new(int)
		**out = **in
	}
	if in.InterDcStreamThroughputOutboundMegabitsPerSec != nil {
		in, out := &in.InterDcStreamThroughputOutboundMegabitsPerSec, &out.InterDcStreamThroughputOutboundMegabitsPerSec
		*out = new(int)
		**out = **in
	}
	if in.InterDcTcpNodelay != nil {
		in, out := &in.InterDcTcpNodelay, &out.InterDcTcpNodelay
		*out = new(bool)
		**out = **in
	}
	if in.InternodeApplicationReceiveQueueCapacityInBytes != nil {
		in, out := &in.InternodeApplicationReceiveQueueCapacityInBytes, &out.InternodeApplicationReceiveQueueCapacityInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes != nil {
		in, out := &in.InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes, &out.InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes != nil {
		in, out := &in.InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes, &out.InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeApplicationSendQueueCapacityInBytes != nil {
		in, out := &in.InternodeApplicationSendQueueCapacityInBytes, &out.InternodeApplicationSendQueueCapacityInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeApplicationSendQueueReserveEndpointCapacityInBytes != nil {
		in, out := &in.InternodeApplicationSendQueueReserveEndpointCapacityInBytes, &out.InternodeApplicationSendQueueReserveEndpointCapacityInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeApplicationSendQueueReserveGlobalCapacityInBytes != nil {
		in, out := &in.InternodeApplicationSendQueueReserveGlobalCapacityInBytes, &out.InternodeApplicationSendQueueReserveGlobalCapacityInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeAuthenticator != nil {
		in, out := &in.InternodeAuthenticator, &out.InternodeAuthenticator
		*out = new(string)
		**out = **in
	}
	if in.InternodeCompression != nil {
		in, out := &in.InternodeCompression, &out.InternodeCompression
		*out = new(string)
		**out = **in
	}
	if in.InternodeErrorReportingExclusions != nil {
		in, out := &in.InternodeErrorReportingExclusions, &out.InternodeErrorReportingExclusions
		*out = new(SubnetGroups)
		(*in).DeepCopyInto(*out)
	}
	if in.InternodeMaxMessageSizeInBytes != nil {
		in, out := &in.InternodeMaxMessageSizeInBytes, &out.InternodeMaxMessageSizeInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeRecvBuffSizeInBytes != nil {
		in, out := &in.InternodeRecvBuffSizeInBytes, &out.InternodeRecvBuffSizeInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeSendBuffSizeInBytes != nil {
		in, out := &in.InternodeSendBuffSizeInBytes, &out.InternodeSendBuffSizeInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeSocketReceiveBufferSizeInBytes != nil {
		in, out := &in.InternodeSocketReceiveBufferSizeInBytes, &out.InternodeSocketReceiveBufferSizeInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeSocketSendBufferSizeInBytes != nil {
		in, out := &in.InternodeSocketSendBufferSizeInBytes, &out.InternodeSocketSendBufferSizeInBytes
		*out = new(int)
		**out = **in
	}
	if in.InternodeStreamingTcpUserTimeoutInMs != nil {
		in, out := &in.InternodeStreamingTcpUserTimeoutInMs, &out.InternodeStreamingTcpUserTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.InternodeTcpConnectTimeoutInMs != nil {
		in, out := &in.InternodeTcpConnectTimeoutInMs, &out.InternodeTcpConnectTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.InternodeTcpUserTimeoutInMs != nil {
		in, out := &in.InternodeTcpUserTimeoutInMs, &out.InternodeTcpUserTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.KeyCacheKeysToSave != nil {
		in, out := &in.KeyCacheKeysToSave, &out.KeyCacheKeysToSave
		*out = new(int)
		**out = **in
	}
	if in.KeyCacheMigrateDuringCompaction != nil {
		in, out := &in.KeyCacheMigrateDuringCompaction, &out.KeyCacheMigrateDuringCompaction
		*out = new(bool)
		**out = **in
	}
	if in.KeyCacheSavePeriod != nil {
		in, out := &in.KeyCacheSavePeriod, &out.KeyCacheSavePeriod
		*out = new(int)
		**out = **in
	}
	if in.KeyCacheSizeInMb != nil {
		in, out := &in.KeyCacheSizeInMb, &out.KeyCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.KeyspaceCountWarnThreshold != nil {
		in, out := &in.KeyspaceCountWarnThreshold, &out.KeyspaceCountWarnThreshold
		*out = new(int)
		**out = **in
	}
	if in.MaxConcurrentAutomaticSstableUpgrades != nil {
		in, out := &in.MaxConcurrentAutomaticSstableUpgrades, &out.MaxConcurrentAutomaticSstableUpgrades
		*out = new(int)
		**out = **in
	}
	if in.MaxHintWindowInMs != nil {
		in, out := &in.MaxHintWindowInMs, &out.MaxHintWindowInMs
		*out = new(int)
		**out = **in
	}
	if in.MaxHintsDeliveryThreads != nil {
		in, out := &in.MaxHintsDeliveryThreads, &out.MaxHintsDeliveryThreads
		*out = new(int)
		**out = **in
	}
	if in.MaxHintsFileSizeInMb != nil {
		in, out := &in.MaxHintsFileSizeInMb, &out.MaxHintsFileSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.MaxMutationSizeInKb != nil {
		in, out := &in.MaxMutationSizeInKb, &out.MaxMutationSizeInKb
		*out = new(int)
		**out = **in
	}
	if in.MaxStreamingRetries != nil {
		in, out := &in.MaxStreamingRetries, &out.MaxStreamingRetries
		*out = new(int)
		**out = **in
	}
	if in.MaxValueSizeInMb != nil {
		in, out := &in.MaxValueSizeInMb, &out.MaxValueSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.MemtableAllocationType != nil {
		in, out := &in.MemtableAllocationType, &out.MemtableAllocationType
		*out = new(string)
		**out = **in
	}
	if in.MemtableCleanupThreshold != nil {
		in, out := &in.MemtableCleanupThreshold, &out.MemtableCleanupThreshold
		*out = new(string)
		**out = **in
	}
	if in.MemtableFlushWriters != nil {
		in, out := &in.MemtableFlushWriters, &out.MemtableFlushWriters
		*out = new(int)
		**out = **in
	}
	if in.MemtableHeapSpaceInMb != nil {
		in, out := &in.MemtableHeapSpaceInMb, &out.MemtableHeapSpaceInMb
		*out = new(int)
		**out = **in
	}
	if in.MemtableOffheapSpaceInMb != nil {
		in, out := &in.MemtableOffheapSpaceInMb, &out.MemtableOffheapSpaceInMb
		*out = new(int)
		**out = **in
	}
	if in.MinFreeSpacePerDriveInMb != nil {
		in, out := &in.MinFreeSpacePerDriveInMb, &out.MinFreeSpacePerDriveInMb
		*out = new(int)
		**out = **in
	}
	if in.MinimumKeyspaceRf != nil {
		in, out := &in.MinimumKeyspaceRf, &out.MinimumKeyspaceRf
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportAllowOlderProtocols != nil {
		in, out := &in.NativeTransportAllowOlderProtocols, &out.NativeTransportAllowOlderProtocols
		*out = new(bool)
		**out = **in
	}
	if in.NativeTransportFlushInBatchesLegacy != nil {
		in, out := &in.NativeTransportFlushInBatchesLegacy, &out.NativeTransportFlushInBatchesLegacy
		*out = new(bool)
		**out = **in
	}
	if in.NativeTransportIdleTimeoutInMs != nil {
		in, out := &in.NativeTransportIdleTimeoutInMs, &out.NativeTransportIdleTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxConcurrentConnections != nil {
		in, out := &in.NativeTransportMaxConcurrentConnections, &out.NativeTransportMaxConcurrentConnections
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxConcurrentConnectionsPerIp != nil {
		in, out := &in.NativeTransportMaxConcurrentConnectionsPerIp, &out.NativeTransportMaxConcurrentConnectionsPerIp
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxConcurrentRequestsInBytes != nil {
		in, out := &in.NativeTransportMaxConcurrentRequestsInBytes, &out.NativeTransportMaxConcurrentRequestsInBytes
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxConcurrentRequestsInBytesPerIp != nil {
		in, out := &in.NativeTransportMaxConcurrentRequestsInBytesPerIp, &out.NativeTransportMaxConcurrentRequestsInBytesPerIp
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxFrameSizeInMb != nil {
		in, out := &in.NativeTransportMaxFrameSizeInMb, &out.NativeTransportMaxFrameSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxNegotiableProtocolVersion != nil {
		in, out := &in.NativeTransportMaxNegotiableProtocolVersion, &out.NativeTransportMaxNegotiableProtocolVersion
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxRequestsPerSecond != nil {
		in, out := &in.NativeTransportMaxRequestsPerSecond, &out.NativeTransportMaxRequestsPerSecond
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportMaxThreads != nil {
		in, out := &in.NativeTransportMaxThreads, &out.NativeTransportMaxThreads
		*out = new(int)
		**out = **in
	}
	if in.NativeTransportRateLimitingEnabled != nil {
		in, out := &in.NativeTransportRateLimitingEnabled, &out.NativeTransportRateLimitingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NativeTransportReceiveQueueCapacityInBytes != nil {
		in, out := &in.NativeTransportReceiveQueueCapacityInBytes, &out.NativeTransportReceiveQueueCapacityInBytes
		*out = new(int)
		**out = **in
	}
	if in.NetworkAuthorizer != nil {
		in, out := &in.NetworkAuthorizer, &out.NetworkAuthorizer
		*out = new(string)
		**out = **in
	}
	if in.NetworkingCacheSizeInMb != nil {
		in, out := &in.NetworkingCacheSizeInMb, &out.NetworkingCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.NumTokens != nil {
		in, out := &in.NumTokens, &out.NumTokens
		*out = new(int)
		**out = **in
	}
	if in.OtcBacklogExpirationIntervalMs != nil {
		in, out := &in.OtcBacklogExpirationIntervalMs, &out.OtcBacklogExpirationIntervalMs
		*out = new(int)
		**out = **in
	}
	if in.OtcCoalescingEnoughCoalescedMessages != nil {
		in, out := &in.OtcCoalescingEnoughCoalescedMessages, &out.OtcCoalescingEnoughCoalescedMessages
		*out = new(int)
		**out = **in
	}
	if in.OtcCoalescingStrategy != nil {
		in, out := &in.OtcCoalescingStrategy, &out.OtcCoalescingStrategy
		*out = new(string)
		**out = **in
	}
	if in.OtcCoalescingWindowUs != nil {
		in, out := &in.OtcCoalescingWindowUs, &out.OtcCoalescingWindowUs
		*out = new(int)
		**out = **in
	}
	if in.PaxosCacheSizeInMb != nil {
		in, out := &in.PaxosCacheSizeInMb, &out.PaxosCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.PeriodicCommitlogSyncLagBlockInMs != nil {
		in, out := &in.PeriodicCommitlogSyncLagBlockInMs, &out.PeriodicCommitlogSyncLagBlockInMs
		*out = new(int)
		**out = **in
	}
	if in.PermissionsCacheMaxEntries != nil {
		in, out := &in.PermissionsCacheMaxEntries, &out.PermissionsCacheMaxEntries
		*out = new(int)
		**out = **in
	}
	if in.PermissionsUpdateIntervalInMs != nil {
		in, out := &in.PermissionsUpdateIntervalInMs, &out.PermissionsUpdateIntervalInMs
		*out = new(int)
		**out = **in
	}
	if in.PermissionsValidityInMs != nil {
		in, out := &in.PermissionsValidityInMs, &out.PermissionsValidityInMs
		*out = new(int)
		**out = **in
	}
	if in.PhiConvictThreshold != nil {
		in, out := &in.PhiConvictThreshold, &out.PhiConvictThreshold
		*out = new(string)
		**out = **in
	}
	if in.PreparedStatementsCacheSizeMb != nil {
		in, out := &in.PreparedStatementsCacheSizeMb, &out.PreparedStatementsCacheSizeMb
		*out = new(int)
		**out = **in
	}
	if in.RangeRequestTimeoutInMs != nil {
		in, out := &in.RangeRequestTimeoutInMs, &out.RangeRequestTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.RangeTombstoneListGrowthFactor != nil {
		in, out := &in.RangeTombstoneListGrowthFactor, &out.RangeTombstoneListGrowthFactor
		*out = new(string)
		**out = **in
	}
	if in.ReadRequestTimeoutInMs != nil {
		in, out := &in.ReadRequestTimeoutInMs, &out.ReadRequestTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.RejectRepairCompactionThreshold != nil {
		in, out := &in.RejectRepairCompactionThreshold, &out.RejectRepairCompactionThreshold
		*out = new(int)
		**out = **in
	}
	if in.RepairCommandPoolFullStrategy != nil {
		in, out := &in.RepairCommandPoolFullStrategy, &out.RepairCommandPoolFullStrategy
		*out = new(string)
		**out = **in
	}
	if in.RepairCommandPoolSize != nil {
		in, out := &in.RepairCommandPoolSize, &out.RepairCommandPoolSize
		*out = new(int)
		**out = **in
	}
	if in.RepairSessionMaxTreeDepth != nil {
		in, out := &in.RepairSessionMaxTreeDepth, &out.RepairSessionMaxTreeDepth
		*out = new(int)
		**out = **in
	}
	if in.RepairSessionSpaceInMb != nil {
		in, out := &in.RepairSessionSpaceInMb, &out.RepairSessionSpaceInMb
		*out = new(int)
		**out = **in
	}
	if in.RepairedDataTrackingForPartitionReadsEnabled != nil {
		in, out := &in.RepairedDataTrackingForPartitionReadsEnabled, &out.RepairedDataTrackingForPartitionReadsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.RepairedDataTrackingForRangeReadsEnabled != nil {
		in, out := &in.RepairedDataTrackingForRangeReadsEnabled, &out.RepairedDataTrackingForRangeReadsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ReplicaFilteringProtection != nil {
		in, out := &in.ReplicaFilteringProtection, &out.ReplicaFilteringProtection
		*out = new(ReplicaFilteringProtectionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ReportUnconfirmedRepairedDataMismatches != nil {
		in, out := &in.ReportUnconfirmedRepairedDataMismatches, &out.ReportUnconfirmedRepairedDataMismatches
		*out = new(bool)
		**out = **in
	}
	if in.RequestScheduler != nil {
		in, out := &in.RequestScheduler, &out.RequestScheduler
		*out = new(string)
		**out = **in
	}
	if in.RequestSchedulerId != nil {
		in, out := &in.RequestSchedulerId, &out.RequestSchedulerId
		*out = new(string)
		**out = **in
	}
	if in.RequestSchedulerOptions != nil {
		in, out := &in.RequestSchedulerOptions, &out.RequestSchedulerOptions
		*out = new(RequestSchedulerOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.RequestTimeoutInMs != nil {
		in, out := &in.RequestTimeoutInMs, &out.RequestTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.RoleManager != nil {
		in, out := &in.RoleManager, &out.RoleManager
		*out = new(string)
		**out = **in
	}
	if in.RolesCacheMaxEntries != nil {
		in, out := &in.RolesCacheMaxEntries, &out.RolesCacheMaxEntries
		*out = new(int)
		**out = **in
	}
	if in.RolesUpdateIntervalInMs != nil {
		in, out := &in.RolesUpdateIntervalInMs, &out.RolesUpdateIntervalInMs
		*out = new(int)
		**out = **in
	}
	if in.RolesValidityInMs != nil {
		in, out := &in.RolesValidityInMs, &out.RolesValidityInMs
		*out = new(int)
		**out = **in
	}
	if in.RowCacheClassName != nil {
		in, out := &in.RowCacheClassName, &out.RowCacheClassName
		*out = new(string)
		**out = **in
	}
	if in.RowCacheKeysToSave != nil {
		in, out := &in.RowCacheKeysToSave, &out.RowCacheKeysToSave
		*out = new(int)
		**out = **in
	}
	if in.RowCacheSavePeriod != nil {
		in, out := &in.RowCacheSavePeriod, &out.RowCacheSavePeriod
		*out = new(int)
		**out = **in
	}
	if in.RowCacheSizeInMb != nil {
		in, out := &in.RowCacheSizeInMb, &out.RowCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.ServerEncryptionOptions != nil {
		in, out := &in.ServerEncryptionOptions, &out.ServerEncryptionOptions
		*out = new(encryption.ServerEncryptionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SlowQueryLogTimeoutInMs != nil {
		in, out := &in.SlowQueryLogTimeoutInMs, &out.SlowQueryLogTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.SnapshotBeforeCompaction != nil {
		in, out := &in.SnapshotBeforeCompaction, &out.SnapshotBeforeCompaction
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotLinksPerSecond != nil {
		in, out := &in.SnapshotLinksPerSecond, &out.SnapshotLinksPerSecond
		*out = new(int)
		**out = **in
	}
	if in.SnapshotOnDuplicateRowDetection != nil {
		in, out := &in.SnapshotOnDuplicateRowDetection, &out.SnapshotOnDuplicateRowDetection
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotOnRepairedDataMismatch != nil {
		in, out := &in.SnapshotOnRepairedDataMismatch, &out.SnapshotOnRepairedDataMismatch
		*out = new(bool)
		**out = **in
	}
	if in.SstablePreemptiveOpenIntervalInMb != nil {
		in, out := &in.SstablePreemptiveOpenIntervalInMb, &out.SstablePreemptiveOpenIntervalInMb
		*out = new(int)
		**out = **in
	}
	if in.StreamEntireSstables != nil {
		in, out := &in.StreamEntireSstables, &out.StreamEntireSstables
		*out = new(bool)
		**out = **in
	}
	if in.StreamThroughputOutboundMegabitsPerSec != nil {
		in, out := &in.StreamThroughputOutboundMegabitsPerSec, &out.StreamThroughputOutboundMegabitsPerSec
		*out = new(int)
		**out = **in
	}
	if in.StreamingConnectionsPerHost != nil {
		in, out := &in.StreamingConnectionsPerHost, &out.StreamingConnectionsPerHost
		*out = new(int)
		**out = **in
	}
	if in.StreamingKeepAlivePeriodInSecs != nil {
		in, out := &in.StreamingKeepAlivePeriodInSecs, &out.StreamingKeepAlivePeriodInSecs
		*out = new(int)
		**out = **in
	}
	if in.StreamingSocketTimeoutInMs != nil {
		in, out := &in.StreamingSocketTimeoutInMs, &out.StreamingSocketTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.TableCountWarnThreshold != nil {
		in, out := &in.TableCountWarnThreshold, &out.TableCountWarnThreshold
		*out = new(int)
		**out = **in
	}
	if in.ThriftFramedTransportSizeInMb != nil {
		in, out := &in.ThriftFramedTransportSizeInMb, &out.ThriftFramedTransportSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.ThriftMaxMessageLengthInMb != nil {
		in, out := &in.ThriftMaxMessageLengthInMb, &out.ThriftMaxMessageLengthInMb
		*out = new(int)
		**out = **in
	}
	if in.ThriftPreparedStatementsCacheSizeMb != nil {
		in, out := &in.ThriftPreparedStatementsCacheSizeMb, &out.ThriftPreparedStatementsCacheSizeMb
		*out = new(int)
		**out = **in
	}
	if in.TombstoneFailureThreshold != nil {
		in, out := &in.TombstoneFailureThreshold, &out.TombstoneFailureThreshold
		*out = new(int)
		**out = **in
	}
	if in.TombstoneWarnThreshold != nil {
		in, out := &in.TombstoneWarnThreshold, &out.TombstoneWarnThreshold
		*out = new(int)
		**out = **in
	}
	if in.TracetypeQueryTtl != nil {
		in, out := &in.TracetypeQueryTtl, &out.TracetypeQueryTtl
		*out = new(int)
		**out = **in
	}
	if in.TracetypeRepairTtl != nil {
		in, out := &in.TracetypeRepairTtl, &out.TracetypeRepairTtl
		*out = new(int)
		**out = **in
	}
	if in.TrackWarnings != nil {
		in, out := &in.TrackWarnings, &out.TrackWarnings
		*out = new(TrackWarnings)
		(*in).DeepCopyInto(*out)
	}
	if in.TraverseAuthFromRoot != nil {
		in, out := &in.TraverseAuthFromRoot, &out.TraverseAuthFromRoot
		*out = new(bool)
		**out = **in
	}
	if in.TrickleFsync != nil {
		in, out := &in.TrickleFsync, &out.TrickleFsync
		*out = new(bool)
		**out = **in
	}
	if in.TrickleFsyncIntervalInKb != nil {
		in, out := &in.TrickleFsyncIntervalInKb, &out.TrickleFsyncIntervalInKb
		*out = new(int)
		**out = **in
	}
	if in.TruncateRequestTimeoutInMs != nil {
		in, out := &in.TruncateRequestTimeoutInMs, &out.TruncateRequestTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.UnloggedBatchAcrossPartitionsWarnThreshold != nil {
		in, out := &in.UnloggedBatchAcrossPartitionsWarnThreshold, &out.UnloggedBatchAcrossPartitionsWarnThreshold
		*out = new(int)
		**out = **in
	}
	if in.UseDeterministicTableId != nil {
		in, out := &in.UseDeterministicTableId, &out.UseDeterministicTableId
		*out = new(bool)
		**out = **in
	}
	if in.UseOffheapMerkleTrees != nil {
		in, out := &in.UseOffheapMerkleTrees, &out.UseOffheapMerkleTrees
		*out = new(bool)
		**out = **in
	}
	if in.UserDefinedFunctionFailTimeout != nil {
		in, out := &in.UserDefinedFunctionFailTimeout, &out.UserDefinedFunctionFailTimeout
		*out = new(int)
		**out = **in
	}
	if in.UserDefinedFunctionWarnTimeout != nil {
		in, out := &in.UserDefinedFunctionWarnTimeout, &out.UserDefinedFunctionWarnTimeout
		*out = new(int)
		**out = **in
	}
	if in.UserFunctionTimeoutPolicy != nil {
		in, out := &in.UserFunctionTimeoutPolicy, &out.UserFunctionTimeoutPolicy
		*out = new(string)
		**out = **in
	}
	if in.ValidationPreviewPurgeHeadStartInSec != nil {
		in, out := &in.ValidationPreviewPurgeHeadStartInSec, &out.ValidationPreviewPurgeHeadStartInSec
		*out = new(int)
		**out = **in
	}
	if in.WindowsTimerInterval != nil {
		in, out := &in.WindowsTimerInterval, &out.WindowsTimerInterval
		*out = new(int)
		**out = **in
	}
	if in.WriteRequestTimeoutInMs != nil {
		in, out := &in.WriteRequestTimeoutInMs, &out.WriteRequestTimeoutInMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CassandraYaml.
func (in *CassandraYaml) DeepCopy() *CassandraYaml {
	if in == nil {
		return nil
	}
	out := new(CassandraYaml)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigurationEncryptionOptions) DeepCopyInto(out *ConfigurationEncryptionOptions) {
	*out = *in
	if in.SystemKeyDirectory != nil {
		in, out := &in.SystemKeyDirectory, &out.SystemKeyDirectory
		*out = new(string)
		**out = **in
	}
	if in.ConfigEncryptionActive != nil {
		in, out := &in.ConfigEncryptionActive, &out.ConfigEncryptionActive
		*out = new(bool)
		**out = **in
	}
	if in.ConfigEncryptionKeyName != nil {
		in, out := &in.ConfigEncryptionKeyName, &out.ConfigEncryptionKeyName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigurationEncryptionOptions.
func (in *ConfigurationEncryptionOptions) DeepCopy() *ConfigurationEncryptionOptions {
	if in == nil {
		return nil
	}
	out := new(ConfigurationEncryptionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CqlSlowLogOptions) DeepCopyInto(out *CqlSlowLogOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Threshold != nil {
		in, out := &in.Threshold, &out.Threshold
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.MinimumSamples != nil {
		in, out := &in.MinimumSamples, &out.MinimumSamples
		*out = new(int)
		**out = **in
	}
	if in.TtlSeconds != nil {
		in, out := &in.TtlSeconds, &out.TtlSeconds
		*out = new(int)
		**out = **in
	}
	if in.SkipWritingToDb != nil {
		in, out := &in.SkipWritingToDb, &out.SkipWritingToDb
		*out = new(bool)
		**out = **in
	}
	if in.NumSlowestQueries != nil {
		in, out := &in.NumSlowestQueries, &out.NumSlowestQueries
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CqlSlowLogOptions.
func (in *CqlSlowLogOptions) DeepCopy() *CqlSlowLogOptions {
	if in == nil {
		return nil
	}
	out := new(CqlSlowLogOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatacenterOptions) DeepCopyInto(out *DatacenterOptions) {
	*out = *in
	if in.CassandraConfig != nil {
		in, out := &in.CassandraConfig, &out.CassandraConfig
		*out = new(CassandraConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.StorageConfig != nil {
		in, out := &in.StorageConfig, &out.StorageConfig
		*out = new(v1beta1.StorageConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Networking != nil {
		in, out := &in.Networking, &out.Networking
		*out = new(v1beta1.NetworkingConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.Racks != nil {
		in, out := &in.Racks, &out.Racks
		*out = make([]v1beta1.Rack, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.JmxInitContainerImage != nil {
		in, out := &in.JmxInitContainerImage, &out.JmxInitContainerImage
		*out = new(images.Image)
		(*in).DeepCopyInto(*out)
	}
	if in.SoftPodAntiAffinity != nil {
		in, out := &in.SoftPodAntiAffinity, &out.SoftPodAntiAffinity
		*out = new(bool)
		**out = **in
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MgmtAPIHeap != nil {
		in, out := &in.MgmtAPIHeap, &out.MgmtAPIHeap
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.Telemetry != nil {
		in, out := &in.Telemetry, &out.Telemetry
		*out = new(telemetryv1alpha1.TelemetrySpec)
		(*in).DeepCopyInto(*out)
	}
	if in.CDC != nil {
		in, out := &in.CDC, &out.CDC
		*out = new(v1beta1.CDCConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.Containers != nil {
		in, out := &in.Containers, &out.Containers
		*out = make([]v1.Container, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.InitContainers != nil {
		in, out := &in.InitContainers, &out.InitContainers
		*out = make([]v1.Container, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExtraVolumes != nil {
		in, out := &in.ExtraVolumes, &out.ExtraVolumes
		*out = new(K8ssandraVolumes)
		(*in).DeepCopyInto(*out)
	}
	if in.DseWorkloads != nil {
		in, out := &in.DseWorkloads, &out.DseWorkloads
		*out = new(v1beta1.DseWorkloads)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatacenterOptions.
func (in *DatacenterOptions) DeepCopy() *DatacenterOptions {
	if in == nil {
		return nil
	}
	out := new(DatacenterOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DnsServiceDiscovery) DeepCopyInto(out *DnsServiceDiscovery) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.LookupTimeoutMs != nil {
		in, out := &in.LookupTimeoutMs, &out.LookupTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.RetentionDurationMs != nil {
		in, out := &in.RetentionDurationMs, &out.RetentionDurationMs
		*out = new(int)
		**out = **in
	}
	if in.PollingIntervalMs != nil {
		in, out := &in.PollingIntervalMs, &out.PollingIntervalMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DnsServiceDiscovery.
func (in *DnsServiceDiscovery) DeepCopy() *DnsServiceDiscovery {
	if in == nil {
		return nil
	}
	out := new(DnsServiceDiscovery)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DseInMemoryOptions) DeepCopyInto(out *DseInMemoryOptions) {
	*out = *in
	if in.MaxMemoryToLockFraction != nil {
		in, out := &in.MaxMemoryToLockFraction, &out.MaxMemoryToLockFraction
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.MaxMemoryToLockMb != nil {
		in, out := &in.MaxMemoryToLockMb, &out.MaxMemoryToLockMb
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DseInMemoryOptions.
func (in *DseInMemoryOptions) DeepCopy() *DseInMemoryOptions {
	if in == nil {
		return nil
	}
	out := new(DseInMemoryOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DseYaml) DeepCopyInto(out *DseYaml) {
	*out = *in
	if in.AuthenticationOptions != nil {
		in, out := &in.AuthenticationOptions, &out.AuthenticationOptions
		*out = new(AuthenticationOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleManagementOptions != nil {
		in, out := &in.RoleManagementOptions, &out.RoleManagementOptions
		*out = new(RoleManagementOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorizationOptions != nil {
		in, out := &in.AuthorizationOptions, &out.AuthorizationOptions
		*out = new(AuthorizationOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.KerberosOptions != nil {
		in, out := &in.KerberosOptions, &out.KerberosOptions
		*out = new(KerberosOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.LdapOptions != nil {
		in, out := &in.LdapOptions, &out.LdapOptions
		*out = new(LdapOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SystemInfoEncryptionOptions != nil {
		in, out := &in.SystemInfoEncryptionOptions, &out.SystemInfoEncryptionOptions
		*out = new(SystemInfoEncryptionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ConfigurationEncryptionOptions != nil {
		in, out := &in.ConfigurationEncryptionOptions, &out.ConfigurationEncryptionOptions
		*out = new(ConfigurationEncryptionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.KmipEncryptionOptions != nil {
		in, out := &in.KmipEncryptionOptions, &out.KmipEncryptionOptions
		*out = new(KmipEncryptionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SolrEncryptionOptions != nil {
		in, out := &in.SolrEncryptionOptions, &out.SolrEncryptionOptions
		*out = new(SolrEncryptionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.DseInMemoryOptions != nil {
		in, out := &in.DseInMemoryOptions, &out.DseInMemoryOptions
		*out = new(DseInMemoryOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.NodeHealthOptions != nil {
		in, out := &in.NodeHealthOptions, &out.NodeHealthOptions
		*out = new(NodeHealthOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.EnableHealthBasedRouting != nil {
		in, out := &in.EnableHealthBasedRouting, &out.EnableHealthBasedRouting
		*out = new(bool)
		**out = **in
	}
	if in.LeaseMetricsOptions != nil {
		in, out := &in.LeaseMetricsOptions, &out.LeaseMetricsOptions
		*out = new(LeaseMetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SolrSchedulerOptions != nil {
		in, out := &in.SolrSchedulerOptions, &out.SolrSchedulerOptions
		*out = new(SolrSchedulerOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SolrCqlQueryOptions != nil {
		in, out := &in.SolrCqlQueryOptions, &out.SolrCqlQueryOptions
		*out = new(SolrCqlQueryOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SolrIndexingOptions != nil {
		in, out := &in.SolrIndexingOptions, &out.SolrIndexingOptions
		*out = new(SolrIndexingOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SolrShardTransportOptions != nil {
		in, out := &in.SolrShardTransportOptions, &out.SolrShardTransportOptions
		*out = new(SolrShardTransportOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.PerformanceServiceOptions != nil {
		in, out := &in.PerformanceServiceOptions, &out.PerformanceServiceOptions
		*out = new(PerformanceServiceOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.AnalyticsOptions != nil {
		in, out := &in.AnalyticsOptions, &out.AnalyticsOptions
		*out = new(AnalyticsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.AlwaysOnSqlOptions != nil {
		in, out := &in.AlwaysOnSqlOptions, &out.AlwaysOnSqlOptions
		*out = new(AlwaysOnSqlOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.DsefsOptions != nil {
		in, out := &in.DsefsOptions, &out.DsefsOptions
		*out = new(DsefsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.InsightsOptions != nil {
		in, out := &in.InsightsOptions, &out.InsightsOptions
		*out = new(InsightsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.AuditLoggingOptions != nil {
		in, out := &in.AuditLoggingOptions, &out.AuditLoggingOptions
		*out = new(AuditLoggingOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.TieredStorageOptions != nil {
		in, out := &in.TieredStorageOptions, &out.TieredStorageOptions
		*out = make(map[string]TieredStorageOptions, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.AdvancedReplicationOptions != nil {
		in, out := &in.AdvancedReplicationOptions, &out.AdvancedReplicationOptions
		*out = new(AdvancedReplicationOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.InternodeMessagingOptions != nil {
		in, out := &in.InternodeMessagingOptions, &out.InternodeMessagingOptions
		*out = new(InternodeMessagingOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.GraphOptions != nil {
		in, out := &in.GraphOptions, &out.GraphOptions
		*out = new(GraphOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ServerId != nil {
		in, out := &in.ServerId, &out.ServerId
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DseYaml.
func (in *DseYaml) DeepCopy() *DseYaml {
	if in == nil {
		return nil
	}
	out := new(DseYaml)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DsefsBlockAllocatorOptions) DeepCopyInto(out *DsefsBlockAllocatorOptions) {
	*out = *in
	if in.OverflowMarginMb != nil {
		in, out := &in.OverflowMarginMb, &out.OverflowMarginMb
		*out = new(int)
		**out = **in
	}
	if in.OverflowFactor != nil {
		in, out := &in.OverflowFactor, &out.OverflowFactor
		x := (*in).DeepCopy()
		*out = &x
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DsefsBlockAllocatorOptions.
func (in *DsefsBlockAllocatorOptions) DeepCopy() *DsefsBlockAllocatorOptions {
	if in == nil {
		return nil
	}
	out := new(DsefsBlockAllocatorOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DsefsDataDirectory) DeepCopyInto(out *DsefsDataDirectory) {
	*out = *in
	if in.Dir != nil {
		in, out := &in.Dir, &out.Dir
		*out = new(string)
		**out = **in
	}
	if in.StorageWeight != nil {
		in, out := &in.StorageWeight, &out.StorageWeight
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.MinFreeSpace != nil {
		in, out := &in.MinFreeSpace, &out.MinFreeSpace
		x := (*in).DeepCopy()
		*out = &x
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DsefsDataDirectory.
func (in *DsefsDataDirectory) DeepCopy() *DsefsDataDirectory {
	if in == nil {
		return nil
	}
	out := new(DsefsDataDirectory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DsefsGossipOptions) DeepCopyInto(out *DsefsGossipOptions) {
	*out = *in
	if in.RoundDelayMs != nil {
		in, out := &in.RoundDelayMs, &out.RoundDelayMs
		*out = new(int)
		**out = **in
	}
	if in.StartupDelayMs != nil {
		in, out := &in.StartupDelayMs, &out.StartupDelayMs
		*out = new(int)
		**out = **in
	}
	if in.ShutdownDelayMs != nil {
		in, out := &in.ShutdownDelayMs, &out.ShutdownDelayMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DsefsGossipOptions.
func (in *DsefsGossipOptions) DeepCopy() *DsefsGossipOptions {
	if in == nil {
		return nil
	}
	out := new(DsefsGossipOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DsefsOptions) DeepCopyInto(out *DsefsOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.KeyspaceName != nil {
		in, out := &in.KeyspaceName, &out.KeyspaceName
		*out = new(string)
		**out = **in
	}
	if in.WorkDir != nil {
		in, out := &in.WorkDir, &out.WorkDir
		*out = new(string)
		**out = **in
	}
	if in.PublicPort != nil {
		in, out := &in.PublicPort, &out.PublicPort
		*out = new(int)
		**out = **in
	}
	if in.PrivatePort != nil {
		in, out := &in.PrivatePort, &out.PrivatePort
		*out = new(int)
		**out = **in
	}
	if in.DataDirectories != nil {
		in, out := &in.DataDirectories, &out.DataDirectories
		*out = make([]DsefsDataDirectory, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceStartupTimeoutMs != nil {
		in, out := &in.ServiceStartupTimeoutMs, &out.ServiceStartupTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.ServiceCloseTimeoutMs != nil {
		in, out := &in.ServiceCloseTimeoutMs, &out.ServiceCloseTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.ServerCloseTimeoutMs != nil {
		in, out := &in.ServerCloseTimeoutMs, &out.ServerCloseTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.CompressionFrameMaxSize != nil {
		in, out := &in.CompressionFrameMaxSize, &out.CompressionFrameMaxSize
		*out = new(int)
		**out = **in
	}
	if in.QueryCacheSize != nil {
		in, out := &in.QueryCacheSize, &out.QueryCacheSize
		*out = new(int)
		**out = **in
	}
	if in.QueryCacheExpireAfterMs != nil {
		in, out := &in.QueryCacheExpireAfterMs, &out.QueryCacheExpireAfterMs
		*out = new(int)
		**out = **in
	}
	if in.GossipOptions != nil {
		in, out := &in.GossipOptions, &out.GossipOptions
		*out = new(DsefsGossipOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.RestOptions != nil {
		in, out := &in.RestOptions, &out.RestOptions
		*out = new(DsefsRestOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.TransactionOptions != nil {
		in, out := &in.TransactionOptions, &out.TransactionOptions
		*out = new(DsefsTransactionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.BlockAllocatorOptions != nil {
		in, out := &in.BlockAllocatorOptions, &out.BlockAllocatorOptions
		*out = new(DsefsBlockAllocatorOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DsefsOptions.
func (in *DsefsOptions) DeepCopy() *DsefsOptions {
	if in == nil {
		return nil
	}
	out := new(DsefsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DsefsRestOptions) DeepCopyInto(out *DsefsRestOptions) {
	*out = *in
	if in.RequestTimeoutMs != nil {
		in, out := &in.RequestTimeoutMs, &out.RequestTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.ConnectionOpenTimeoutMs != nil {
		in, out := &in.ConnectionOpenTimeoutMs, &out.ConnectionOpenTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.ClientCloseTimeoutMs != nil {
		in, out := &in.ClientCloseTimeoutMs, &out.ClientCloseTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.ServerRequestTimeoutMs != nil {
		in, out := &in.ServerRequestTimeoutMs, &out.ServerRequestTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.IdleConnectionTimeoutMs != nil {
		in, out := &in.IdleConnectionTimeoutMs, &out.IdleConnectionTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.InternodeIdleConnectionTimeoutMs != nil {
		in, out := &in.InternodeIdleConnectionTimeoutMs, &out.InternodeIdleConnectionTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.CoreMaxConcurrentConnectionsPerHost != nil {
		in, out := &in.CoreMaxConcurrentConnectionsPerHost, &out.CoreMaxConcurrentConnectionsPerHost
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DsefsRestOptions.
func (in *DsefsRestOptions) DeepCopy() *DsefsRestOptions {
	if in == nil {
		return nil
	}
	out := new(DsefsRestOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DsefsTransactionOptions) DeepCopyInto(out *DsefsTransactionOptions) {
	*out = *in
	if in.TransactionTimeoutMs != nil {
		in, out := &in.TransactionTimeoutMs, &out.TransactionTimeoutMs
		*out = new(int)
		**out = **in
	}
	if in.ConflictRetryDelayMs != nil {
		in, out := &in.ConflictRetryDelayMs, &out.ConflictRetryDelayMs
		*out = new(int)
		**out = **in
	}
	if in.ConflictRetryCount != nil {
		in, out := &in.ConflictRetryCount, &out.ConflictRetryCount
		*out = new(int)
		**out = **in
	}
	if in.ExecutionRetryDelayMs != nil {
		in, out := &in.ExecutionRetryDelayMs, &out.ExecutionRetryDelayMs
		*out = new(int)
		**out = **in
	}
	if in.ExecutionRetryCount != nil {
		in, out := &in.ExecutionRetryCount, &out.ExecutionRetryCount
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DsefsTransactionOptions.
func (in *DsefsTransactionOptions) DeepCopy() *DsefsTransactionOptions {
	if in == nil {
		return nil
	}
	out := new(DsefsTransactionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EmbeddedObjectMeta) DeepCopyInto(out *EmbeddedObjectMeta) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EmbeddedObjectMeta.
func (in *EmbeddedObjectMeta) DeepCopy() *EmbeddedObjectMeta {
	if in == nil {
		return nil
	}
	out := new(EmbeddedObjectMeta)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FullQueryLoggerOptions) DeepCopyInto(out *FullQueryLoggerOptions) {
	*out = *in
	if in.ArchiveCommand != nil {
		in, out := &in.ArchiveCommand, &out.ArchiveCommand
		*out = new(string)
		**out = **in
	}
	if in.RollCycle != nil {
		in, out := &in.RollCycle, &out.RollCycle
		*out = new(string)
		**out = **in
	}
	if in.Block != nil {
		in, out := &in.Block, &out.Block
		*out = new(bool)
		**out = **in
	}
	if in.MaxQueueWeight != nil {
		in, out := &in.MaxQueueWeight, &out.MaxQueueWeight
		*out = new(int)
		**out = **in
	}
	if in.MaxLogSize != nil {
		in, out := &in.MaxLogSize, &out.MaxLogSize
		*out = new(int)
		**out = **in
	}
	if in.MaxArchiveRetries != nil {
		in, out := &in.MaxArchiveRetries, &out.MaxArchiveRetries
		*out = new(int)
		**out = **in
	}
	if in.LogDir != nil {
		in, out := &in.LogDir, &out.LogDir
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FullQueryLoggerOptions.
func (in *FullQueryLoggerOptions) DeepCopy() *FullQueryLoggerOptions {
	if in == nil {
		return nil
	}
	out := new(FullQueryLoggerOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GraphEvents) DeepCopyInto(out *GraphEvents) {
	*out = *in
	if in.TtlSeconds != nil {
		in, out := &in.TtlSeconds, &out.TtlSeconds
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GraphEvents.
func (in *GraphEvents) DeepCopy() *GraphEvents {
	if in == nil {
		return nil
	}
	out := new(GraphEvents)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GraphOptions) DeepCopyInto(out *GraphOptions) {
	*out = *in
	if in.AnalyticEvaluationTimeoutInMinutes != nil {
		in, out := &in.AnalyticEvaluationTimeoutInMinutes, &out.AnalyticEvaluationTimeoutInMinutes
		*out = new(int)
		**out = **in
	}
	if in.RealtimeEvaluationTimeoutInSeconds != nil {
		in, out := &in.RealtimeEvaluationTimeoutInSeconds, &out.RealtimeEvaluationTimeoutInSeconds
		*out = new(int)
		**out = **in
	}
	if in.SchemaAgreementTimeoutInMs != nil {
		in, out := &in.SchemaAgreementTimeoutInMs, &out.SchemaAgreementTimeoutInMs
		*out = new(int)
		**out = **in
	}
	if in.SystemEvaluationTimeoutInSeconds != nil {
		in, out := &in.SystemEvaluationTimeoutInSeconds, &out.SystemEvaluationTimeoutInSeconds
		*out = new(int)
		**out = **in
	}
	if in.AdjacencyCacheSizeInMb != nil {
		in, out := &in.AdjacencyCacheSizeInMb, &out.AdjacencyCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.IndexCacheSizeInMb != nil {
		in, out := &in.IndexCacheSizeInMb, &out.IndexCacheSizeInMb
		*out = new(int)
		**out = **in
	}
	if in.MaxQueryParams != nil {
		in, out := &in.MaxQueryParams, &out.MaxQueryParams
		*out = new(int)
		**out = **in
	}
	if in.GremlinServerOptions != nil {
		in, out := &in.GremlinServerOptions, &out.GremlinServerOptions
		*out = new(GremlinServerOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GraphOptions.
func (in *GraphOptions) DeepCopy() *GraphOptions {
	if in == nil {
		return nil
	}
	out := new(GraphOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GremlinGroovy) DeepCopyInto(out *GremlinGroovy) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(GremlinGroovyConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GremlinGroovy.
func (in *GremlinGroovy) DeepCopy() *GremlinGroovy {
	if in == nil {
		return nil
	}
	out := new(GremlinGroovy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GremlinGroovyConfig) DeepCopyInto(out *GremlinGroovyConfig) {
	*out = *in
	if in.SandboxEnabled != nil {
		in, out := &in.SandboxEnabled, &out.SandboxEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SandboxRules != nil {
		in, out := &in.SandboxRules, &out.SandboxRules
		*out = new(GremlinGroovySandboxRules)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GremlinGroovyConfig.
func (in *GremlinGroovyConfig) DeepCopy() *GremlinGroovyConfig {
	if in == nil {
		return nil
	}
	out := new(GremlinGroovyConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GremlinGroovySandboxRules) DeepCopyInto(out *GremlinGroovySandboxRules) {
	*out = *in
	if in.WhitelistPackages != nil {
		in, out := &in.WhitelistPackages, &out.WhitelistPackages
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WhitelistTypes != nil {
		in, out := &in.WhitelistTypes, &out.WhitelistTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.WhitelistSupers != nil {
		in, out := &in.WhitelistSupers, &out.WhitelistSupers
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.BlacklistPackages != nil {
		in, out := &in.BlacklistPackages, &out.BlacklistPackages
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.BlacklistSupers != nil {
		in, out := &in.BlacklistSupers, &out.BlacklistSupers
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GremlinGroovySandboxRules.
func (in *GremlinGroovySandboxRules) DeepCopy() *GremlinGroovySandboxRules {
	if in == nil {
		return nil
	}
	out := new(GremlinGroovySandboxRules)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GremlinScriptEngine) DeepCopyInto(out *GremlinScriptEngine) {
	*out = *in
	if in.GremlinGroovy != nil {
		in, out := &in.GremlinGroovy, &out.GremlinGroovy
		*out = new(GremlinGroovy)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GremlinScriptEngine.
func (in *GremlinScriptEngine) DeepCopy() *GremlinScriptEngine {
	if in == nil {
		return nil
	}
	out := new(GremlinScriptEngine)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GremlinServerOptions) DeepCopyInto(out *GremlinServerOptions) {
	*out = *in
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolWorker != nil {
		in, out := &in.ThreadPoolWorker, &out.ThreadPoolWorker
		*out = new(int)
		**out = **in
	}
	if in.GremlinPool != nil {
		in, out := &in.GremlinPool, &out.GremlinPool
		*out = new(int)
		**out = **in
	}
	if in.ScriptEngines != nil {
		in, out := &in.ScriptEngines, &out.ScriptEngines
		*out = new(GremlinScriptEngine)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GremlinServerOptions.
func (in *GremlinServerOptions) DeepCopy() *GremlinServerOptions {
	if in == nil {
		return nil
	}
	out := new(GremlinServerOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HistogramDataOptions) DeepCopyInto(out *HistogramDataOptions) {
	*out = *in
	in.MetricsOptions.DeepCopyInto(&out.MetricsOptions)
	if in.RetentionCount != nil {
		in, out := &in.RetentionCount, &out.RetentionCount
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HistogramDataOptions.
func (in *HistogramDataOptions) DeepCopy() *HistogramDataOptions {
	if in == nil {
		return nil
	}
	out := new(HistogramDataOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexOptions) DeepCopyInto(out *IndexOptions) {
	*out = *in
	if in.SegmentWriteBufferSpaceMb != nil {
		in, out := &in.SegmentWriteBufferSpaceMb, &out.SegmentWriteBufferSpaceMb
		*out = new(int)
		**out = **in
	}
	if in.ZerocopyUsedThreshold != nil {
		in, out := &in.ZerocopyUsedThreshold, &out.ZerocopyUsedThreshold
		x := (*in).DeepCopy()
		*out = &x
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexOptions.
func (in *IndexOptions) DeepCopy() *IndexOptions {
	if in == nil {
		return nil
	}
	out := new(IndexOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InsightsOptions) DeepCopyInto(out *InsightsOptions) {
	*out = *in
	if in.DataDir != nil {
		in, out := &in.DataDir, &out.DataDir
		*out = new(string)
		**out = **in
	}
	if in.LogDir != nil {
		in, out := &in.LogDir, &out.LogDir
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InsightsOptions.
func (in *InsightsOptions) DeepCopy() *InsightsOptions {
	if in == nil {
		return nil
	}
	out := new(InsightsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternodeMessagingOptions) DeepCopyInto(out *InternodeMessagingOptions) {
	*out = *in
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int)
		**out = **in
	}
	if in.FrameLengthInMb != nil {
		in, out := &in.FrameLengthInMb, &out.FrameLengthInMb
		*out = new(int)
		**out = **in
	}
	if in.ServerAcceptorThreads != nil {
		in, out := &in.ServerAcceptorThreads, &out.ServerAcceptorThreads
		*out = new(int)
		**out = **in
	}
	if in.ServerWorkerThreads != nil {
		in, out := &in.ServerWorkerThreads, &out.ServerWorkerThreads
		*out = new(int)
		**out = **in
	}
	if in.ClientMaxConnections != nil {
		in, out := &in.ClientMaxConnections, &out.ClientMaxConnections
		*out = new(int)
		**out = **in
	}
	if in.ClientWorkerThreads != nil {
		in, out := &in.ClientWorkerThreads, &out.ClientWorkerThreads
		*out = new(int)
		**out = **in
	}
	if in.HandshakeTimeoutSeconds != nil {
		in, out := &in.HandshakeTimeoutSeconds, &out.HandshakeTimeoutSeconds
		*out = new(int)
		**out = **in
	}
	if in.ClientRequestTimeoutSeconds != nil {
		in, out := &in.ClientRequestTimeoutSeconds, &out.ClientRequestTimeoutSeconds
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternodeMessagingOptions.
func (in *InternodeMessagingOptions) DeepCopy() *InternodeMessagingOptions {
	if in == nil {
		return nil
	}
	out := new(InternodeMessagingOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JvmOptions) DeepCopyInto(out *JvmOptions) {
	*out = *in
	if in.HeapSize != nil {
		in, out := &in.HeapSize, &out.HeapSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.InitialHeapSize != nil {
		in, out := &in.InitialHeapSize, &out.InitialHeapSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.MaxHeapSize != nil {
		in, out := &in.MaxHeapSize, &out.MaxHeapSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.EnableAssertions != nil {
		in, out := &in.EnableAssertions, &out.EnableAssertions
		*out = new(bool)
		**out = **in
	}
	if in.EnableThreadPriorities != nil {
		in, out := &in.EnableThreadPriorities, &out.EnableThreadPriorities
		*out = new(bool)
		**out = **in
	}
	if in.EnableNonRootThreadPriority != nil {
		in, out := &in.EnableNonRootThreadPriority, &out.EnableNonRootThreadPriority
		*out = new(bool)
		**out = **in
	}
	if in.HeapDumpOnOutOfMemoryError != nil {
		in, out := &in.HeapDumpOnOutOfMemoryError, &out.HeapDumpOnOutOfMemoryError
		*out = new(bool)
		**out = **in
	}
	if in.PerThreadStackSize != nil {
		in, out := &in.PerThreadStackSize, &out.PerThreadStackSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.StringTableSize != nil {
		in, out := &in.StringTableSize, &out.StringTableSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.AlwaysPreTouch != nil {
		in, out := &in.AlwaysPreTouch, &out.AlwaysPreTouch
		*out = new(bool)
		**out = **in
	}
	if in.DisableBiasedLocking != nil {
		in, out := &in.DisableBiasedLocking, &out.DisableBiasedLocking
		*out = new(bool)
		**out = **in
	}
	if in.UseTlab != nil {
		in, out := &in.UseTlab, &out.UseTlab
		*out = new(bool)
		**out = **in
	}
	if in.ResizeTlab != nil {
		in, out := &in.ResizeTlab, &out.ResizeTlab
		*out = new(bool)
		**out = **in
	}
	if in.DisablePerfSharedMem != nil {
		in, out := &in.DisablePerfSharedMem, &out.DisablePerfSharedMem
		*out = new(bool)
		**out = **in
	}
	if in.PreferIpv4 != nil {
		in, out := &in.PreferIpv4, &out.PreferIpv4
		*out = new(bool)
		**out = **in
	}
	if in.UseNuma != nil {
		in, out := &in.UseNuma, &out.UseNuma
		*out = new(bool)
		**out = **in
	}
	if in.PrintHeapHistogramOnOutOfMemoryError != nil {
		in, out := &in.PrintHeapHistogramOnOutOfMemoryError, &out.PrintHeapHistogramOnOutOfMemoryError
		*out = new(bool)
		**out = **in
	}
	if in.ExitOnOutOfMemoryError != nil {
		in, out := &in.ExitOnOutOfMemoryError, &out.ExitOnOutOfMemoryError
		*out = new(bool)
		**out = **in
	}
	if in.CrashOnOutOfMemoryError != nil {
		in, out := &in.CrashOnOutOfMemoryError, &out.CrashOnOutOfMemoryError
		*out = new(bool)
		**out = **in
	}
	if in.GuaranteedSafepointIntervalMs != nil {
		in, out := &in.GuaranteedSafepointIntervalMs, &out.GuaranteedSafepointIntervalMs
		*out = new(int)
		**out = **in
	}
	if in.NettyEventloopMaxPendingTasks != nil {
		in, out := &in.NettyEventloopMaxPendingTasks, &out.NettyEventloopMaxPendingTasks
		*out = new(int)
		**out = **in
	}
	if in.NettyTryReflectionSetAccessible != nil {
		in, out := &in.NettyTryReflectionSetAccessible, &out.NettyTryReflectionSetAccessible
		*out = new(bool)
		**out = **in
	}
	if in.NioMaxCachedBufferSize != nil {
		in, out := &in.NioMaxCachedBufferSize, &out.NioMaxCachedBufferSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.NioAlignDirectMemory != nil {
		in, out := &in.NioAlignDirectMemory, &out.NioAlignDirectMemory
		*out = new(bool)
		**out = **in
	}
	if in.JdkAllowAttachSelf != nil {
		in, out := &in.JdkAllowAttachSelf, &out.JdkAllowAttachSelf
		*out = new(bool)
		**out = **in
	}
	if in.AvailableProcessors != nil {
		in, out := &in.AvailableProcessors, &out.AvailableProcessors
		*out = new(int)
		**out = **in
	}
	if in.MetricsReporterConfigFile != nil {
		in, out := &in.MetricsReporterConfigFile, &out.MetricsReporterConfigFile
		*out = new(string)
		**out = **in
	}
	if in.RingDelayMs != nil {
		in, out := &in.RingDelayMs, &out.RingDelayMs
		*out = new(int)
		**out = **in
	}
	if in.TriggersDirectory != nil {
		in, out := &in.TriggersDirectory, &out.TriggersDirectory
		*out = new(string)
		**out = **in
	}
	if in.WriteSurvey != nil {
		in, out := &in.WriteSurvey, &out.WriteSurvey
		*out = new(bool)
		**out = **in
	}
	if in.DisableAuthCachesRemoteConfiguration != nil {
		in, out := &in.DisableAuthCachesRemoteConfiguration, &out.DisableAuthCachesRemoteConfiguration
		*out = new(bool)
		**out = **in
	}
	if in.ForceDefaultIndexingPageSize != nil {
		in, out := &in.ForceDefaultIndexingPageSize, &out.ForceDefaultIndexingPageSize
		*out = new(bool)
		**out = **in
	}
	if in.Force30ProtocolVersion != nil {
		in, out := &in.Force30ProtocolVersion, &out.Force30ProtocolVersion
		*out = new(bool)
		**out = **in
	}
	if in.ExpirationDateOverflowPolicy != nil {
		in, out := &in.ExpirationDateOverflowPolicy, &out.ExpirationDateOverflowPolicy
		*out = new(string)
		**out = **in
	}
	if in.MaxHintTtlSeconds != nil {
		in, out := &in.MaxHintTtlSeconds, &out.MaxHintTtlSeconds
		*out = new(int)
		**out = **in
	}
	if in.HeapNewGenSize != nil {
		in, out := &in.HeapNewGenSize, &out.HeapNewGenSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.CmsHeapSizeYoungGeneration != nil {
		in, out := &in.CmsHeapSizeYoungGeneration, &out.CmsHeapSizeYoungGeneration
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.CmsSurvivorRatio != nil {
		in, out := &in.CmsSurvivorRatio, &out.CmsSurvivorRatio
		*out = new(int)
		**out = **in
	}
	if in.CmsMaxTenuringThreshold != nil {
		in, out := &in.CmsMaxTenuringThreshold, &out.CmsMaxTenuringThreshold
		*out = new(int)
		**out = **in
	}
	if in.CmsInitiatingOccupancyFraction != nil {
		in, out := &in.CmsInitiatingOccupancyFraction, &out.CmsInitiatingOccupancyFraction
		*out = new(int)
		**out = **in
	}
	if in.CmsWaitDurationMs != nil {
		in, out := &in.CmsWaitDurationMs, &out.CmsWaitDurationMs
		*out = new(int)
		**out = **in
	}
	if in.G1RSetUpdatingPauseTimePercent != nil {
		in, out := &in.G1RSetUpdatingPauseTimePercent, &out.G1RSetUpdatingPauseTimePercent
		*out = new(int)
		**out = **in
	}
	if in.G1MaxGcPauseMs != nil {
		in, out := &in.G1MaxGcPauseMs, &out.G1MaxGcPauseMs
		*out = new(int)
		**out = **in
	}
	if in.G1InitiatingHeapOccupancyPercent != nil {
		in, out := &in.G1InitiatingHeapOccupancyPercent, &out.G1InitiatingHeapOccupancyPercent
		*out = new(int)
		**out = **in
	}
	if in.G1ParallelGcThreads != nil {
		in, out := &in.G1ParallelGcThreads, &out.G1ParallelGcThreads
		*out = new(int)
		**out = **in
	}
	if in.G1ConcGcThreads != nil {
		in, out := &in.G1ConcGcThreads, &out.G1ConcGcThreads
		*out = new(int)
		**out = **in
	}
	if in.PrintDetails != nil {
		in, out := &in.PrintDetails, &out.PrintDetails
		*out = new(bool)
		**out = **in
	}
	if in.PrintDateStamps != nil {
		in, out := &in.PrintDateStamps, &out.PrintDateStamps
		*out = new(bool)
		**out = **in
	}
	if in.PrintHeap != nil {
		in, out := &in.PrintHeap, &out.PrintHeap
		*out = new(bool)
		**out = **in
	}
	if in.PrintTenuringDistribution != nil {
		in, out := &in.PrintTenuringDistribution, &out.PrintTenuringDistribution
		*out = new(bool)
		**out = **in
	}
	if in.PrintApplicationStoppedTime != nil {
		in, out := &in.PrintApplicationStoppedTime, &out.PrintApplicationStoppedTime
		*out = new(bool)
		**out = **in
	}
	if in.PrintPromotionFailure != nil {
		in, out := &in.PrintPromotionFailure, &out.PrintPromotionFailure
		*out = new(bool)
		**out = **in
	}
	if in.PrintFlssStatistics != nil {
		in, out := &in.PrintFlssStatistics, &out.PrintFlssStatistics
		*out = new(bool)
		**out = **in
	}
	if in.UseLogFile != nil {
		in, out := &in.UseLogFile, &out.UseLogFile
		*out = new(bool)
		**out = **in
	}
	if in.UseLogFileRotation != nil {
		in, out := &in.UseLogFileRotation, &out.UseLogFileRotation
		*out = new(bool)
		**out = **in
	}
	if in.NumberOfLogFiles != nil {
		in, out := &in.NumberOfLogFiles, &out.NumberOfLogFiles
		*out = new(int)
		**out = **in
	}
	if in.LogFileSize != nil {
		in, out := &in.LogFileSize, &out.LogFileSize
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.JmxPort != nil {
		in, out := &in.JmxPort, &out.JmxPort
		*out = new(int)
		**out = **in
	}
	if in.JmxConnectionType != nil {
		in, out := &in.JmxConnectionType, &out.JmxConnectionType
		*out = new(string)
		**out = **in
	}
	if in.JmxRemoteSsl != nil {
		in, out := &in.JmxRemoteSsl, &out.JmxRemoteSsl
		*out = new(bool)
		**out = **in
	}
	if in.JmxRemoteSslOpts != nil {
		in, out := &in.JmxRemoteSslOpts, &out.JmxRemoteSslOpts
		*out = new(string)
		**out = **in
	}
	if in.JmxRemoteSslRequireClientAuth != nil {
		in, out := &in.JmxRemoteSslRequireClientAuth, &out.JmxRemoteSslRequireClientAuth
		*out = new(bool)
		**out = **in
	}
	if in.UnlockCommercialFeatures != nil {
		in, out := &in.UnlockCommercialFeatures, &out.UnlockCommercialFeatures
		*out = new(bool)
		**out = **in
	}
	if in.EnableFlightRecorder != nil {
		in, out := &in.EnableFlightRecorder, &out.EnableFlightRecorder
		*out = new(bool)
		**out = **in
	}
	if in.ListenForRemoteDebuggers != nil {
		in, out := &in.ListenForRemoteDebuggers, &out.ListenForRemoteDebuggers
		*out = new(bool)
		**out = **in
	}
	if in.DisableContendedAnnotations != nil {
		in, out := &in.DisableContendedAnnotations, &out.DisableContendedAnnotations
		*out = new(bool)
		**out = **in
	}
	if in.DebugNonSafepoints != nil {
		in, out := &in.DebugNonSafepoints, &out.DebugNonSafepoints
		*out = new(bool)
		**out = **in
	}
	if in.UnlockDiagnosticVmOptions != nil {
		in, out := &in.UnlockDiagnosticVmOptions, &out.UnlockDiagnosticVmOptions
		*out = new(bool)
		**out = **in
	}
	if in.LogCompilation != nil {
		in, out := &in.LogCompilation, &out.LogCompilation
		*out = new(bool)
		**out = **in
	}
	if in.PreserveFramePointer != nil {
		in, out := &in.PreserveFramePointer, &out.PreserveFramePointer
		*out = new(bool)
		**out = **in
	}
	if in.AdditionalOptions != nil {
		in, out := &in.AdditionalOptions, &out.AdditionalOptions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JvmOptions.
func (in *JvmOptions) DeepCopy() *JvmOptions {
	if in == nil {
		return nil
	}
	out := new(JvmOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *K8ssandraCluster) DeepCopyInto(out *K8ssandraCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new K8ssandraCluster.
func (in *K8ssandraCluster) DeepCopy() *K8ssandraCluster {
	if in == nil {
		return nil
	}
	out := new(K8ssandraCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *K8ssandraCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *K8ssandraClusterCondition) DeepCopyInto(out *K8ssandraClusterCondition) {
	*out = *in
	if in.LastTransitionTime != nil {
		in, out := &in.LastTransitionTime, &out.LastTransitionTime
		*out = (*in).DeepCopy()
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new K8ssandraClusterCondition.
func (in *K8ssandraClusterCondition) DeepCopy() *K8ssandraClusterCondition {
	if in == nil {
		return nil
	}
	out := new(K8ssandraClusterCondition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *K8ssandraClusterList) DeepCopyInto(out *K8ssandraClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]K8ssandraCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new K8ssandraClusterList.
func (in *K8ssandraClusterList) DeepCopy() *K8ssandraClusterList {
	if in == nil {
		return nil
	}
	out := new(K8ssandraClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *K8ssandraClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *K8ssandraClusterSpec) DeepCopyInto(out *K8ssandraClusterSpec) {
	*out = *in
	if in.Auth != nil {
		in, out := &in.Auth, &out.Auth
		*out = new(bool)
		**out = **in
	}
	if in.Cassandra != nil {
		in, out := &in.Cassandra, &out.Cassandra
		*out = new(CassandraClusterTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.Stargate != nil {
		in, out := &in.Stargate, &out.Stargate
		*out = new(stargatev1alpha1.StargateClusterTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.Reaper != nil {
		in, out := &in.Reaper, &out.Reaper
		*out = new(reaperv1alpha1.ReaperClusterTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.Medusa != nil {
		in, out := &in.Medusa, &out.Medusa
		*out = new(medusav1alpha1.MedusaClusterTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.ExternalDatacenters != nil {
		in, out := &in.ExternalDatacenters, &out.ExternalDatacenters
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new K8ssandraClusterSpec.
func (in *K8ssandraClusterSpec) DeepCopy() *K8ssandraClusterSpec {
	if in == nil {
		return nil
	}
	out := new(K8ssandraClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *K8ssandraClusterStatus) DeepCopyInto(out *K8ssandraClusterStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]K8ssandraClusterCondition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Datacenters != nil {
		in, out := &in.Datacenters, &out.Datacenters
		*out = make(map[string]K8ssandraStatus, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new K8ssandraClusterStatus.
func (in *K8ssandraClusterStatus) DeepCopy() *K8ssandraClusterStatus {
	if in == nil {
		return nil
	}
	out := new(K8ssandraClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *K8ssandraStatus) DeepCopyInto(out *K8ssandraStatus) {
	*out = *in
	if in.Cassandra != nil {
		in, out := &in.Cassandra, &out.Cassandra
		*out = new(v1beta1.CassandraDatacenterStatus)
		(*in).DeepCopyInto(*out)
	}
	if in.Stargate != nil {
		in, out := &in.Stargate, &out.Stargate
		*out = new(stargatev1alpha1.StargateStatus)
		(*in).DeepCopyInto(*out)
	}
	if in.Reaper != nil {
		in, out := &in.Reaper, &out.Reaper
		*out = new(reaperv1alpha1.ReaperStatus)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new K8ssandraStatus.
func (in *K8ssandraStatus) DeepCopy() *K8ssandraStatus {
	if in == nil {
		return nil
	}
	out := new(K8ssandraStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *K8ssandraVolumes) DeepCopyInto(out *K8ssandraVolumes) {
	*out = *in
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]v1.Volume, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PVCs != nil {
		in, out := &in.PVCs, &out.PVCs
		*out = make([]v1beta1.AdditionalVolumes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new K8ssandraVolumes.
func (in *K8ssandraVolumes) DeepCopy() *K8ssandraVolumes {
	if in == nil {
		return nil
	}
	out := new(K8ssandraVolumes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KerberosOptions) DeepCopyInto(out *KerberosOptions) {
	*out = *in
	if in.Keytab != nil {
		in, out := &in.Keytab, &out.Keytab
		*out = new(string)
		**out = **in
	}
	if in.ServicePrincipal != nil {
		in, out := &in.ServicePrincipal, &out.ServicePrincipal
		*out = new(string)
		**out = **in
	}
	if in.HTTPPrincipal != nil {
		in, out := &in.HTTPPrincipal, &out.HTTPPrincipal
		*out = new(string)
		**out = **in
	}
	if in.QOP != nil {
		in, out := &in.QOP, &out.QOP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KerberosOptions.
func (in *KerberosOptions) DeepCopy() *KerberosOptions {
	if in == nil {
		return nil
	}
	out := new(KerberosOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KmipEncryptionOptions) DeepCopyInto(out *KmipEncryptionOptions) {
	*out = *in
	if in.KmipHosts != nil {
		in, out := &in.KmipHosts, &out.KmipHosts
		*out = make(map[string]KmipHostsGroup, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KmipEncryptionOptions.
func (in *KmipEncryptionOptions) DeepCopy() *KmipEncryptionOptions {
	if in == nil {
		return nil
	}
	out := new(KmipEncryptionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KmipHostsGroup) DeepCopyInto(out *KmipHostsGroup) {
	*out = *in
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = new(string)
		**out = **in
	}
	if in.KeystorePath != nil {
		in, out := &in.KeystorePath, &out.KeystorePath
		*out = new(string)
		**out = **in
	}
	if in.KeystoreType != nil {
		in, out := &in.KeystoreType, &out.KeystoreType
		*out = new(string)
		**out = **in
	}
	if in.KeystorePassword != nil {
		in, out := &in.KeystorePassword, &out.KeystorePassword
		*out = new(string)
		**out = **in
	}
	if in.TruststorePath != nil {
		in, out := &in.TruststorePath, &out.TruststorePath
		*out = new(string)
		**out = **in
	}
	if in.TruststoreType != nil {
		in, out := &in.TruststoreType, &out.TruststoreType
		*out = new(string)
		**out = **in
	}
	if in.TruststorePassword != nil {
		in, out := &in.TruststorePassword, &out.TruststorePassword
		*out = new(string)
		**out = **in
	}
	if in.KeyCacheMillis != nil {
		in, out := &in.KeyCacheMillis, &out.KeyCacheMillis
		*out = new(int)
		**out = **in
	}
	if in.TimeoutMillis != nil {
		in, out := &in.TimeoutMillis, &out.TimeoutMillis
		*out = new(int)
		**out = **in
	}
	if in.KeyCacheUpdateMillis != nil {
		in, out := &in.KeyCacheUpdateMillis, &out.KeyCacheUpdateMillis
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KmipHostsGroup.
func (in *KmipHostsGroup) DeepCopy() *KmipHostsGroup {
	if in == nil {
		return nil
	}
	out := new(KmipHostsGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LdapConnectionPoolOptions) DeepCopyInto(out *LdapConnectionPoolOptions) {
	*out = *in
	if in.MaxActive != nil {
		in, out := &in.MaxActive, &out.MaxActive
		*out = new(int)
		**out = **in
	}
	if in.MaxIdle != nil {
		in, out := &in.MaxIdle, &out.MaxIdle
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LdapConnectionPoolOptions.
func (in *LdapConnectionPoolOptions) DeepCopy() *LdapConnectionPoolOptions {
	if in == nil {
		return nil
	}
	out := new(LdapConnectionPoolOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LdapOptions) DeepCopyInto(out *LdapOptions) {
	*out = *in
	if in.ServerHost != nil {
		in, out := &in.ServerHost, &out.ServerHost
		*out = new(string)
		**out = **in
	}
	if in.ServerPort != nil {
		in, out := &in.ServerPort, &out.ServerPort
		*out = new(int)
		**out = **in
	}
	if in.HostnameVerification != nil {
		in, out := &in.HostnameVerification, &out.HostnameVerification
		*out = new(bool)
		**out = **in
	}
	if in.SearchDN != nil {
		in, out := &in.SearchDN, &out.SearchDN
		*out = new(string)
		**out = **in
	}
	if in.SearchPassword != nil {
		in, out := &in.SearchPassword, &out.SearchPassword
		*out = new(string)
		**out = **in
	}
	if in.UseSSL != nil {
		in, out := &in.UseSSL, &out.UseSSL
		*out = new(bool)
		**out = **in
	}
	if in.UseTLS != nil {
		in, out := &in.UseTLS, &out.UseTLS
		*out = new(bool)
		**out = **in
	}
	if in.TruststorePath != nil {
		in, out := &in.TruststorePath, &out.TruststorePath
		*out = new(string)
		**out = **in
	}
	if in.TruststorePassword != nil {
		in, out := &in.TruststorePassword, &out.TruststorePassword
		*out = new(string)
		**out = **in
	}
	if in.TruststoreType != nil {
		in, out := &in.TruststoreType, &out.TruststoreType
		*out = new(string)
		**out = **in
	}
	if in.UserSearchBase != nil {
		in, out := &in.UserSearchBase, &out.UserSearchBase
		*out = new(string)
		**out = **in
	}
	if in.UserSearchFilter != nil {
		in, out := &in.UserSearchFilter, &out.UserSearchFilter
		*out = new(string)
		**out = **in
	}
	if in.UserMemberOfAttribute != nil {
		in, out := &in.UserMemberOfAttribute, &out.UserMemberOfAttribute
		*out = new(string)
		**out = **in
	}
	if in.ExtraUserSearchBases != nil {
		in, out := &in.ExtraUserSearchBases, &out.ExtraUserSearchBases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.GroupSearchType != nil {
		in, out := &in.GroupSearchType, &out.GroupSearchType
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchBase != nil {
		in, out := &in.GroupSearchBase, &out.GroupSearchBase
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchFilter != nil {
		in, out := &in.GroupSearchFilter, &out.GroupSearchFilter
		*out = new(string)
		**out = **in
	}
	if in.GroupNameAttribute != nil {
		in, out := &in.GroupNameAttribute, &out.GroupNameAttribute
		*out = new(string)
		**out = **in
	}
	if in.ExtraGroupSearchBases != nil {
		in, out := &in.ExtraGroupSearchBases, &out.ExtraGroupSearchBases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CredentialsValidityInMs != nil {
		in, out := &in.CredentialsValidityInMs, &out.CredentialsValidityInMs
		*out = new(int)
		**out = **in
	}
	if in.SearchValidityInSeconds != nil {
		in, out := &in.SearchValidityInSeconds, &out.SearchValidityInSeconds
		*out = new(int)
		**out = **in
	}
	if in.ConnectionPool != nil {
		in, out := &in.ConnectionPool, &out.ConnectionPool
		*out = new(LdapConnectionPoolOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SslProtocol != nil {
		in, out := &in.SslProtocol, &out.SslProtocol
		*out = new(string)
		**out = **in
	}
	if in.AllParentGroupsSearchType != nil {
		in, out := &in.AllParentGroupsSearchType, &out.AllParentGroupsSearchType
		*out = new(string)
		**out = **in
	}
	if in.AllParentGroupsMemberOfAttribute != nil {
		in, out := &in.AllParentGroupsMemberOfAttribute, &out.AllParentGroupsMemberOfAttribute
		*out = new(string)
		**out = **in
	}
	if in.AllParentGroupsSearchFilter != nil {
		in, out := &in.AllParentGroupsSearchFilter, &out.AllParentGroupsSearchFilter
		*out = new(string)
		**out = **in
	}
	if in.DnsServiceDiscovery != nil {
		in, out := &in.DnsServiceDiscovery, &out.DnsServiceDiscovery
		*out = new(DnsServiceDiscovery)
		(*in).DeepCopyInto(*out)
	}
	if in.GroupsValidityInMs != nil {
		in, out := &in.GroupsValidityInMs, &out.GroupsValidityInMs
		*out = new(int)
		**out = **in
	}
	if in.GroupsUpdateIntervalInMs != nil {
		in, out := &in.GroupsUpdateIntervalInMs, &out.GroupsUpdateIntervalInMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LdapOptions.
func (in *LdapOptions) DeepCopy() *LdapOptions {
	if in == nil {
		return nil
	}
	out := new(LdapOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LeaseMetricsOptions) DeepCopyInto(out *LeaseMetricsOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TtlSeconds != nil {
		in, out := &in.TtlSeconds, &out.TtlSeconds
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LeaseMetricsOptions.
func (in *LeaseMetricsOptions) DeepCopy() *LeaseMetricsOptions {
	if in == nil {
		return nil
	}
	out := new(LeaseMetricsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricsOptions) DeepCopyInto(out *MetricsOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.RefreshRateMs != nil {
		in, out := &in.RefreshRateMs, &out.RefreshRateMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricsOptions.
func (in *MetricsOptions) DeepCopy() *MetricsOptions {
	if in == nil {
		return nil
	}
	out := new(MetricsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModeByAuthentication) DeepCopyInto(out *ModeByAuthentication) {
	*out = *in
	if in.Internal != nil {
		in, out := &in.Internal, &out.Internal
		*out = new(string)
		**out = **in
	}
	if in.Ldap != nil {
		in, out := &in.Ldap, &out.Ldap
		*out = new(string)
		**out = **in
	}
	if in.Kerberos != nil {
		in, out := &in.Kerberos, &out.Kerberos
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModeByAuthentication.
func (in *ModeByAuthentication) DeepCopy() *ModeByAuthentication {
	if in == nil {
		return nil
	}
	out := new(ModeByAuthentication)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeHealthOptions) DeepCopyInto(out *NodeHealthOptions) {
	*out = *in
	if in.RefreshRateMs != nil {
		in, out := &in.RefreshRateMs, &out.RefreshRateMs
		*out = new(int)
		**out = **in
	}
	if in.UptimeRampUpPeriodSeconds != nil {
		in, out := &in.UptimeRampUpPeriodSeconds, &out.UptimeRampUpPeriodSeconds
		*out = new(int)
		**out = **in
	}
	if in.DroppedMutationWindowMinutes != nil {
		in, out := &in.DroppedMutationWindowMinutes, &out.DroppedMutationWindowMinutes
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeHealthOptions.
func (in *NodeHealthOptions) DeepCopy() *NodeHealthOptions {
	if in == nil {
		return nil
	}
	out := new(NodeHealthOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterizedClass) DeepCopyInto(out *ParameterizedClass) {
	*out = *in
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterizedClass.
func (in *ParameterizedClass) DeepCopy() *ParameterizedClass {
	if in == nil {
		return nil
	}
	out := new(ParameterizedClass)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PerformanceServiceOptions) DeepCopyInto(out *PerformanceServiceOptions) {
	*out = *in
	if in.CoreThreads != nil {
		in, out := &in.CoreThreads, &out.CoreThreads
		*out = new(int)
		**out = **in
	}
	if in.MaxThreads != nil {
		in, out := &in.MaxThreads, &out.MaxThreads
		*out = new(int)
		**out = **in
	}
	if in.QueueCapacity != nil {
		in, out := &in.QueueCapacity, &out.QueueCapacity
		*out = new(int)
		**out = **in
	}
	if in.CqlSlowLogOptions != nil {
		in, out := &in.CqlSlowLogOptions, &out.CqlSlowLogOptions
		*out = new(CqlSlowLogOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.CqlSystemInfoOptions != nil {
		in, out := &in.CqlSystemInfoOptions, &out.CqlSystemInfoOptions
		*out = new(MetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceLevelLatencyTrackingOptions != nil {
		in, out := &in.ResourceLevelLatencyTrackingOptions, &out.ResourceLevelLatencyTrackingOptions
		*out = new(MetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.DbSummaryStatsOptions != nil {
		in, out := &in.DbSummaryStatsOptions, &out.DbSummaryStatsOptions
		*out = new(MetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterSummaryStatsOptions != nil {
		in, out := &in.ClusterSummaryStatsOptions, &out.ClusterSummaryStatsOptions
		*out = new(MetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkClusterInfoOptions != nil {
		in, out := &in.SparkClusterInfoOptions, &out.SparkClusterInfoOptions
		*out = new(MetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.HistogramDataOptions != nil {
		in, out := &in.HistogramDataOptions, &out.HistogramDataOptions
		*out = new(HistogramDataOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.UserLevelLatencyTrackingOptions != nil {
		in, out := &in.UserLevelLatencyTrackingOptions, &out.UserLevelLatencyTrackingOptions
		*out = new(UserLevelLatencyTrackingOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SolrPerformanceOptions != nil {
		in, out := &in.SolrPerformanceOptions, &out.SolrPerformanceOptions
		*out = new(SolrPerformanceOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkApplicationInfoOptions != nil {
		in, out := &in.SparkApplicationInfoOptions, &out.SparkApplicationInfoOptions
		*out = new(SparkApplicationInfoOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.GraphEvents != nil {
		in, out := &in.GraphEvents, &out.GraphEvents
		*out = new(GraphEvents)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PerformanceServiceOptions.
func (in *PerformanceServiceOptions) DeepCopy() *PerformanceServiceOptions {
	if in == nil {
		return nil
	}
	out := new(PerformanceServiceOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicaFilteringProtectionOptions) DeepCopyInto(out *ReplicaFilteringProtectionOptions) {
	*out = *in
	if in.CachedRowsWarnThreshold != nil {
		in, out := &in.CachedRowsWarnThreshold, &out.CachedRowsWarnThreshold
		*out = new(int)
		**out = **in
	}
	if in.CachedRowsFailThreshold != nil {
		in, out := &in.CachedRowsFailThreshold, &out.CachedRowsFailThreshold
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicaFilteringProtectionOptions.
func (in *ReplicaFilteringProtectionOptions) DeepCopy() *ReplicaFilteringProtectionOptions {
	if in == nil {
		return nil
	}
	out := new(ReplicaFilteringProtectionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequestSchedulerOptions) DeepCopyInto(out *RequestSchedulerOptions) {
	*out = *in
	if in.ThrottleLimit != nil {
		in, out := &in.ThrottleLimit, &out.ThrottleLimit
		*out = new(int)
		**out = **in
	}
	if in.DefaultWeight != nil {
		in, out := &in.DefaultWeight, &out.DefaultWeight
		*out = new(int)
		**out = **in
	}
	if in.Weights != nil {
		in, out := &in.Weights, &out.Weights
		*out = new(map[string]int)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]int, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequestSchedulerOptions.
func (in *RequestSchedulerOptions) DeepCopy() *RequestSchedulerOptions {
	if in == nil {
		return nil
	}
	out := new(RequestSchedulerOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleManagementOptions) DeepCopyInto(out *RoleManagementOptions) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.ModeByAuthentication != nil {
		in, out := &in.ModeByAuthentication, &out.ModeByAuthentication
		*out = new(ModeByAuthentication)
		(*in).DeepCopyInto(*out)
	}
	if in.Stats != nil {
		in, out := &in.Stats, &out.Stats
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleManagementOptions.
func (in *RoleManagementOptions) DeepCopy() *RoleManagementOptions {
	if in == nil {
		return nil
	}
	out := new(RoleManagementOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrCqlQueryOptions) DeepCopyInto(out *SolrCqlQueryOptions) {
	*out = *in
	if in.Paging != nil {
		in, out := &in.Paging, &out.Paging
		*out = new(string)
		**out = **in
	}
	if in.RowTimeout != nil {
		in, out := &in.RowTimeout, &out.RowTimeout
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrCqlQueryOptions.
func (in *SolrCqlQueryOptions) DeepCopy() *SolrCqlQueryOptions {
	if in == nil {
		return nil
	}
	out := new(SolrCqlQueryOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrEncryptionOptions) DeepCopyInto(out *SolrEncryptionOptions) {
	*out = *in
	if in.DecryptionCacheOffheapAllocation != nil {
		in, out := &in.DecryptionCacheOffheapAllocation, &out.DecryptionCacheOffheapAllocation
		*out = new(bool)
		**out = **in
	}
	if in.DecryptionCacheSizeInMb != nil {
		in, out := &in.DecryptionCacheSizeInMb, &out.DecryptionCacheSizeInMb
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrEncryptionOptions.
func (in *SolrEncryptionOptions) DeepCopy() *SolrEncryptionOptions {
	if in == nil {
		return nil
	}
	out := new(SolrEncryptionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrIndexingOptions) DeepCopyInto(out *SolrIndexingOptions) {
	*out = *in
	if in.DataDir != nil {
		in, out := &in.DataDir, &out.DataDir
		*out = new(string)
		**out = **in
	}
	if in.FieldCacheEnabled != nil {
		in, out := &in.FieldCacheEnabled, &out.FieldCacheEnabled
		*out = new(bool)
		**out = **in
	}
	if in.BackPressureThresholdPerCore != nil {
		in, out := &in.BackPressureThresholdPerCore, &out.BackPressureThresholdPerCore
		*out = new(int)
		**out = **in
	}
	if in.FlushMaxTimePerCoreMinutes != nil {
		in, out := &in.FlushMaxTimePerCoreMinutes, &out.FlushMaxTimePerCoreMinutes
		*out = new(int)
		**out = **in
	}
	if in.LoadMaxTimePerCoreMinutes != nil {
		in, out := &in.LoadMaxTimePerCoreMinutes, &out.LoadMaxTimePerCoreMinutes
		*out = new(int)
		**out = **in
	}
	if in.EnableIndexDiskFailurePolicy != nil {
		in, out := &in.EnableIndexDiskFailurePolicy, &out.EnableIndexDiskFailurePolicy
		*out = new(bool)
		**out = **in
	}
	if in.RamBufferHeapSpaceInMb != nil {
		in, out := &in.RamBufferHeapSpaceInMb, &out.RamBufferHeapSpaceInMb
		*out = new(int)
		**out = **in
	}
	if in.RamBufferOffheapSpaceInMb != nil {
		in, out := &in.RamBufferOffheapSpaceInMb, &out.RamBufferOffheapSpaceInMb
		*out = new(int)
		**out = **in
	}
	if in.AsyncBootstrapReindex != nil {
		in, out := &in.AsyncBootstrapReindex, &out.AsyncBootstrapReindex
		*out = new(bool)
		**out = **in
	}
	if in.ResourceUploadLimitMb != nil {
		in, out := &in.ResourceUploadLimitMb, &out.ResourceUploadLimitMb
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrIndexingOptions.
func (in *SolrIndexingOptions) DeepCopy() *SolrIndexingOptions {
	if in == nil {
		return nil
	}
	out := new(SolrIndexingOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrMetricsOptions) DeepCopyInto(out *SolrMetricsOptions) {
	*out = *in
	in.MetricsOptions.DeepCopyInto(&out.MetricsOptions)
	if in.TtlSeconds != nil {
		in, out := &in.TtlSeconds, &out.TtlSeconds
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrMetricsOptions.
func (in *SolrMetricsOptions) DeepCopy() *SolrMetricsOptions {
	if in == nil {
		return nil
	}
	out := new(SolrMetricsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrPerformanceOptions) DeepCopyInto(out *SolrPerformanceOptions) {
	*out = *in
	if in.SlowSubQueryLogOptions != nil {
		in, out := &in.SlowSubQueryLogOptions, &out.SlowSubQueryLogOptions
		*out = new(SolrSlowSubQueryLogOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.UpdateHandlerMetricsOptions != nil {
		in, out := &in.UpdateHandlerMetricsOptions, &out.UpdateHandlerMetricsOptions
		*out = new(SolrMetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.RequestHandlerMetricsOptions != nil {
		in, out := &in.RequestHandlerMetricsOptions, &out.RequestHandlerMetricsOptions
		*out = new(SolrMetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.IndexStatsOptions != nil {
		in, out := &in.IndexStatsOptions, &out.IndexStatsOptions
		*out = new(SolrMetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.CacheStatsOptions != nil {
		in, out := &in.CacheStatsOptions, &out.CacheStatsOptions
		*out = new(SolrMetricsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.LatencySnapshotOptions != nil {
		in, out := &in.LatencySnapshotOptions, &out.LatencySnapshotOptions
		*out = new(SolrMetricsOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrPerformanceOptions.
func (in *SolrPerformanceOptions) DeepCopy() *SolrPerformanceOptions {
	if in == nil {
		return nil
	}
	out := new(SolrPerformanceOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrSchedulerOptions) DeepCopyInto(out *SolrSchedulerOptions) {
	*out = *in
	if in.FixedRatePeriodInSeconds != nil {
		in, out := &in.FixedRatePeriodInSeconds, &out.FixedRatePeriodInSeconds
		*out = new(int)
		**out = **in
	}
	if in.InitialDelayInSeconds != nil {
		in, out := &in.InitialDelayInSeconds, &out.InitialDelayInSeconds
		*out = new(int)
		**out = **in
	}
	if in.MaxDocsPerBatch != nil {
		in, out := &in.MaxDocsPerBatch, &out.MaxDocsPerBatch
		*out = new(int)
		**out = **in
	}
	if in.ThreadPoolSize != nil {
		in, out := &in.ThreadPoolSize, &out.ThreadPoolSize
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrSchedulerOptions.
func (in *SolrSchedulerOptions) DeepCopy() *SolrSchedulerOptions {
	if in == nil {
		return nil
	}
	out := new(SolrSchedulerOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrShardTransportOptions) DeepCopyInto(out *SolrShardTransportOptions) {
	*out = *in
	if in.NettyClientRequestTimeoutMs != nil {
		in, out := &in.NettyClientRequestTimeoutMs, &out.NettyClientRequestTimeoutMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrShardTransportOptions.
func (in *SolrShardTransportOptions) DeepCopy() *SolrShardTransportOptions {
	if in == nil {
		return nil
	}
	out := new(SolrShardTransportOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SolrSlowSubQueryLogOptions) DeepCopyInto(out *SolrSlowSubQueryLogOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TtlSeconds != nil {
		in, out := &in.TtlSeconds, &out.TtlSeconds
		*out = new(int)
		**out = **in
	}
	if in.AsyncWriters != nil {
		in, out := &in.AsyncWriters, &out.AsyncWriters
		*out = new(int)
		**out = **in
	}
	if in.ThresholdMs != nil {
		in, out := &in.ThresholdMs, &out.ThresholdMs
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SolrSlowSubQueryLogOptions.
func (in *SolrSlowSubQueryLogOptions) DeepCopy() *SolrSlowSubQueryLogOptions {
	if in == nil {
		return nil
	}
	out := new(SolrSlowSubQueryLogOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkApplicationInfoDriverOptions) DeepCopyInto(out *SparkApplicationInfoDriverOptions) {
	*out = *in
	in.SparkApplicationInfoExecutorOptions.DeepCopyInto(&out.SparkApplicationInfoExecutorOptions)
	if in.StateSource != nil {
		in, out := &in.StateSource, &out.StateSource
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkApplicationInfoDriverOptions.
func (in *SparkApplicationInfoDriverOptions) DeepCopy() *SparkApplicationInfoDriverOptions {
	if in == nil {
		return nil
	}
	out := new(SparkApplicationInfoDriverOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkApplicationInfoExecutorOptions) DeepCopyInto(out *SparkApplicationInfoExecutorOptions) {
	*out = *in
	if in.Sink != nil {
		in, out := &in.Sink, &out.Sink
		*out = new(bool)
		**out = **in
	}
	if in.ConnectorSource != nil {
		in, out := &in.ConnectorSource, &out.ConnectorSource
		*out = new(bool)
		**out = **in
	}
	if in.JvmSource != nil {
		in, out := &in.JvmSource, &out.JvmSource
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkApplicationInfoExecutorOptions.
func (in *SparkApplicationInfoExecutorOptions) DeepCopy() *SparkApplicationInfoExecutorOptions {
	if in == nil {
		return nil
	}
	out := new(SparkApplicationInfoExecutorOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkApplicationInfoOptions) DeepCopyInto(out *SparkApplicationInfoOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.RefreshRateMs != nil {
		in, out := &in.RefreshRateMs, &out.RefreshRateMs
		*out = new(int)
		**out = **in
	}
	if in.Driver != nil {
		in, out := &in.Driver, &out.Driver
		*out = new(SparkApplicationInfoDriverOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.Executor != nil {
		in, out := &in.Executor, &out.Executor
		*out = new(SparkApplicationInfoExecutorOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkApplicationInfoOptions.
func (in *SparkApplicationInfoOptions) DeepCopy() *SparkApplicationInfoOptions {
	if in == nil {
		return nil
	}
	out := new(SparkApplicationInfoOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkProcessRunner) DeepCopyInto(out *SparkProcessRunner) {
	*out = *in
	if in.RunnerType != nil {
		in, out := &in.RunnerType, &out.RunnerType
		*out = new(string)
		**out = **in
	}
	if in.RunAsRunnerOptions != nil {
		in, out := &in.RunAsRunnerOptions, &out.RunAsRunnerOptions
		*out = new(SparkRunAsRunnerOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkProcessRunner.
func (in *SparkProcessRunner) DeepCopy() *SparkProcessRunner {
	if in == nil {
		return nil
	}
	out := new(SparkProcessRunner)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkResourceManagerOptions) DeepCopyInto(out *SparkResourceManagerOptions) {
	*out = *in
	if in.WorkerOptions != nil {
		in, out := &in.WorkerOptions, &out.WorkerOptions
		*out = new(SparkWorkerOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkResourceManagerOptions.
func (in *SparkResourceManagerOptions) DeepCopy() *SparkResourceManagerOptions {
	if in == nil {
		return nil
	}
	out := new(SparkResourceManagerOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkRunAsRunnerOptions) DeepCopyInto(out *SparkRunAsRunnerOptions) {
	*out = *in
	if in.UserSlots != nil {
		in, out := &in.UserSlots, &out.UserSlots
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkRunAsRunnerOptions.
func (in *SparkRunAsRunnerOptions) DeepCopy() *SparkRunAsRunnerOptions {
	if in == nil {
		return nil
	}
	out := new(SparkRunAsRunnerOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkUiEncryptionOptions) DeepCopyInto(out *SparkUiEncryptionOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Keystore != nil {
		in, out := &in.Keystore, &out.Keystore
		*out = new(string)
		**out = **in
	}
	if in.KeystorePassword != nil {
		in, out := &in.KeystorePassword, &out.KeystorePassword
		*out = new(string)
		**out = **in
	}
	if in.RequireClientAuth != nil {
		in, out := &in.RequireClientAuth, &out.RequireClientAuth
		*out = new(bool)
		**out = **in
	}
	if in.Truststore != nil {
		in, out := &in.Truststore, &out.Truststore
		*out = new(string)
		**out = **in
	}
	if in.TruststorePassword != nil {
		in, out := &in.TruststorePassword, &out.TruststorePassword
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.KeystoreType != nil {
		in, out := &in.KeystoreType, &out.KeystoreType
		*out = new(string)
		**out = **in
	}
	if in.TruststoreType != nil {
		in, out := &in.TruststoreType, &out.TruststoreType
		*out = new(string)
		**out = **in
	}
	if in.CipherSuites != nil {
		in, out := &in.CipherSuites, &out.CipherSuites
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkUiEncryptionOptions.
func (in *SparkUiEncryptionOptions) DeepCopy() *SparkUiEncryptionOptions {
	if in == nil {
		return nil
	}
	out := new(SparkUiEncryptionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkUiOptions) DeepCopyInto(out *SparkUiOptions) {
	*out = *in
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(string)
		**out = **in
	}
	if in.EncryptionOptions != nil {
		in, out := &in.EncryptionOptions, &out.EncryptionOptions
		*out = new(SparkUiEncryptionOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkUiOptions.
func (in *SparkUiOptions) DeepCopy() *SparkUiOptions {
	if in == nil {
		return nil
	}
	out := new(SparkUiOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkWorkerOptions) DeepCopyInto(out *SparkWorkerOptions) {
	*out = *in
	if in.CoresTotal != nil {
		in, out := &in.CoresTotal, &out.CoresTotal
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.MemoryTotal != nil {
		in, out := &in.MemoryTotal, &out.MemoryTotal
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.Workpools != nil {
		in, out := &in.Workpools, &out.Workpools
		*out = make([]SparkWorkpool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkWorkerOptions.
func (in *SparkWorkerOptions) DeepCopy() *SparkWorkerOptions {
	if in == nil {
		return nil
	}
	out := new(SparkWorkerOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkWorkpool) DeepCopyInto(out *SparkWorkpool) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Cores != nil {
		in, out := &in.Cores, &out.Cores
		x := (*in).DeepCopy()
		*out = &x
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		x := (*in).DeepCopy()
		*out = &x
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkWorkpool.
func (in *SparkWorkpool) DeepCopy() *SparkWorkpool {
	if in == nil {
		return nil
	}
	out := new(SparkWorkpool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageTier) DeepCopyInto(out *StorageTier) {
	*out = *in
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageTier.
func (in *StorageTier) DeepCopy() *StorageTier {
	if in == nil {
		return nil
	}
	out := new(StorageTier)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SubnetGroups) DeepCopyInto(out *SubnetGroups) {
	*out = *in
	if in.Subnets != nil {
		in, out := &in.Subnets, &out.Subnets
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SubnetGroups.
func (in *SubnetGroups) DeepCopy() *SubnetGroups {
	if in == nil {
		return nil
	}
	out := new(SubnetGroups)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemInfoEncryptionOptions) DeepCopyInto(out *SystemInfoEncryptionOptions) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.CipherAlgorithm != nil {
		in, out := &in.CipherAlgorithm, &out.CipherAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SecretKeyStrength != nil {
		in, out := &in.SecretKeyStrength, &out.SecretKeyStrength
		*out = new(int)
		**out = **in
	}
	if in.ChunkLengthKb != nil {
		in, out := &in.ChunkLengthKb, &out.ChunkLengthKb
		*out = new(int)
		**out = **in
	}
	if in.KeyProvider != nil {
		in, out := &in.KeyProvider, &out.KeyProvider
		*out = new(string)
		**out = **in
	}
	if in.KmipHost != nil {
		in, out := &in.KmipHost, &out.KmipHost
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemInfoEncryptionOptions.
func (in *SystemInfoEncryptionOptions) DeepCopy() *SystemInfoEncryptionOptions {
	if in == nil {
		return nil
	}
	out := new(SystemInfoEncryptionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TieredStorageOptions) DeepCopyInto(out *TieredStorageOptions) {
	*out = *in
	if in.Tiers != nil {
		in, out := &in.Tiers, &out.Tiers
		*out = make([]StorageTier, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LocalOptions != nil {
		in, out := &in.LocalOptions, &out.LocalOptions
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TieredStorageOptions.
func (in *TieredStorageOptions) DeepCopy() *TieredStorageOptions {
	if in == nil {
		return nil
	}
	out := new(TieredStorageOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrackWarnings) DeepCopyInto(out *TrackWarnings) {
	*out = *in
	if in.CoordinatorReadSize != nil {
		in, out := &in.CoordinatorReadSize, &out.CoordinatorReadSize
		*out = new(int)
		**out = **in
	}
	if in.LocalReadSize != nil {
		in, out := &in.LocalReadSize, &out.LocalReadSize
		*out = new(int)
		**out = **in
	}
	if in.RowIndexSize != nil {
		in, out := &in.RowIndexSize, &out.RowIndexSize
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrackWarnings.
func (in *TrackWarnings) DeepCopy() *TrackWarnings {
	if in == nil {
		return nil
	}
	out := new(TrackWarnings)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserLevelLatencyTrackingOptions) DeepCopyInto(out *UserLevelLatencyTrackingOptions) {
	*out = *in
	in.MetricsOptions.DeepCopyInto(&out.MetricsOptions)
	if in.TopStatsLimit != nil {
		in, out := &in.TopStatsLimit, &out.TopStatsLimit
		*out = new(int)
		**out = **in
	}
	if in.Quantiles != nil {
		in, out := &in.Quantiles, &out.Quantiles
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserLevelLatencyTrackingOptions.
func (in *UserLevelLatencyTrackingOptions) DeepCopy() *UserLevelLatencyTrackingOptions {
	if in == nil {
		return nil
	}
	out := new(UserLevelLatencyTrackingOptions)
	in.DeepCopyInto(out)
	return out
}
